
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 13 13:52:53 CST 2009
//----------------------------------------------------

package compiladorada;

import java.util.Stack;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.Writer;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 13 13:52:53 CST 2009
  */
public class Generator extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Generator() {super();}

  /** Constructor which sets the default scanner. */
  public Generator(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Generator(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\124\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\013\003\000\002\013\003\000" +
    "\002\005\003\000\002\014\005\000\002\014\007\000\002" +
    "\023\003\000\002\023\003\000\002\031\003\000\002\015" +
    "\002\000\002\015\003\000\002\024\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\025\003\000\002\025\005\000\002\026\007\000\002" +
    "\026\007\000\002\026\003\000\002\027\002\000\002\027" +
    "\003\000\002\027\003\000\002\027\004\000\002\030\002" +
    "\000\002\030\004\000\002\032\005\000\002\032\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\016\006\000\002\016\006\000\002\017\006" +
    "\000\002\017\006\000\002\020\005\000\002\020\005\000" +
    "\002\021\006\000\002\021\006\000\002\041\006\000\002" +
    "\041\006\000\002\042\003\000\002\042\005\000\002\042" +
    "\005\000\002\043\005\000\002\044\003\000\002\044\004" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\046\003\000\002\046\004\000\002\047\003\000\002\047" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\033\003\000\002\033\005\000\002" +
    "\035\003\000\002\035\005\000\002\037\003\000\002\037" +
    "\004\000\002\037\004\000\002\037\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\003\000" +
    "\002\010\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\121\005\000\002\040\003\000\002\040" +
    "\003\000\002\120\003\000\002\125\002\000\002\006\012" +
    "\000\002\051\005\000\002\051\006\000\002\051\010\000" +
    "\002\052\003\000\002\052\005\000\002\055\002\000\002" +
    "\055\004\000\002\100\002\000\002\100\004\000\002\057" +
    "\003\000\002\053\003\000\002\053\005\000\002\060\004" +
    "\000\002\060\004\000\002\060\003\000\002\061\002\000" +
    "\002\061\004\000\002\064\005\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\063\003\000\002\063\003\000\002\117\004\000" +
    "\002\065\004\000\002\066\006\000\002\066\006\000\002" +
    "\071\005\000\002\110\007\000\002\111\007\000\002\106" +
    "\002\000\002\106\003\000\002\107\003\000\002\107\005" +
    "\000\002\070\005\000\002\070\004\000\002\072\014\000" +
    "\002\102\002\000\002\102\007\000\002\075\002\000\002" +
    "\075\004\000\002\074\003\000\002\073\005\000\002\076" +
    "\006\000\002\103\002\000\002\103\006\000\002\103\004" +
    "\000\002\054\002\000\002\054\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\050\006\000\002\126\002\000\002\112\010\000\002\113" +
    "\006\000\002\114\003\000\002\114\004\000\002\115\002" +
    "\000\002\115\004\000\002\116\007\000\002\116\007\000" +
    "\002\116\010\000\002\122\002\000\002\123\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\006\040\000\064\000\001\002\000\006\040" +
    "\016\064\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\uffff\040\016\064\011\001" +
    "\002\000\016\003\uffa2\016\uffa2\040\uffa2\064\uffa2\105\uffa2" +
    "\154\uffa2\001\002\000\004\154\231\001\002\000\010\002" +
    "\ufffc\040\ufffc\064\ufffc\001\002\000\020\002\ufff8\003\ufff8" +
    "\016\ufff8\040\ufff8\064\ufff8\105\ufff8\154\ufff8\001\002\000" +
    "\010\002\ufffe\040\ufffe\064\ufffe\001\002\000\010\002\ufffb" +
    "\040\ufffb\064\ufffb\001\002\000\006\154\017\155\021\001" +
    "\002\000\010\074\ufff5\117\ufff5\127\ufff5\001\002\000\010" +
    "\074\ufff4\117\ufff4\127\ufff4\001\002\000\114\002\ufff3\003" +
    "\ufff3\013\ufff3\016\ufff3\040\ufff3\044\ufff3\046\ufff3\050\ufff3" +
    "\051\ufff3\053\ufff3\056\ufff3\064\ufff3\071\ufff3\074\ufff3\104" +
    "\ufff3\105\ufff3\113\ufff3\114\ufff3\116\ufff3\117\ufff3\120\ufff3" +
    "\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3\127\ufff3\130" +
    "\ufff3\131\ufff3\132\ufff3\135\ufff3\136\ufff3\137\ufff3\140\ufff3" +
    "\141\ufff3\142\ufff3\154\ufff3\001\002\000\006\074\ufff2\117" +
    "\025\001\002\000\004\074\ufff1\001\002\000\004\074\226" +
    "\001\002\000\006\003\027\154\030\001\002\000\006\116" +
    "\223\127\224\001\002\000\006\116\uffe7\127\uffe7\001\002" +
    "\000\006\122\215\126\216\001\002\000\006\122\033\126" +
    "\034\001\002\000\006\116\uffeb\127\uffeb\001\002\000\004" +
    "\154\214\001\002\000\020\020\uffe6\037\uffe6\044\036\045" +
    "\uffe6\060\035\154\uffe6\155\uffe6\001\002\000\014\020\uffe4" +
    "\037\uffe4\045\uffe4\154\uffe4\155\uffe4\001\002\000\016\020" +
    "\uffe5\037\uffe5\045\uffe5\060\213\154\uffe5\155\uffe5\001\002" +
    "\000\014\020\046\037\044\045\040\154\042\155\021\001" +
    "\002\000\030\002\uffef\003\uffef\016\uffef\040\uffef\046\uffef" +
    "\064\uffef\105\uffef\116\uffef\127\uffef\137\uffef\154\uffef\001" +
    "\002\000\010\116\uffe2\127\uffe2\137\047\001\002\000\112" +
    "\002\ufffa\003\ufffa\013\ufffa\016\ufffa\040\ufffa\044\ufffa\046" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\056\ufffa\064\ufffa\071\ufffa" +
    "\104\ufffa\105\ufffa\113\ufffa\114\ufffa\116\ufffa\117\ufffa\120" +
    "\ufffa\121\ufffa\122\ufffa\123\ufffa\124\ufffa\125\ufffa\127\ufffa" +
    "\130\ufffa\131\ufffa\132\ufffa\135\ufffa\136\ufffa\137\ufffa\140" +
    "\ufffa\141\ufffa\142\ufffa\154\ufffa\001\002\000\112\002\ufff9" +
    "\003\ufff9\013\ufff9\016\ufff9\040\ufff9\044\ufff9\046\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\056\ufff9\064\ufff9\071\ufff9\104\ufff9" +
    "\105\ufff9\113\ufff9\114\ufff9\116\ufff9\117\ufff9\120\ufff9\121" +
    "\ufff9\122\ufff9\123\ufff9\124\ufff9\125\ufff9\127\ufff9\130\ufff9" +
    "\131\ufff9\132\ufff9\135\ufff9\136\ufff9\137\ufff9\140\ufff9\141" +
    "\ufff9\142\ufff9\154\ufff9\001\002\000\030\002\uffed\003\uffed" +
    "\016\uffed\040\uffed\046\uffed\064\uffed\105\uffed\116\uffed\127" +
    "\uffed\137\uffed\154\uffed\001\002\000\030\002\uffec\003\uffec" +
    "\016\uffec\040\uffec\046\uffec\064\uffec\105\uffec\116\uffec\127" +
    "\uffec\137\uffec\154\uffec\001\002\000\030\002\uffee\003\uffee" +
    "\016\uffee\040\uffee\046\uffee\064\uffee\105\uffee\116\uffee\127" +
    "\uffee\137\uffee\154\uffee\001\002\000\032\003\077\005\075" +
    "\053\057\054\103\117\076\121\105\123\051\150\064\152" +
    "\061\153\060\154\042\155\021\001\002\000\006\116\uffe8" +
    "\127\uffe8\001\002\000\024\005\uffbe\053\uffbe\054\uffbe\117" +
    "\uffbe\150\uffbe\152\uffbe\153\uffbe\154\uffbe\155\uffbe\001\002" +
    "\000\070\013\uffae\044\uffae\050\uffae\051\uffae\053\uffae\056" +
    "\uffae\071\uffae\104\uffae\113\uffae\114\uffae\116\uffae\117\203" +
    "\120\uffae\121\uffae\122\uffae\123\uffae\124\202\125\uffae\127" +
    "\uffae\130\uffae\131\uffae\132\uffae\135\uffae\136\uffae\140\uffae" +
    "\141\uffae\142\uffae\001\002\000\016\050\uffdc\056\177\104" +
    "\uffdc\116\uffdc\122\uffdc\127\uffdc\001\002\000\052\013\uffc9" +
    "\044\uffc9\050\uffc9\053\uffc9\056\uffc9\104\uffc9\113\uffc9\114" +
    "\131\116\uffc9\121\126\122\uffc9\123\127\127\uffc9\130\uffc9" +
    "\131\uffc9\132\uffc9\135\uffc9\140\uffc9\141\uffc9\142\uffc9\001" +
    "\002\000\016\050\uffdb\104\uffdb\113\175\116\uffdb\122\uffdb" +
    "\127\uffdb\001\002\000\006\116\uffe1\127\uffe1\001\002\000" +
    "\020\054\103\117\076\150\064\152\061\153\060\154\042" +
    "\155\021\001\002\000\064\013\uffa3\044\uffa3\050\uffa3\051" +
    "\uffa3\053\uffa3\056\uffa3\071\uffa3\104\uffa3\113\uffa3\114\uffa3" +
    "\116\uffa3\120\uffa3\121\uffa3\122\uffa3\123\uffa3\125\uffa3\127" +
    "\uffa3\130\uffa3\131\uffa3\132\uffa3\135\uffa3\136\uffa3\140\uffa3" +
    "\141\uffa3\142\uffa3\001\002\000\064\013\uffa4\044\uffa4\050" +
    "\uffa4\051\uffa4\053\uffa4\056\uffa4\071\uffa4\104\uffa4\113\uffa4" +
    "\114\uffa4\116\uffa4\120\uffa4\121\uffa4\122\uffa4\123\uffa4\125" +
    "\uffa4\127\uffa4\130\uffa4\131\uffa4\132\uffa4\135\uffa4\136\uffa4" +
    "\140\uffa4\141\uffa4\142\uffa4\001\002\000\016\013\171\050" +
    "\uffdd\104\uffdd\116\uffdd\122\uffdd\127\uffdd\001\002\000\064" +
    "\013\uffa8\044\uffa8\050\uffa8\051\uffa8\053\uffa8\056\uffa8\071" +
    "\uffa8\104\uffa8\113\uffa8\114\uffa8\116\uffa8\120\uffa8\121\uffa8" +
    "\122\uffa8\123\uffa8\125\uffa8\127\uffa8\130\uffa8\131\uffa8\132" +
    "\uffa8\135\uffa8\136\uffa8\140\uffa8\141\uffa8\142\uffa8\001\002" +
    "\000\064\013\uffa5\044\uffa5\050\uffa5\051\uffa5\053\uffa5\056" +
    "\uffa5\071\uffa5\104\uffa5\113\uffa5\114\uffa5\116\uffa5\120\uffa5" +
    "\121\uffa5\122\uffa5\123\uffa5\125\uffa5\127\uffa5\130\uffa5\131" +
    "\uffa5\132\uffa5\135\uffa5\136\uffa5\140\uffa5\141\uffa5\142\uffa5" +
    "\001\002\000\042\013\uffcd\044\153\050\uffcd\053\161\056" +
    "\uffcd\104\uffcd\113\uffcd\116\uffcd\122\uffcd\127\uffcd\130\155" +
    "\131\156\132\152\140\154\141\162\142\157\001\002\000" +
    "\064\013\uffb2\044\uffb2\050\uffb2\051\uffb2\053\uffb2\056\uffb2" +
    "\071\uffb2\104\uffb2\113\uffb2\114\uffb2\116\uffb2\120\uffb2\121" +
    "\uffb2\122\uffb2\123\uffb2\125\uffb2\127\uffb2\130\uffb2\131\uffb2" +
    "\132\uffb2\135\uffb2\136\147\140\uffb2\141\uffb2\142\uffb2\001" +
    "\002\000\016\050\uffd9\056\144\104\uffd9\116\uffd9\122\uffd9" +
    "\127\uffd9\001\002\000\016\013\141\050\uffda\104\uffda\116" +
    "\uffda\122\uffda\127\uffda\001\002\000\062\013\uffb4\044\uffb4" +
    "\050\uffb4\051\uffb4\053\uffb4\056\uffb4\071\uffb4\104\uffb4\113" +
    "\uffb4\114\uffb4\116\uffb4\120\uffb4\121\uffb4\122\uffb4\123\uffb4" +
    "\125\uffb4\127\uffb4\130\uffb4\131\uffb4\132\uffb4\135\uffb4\140" +
    "\uffb4\141\uffb4\142\uffb4\001\002\000\062\013\uffb6\044\uffb6" +
    "\050\uffb6\051\134\053\uffb6\056\uffb6\071\136\104\uffb6\113" +
    "\uffb6\114\uffb6\116\uffb6\120\133\121\uffb6\122\uffb6\123\uffb6" +
    "\125\135\127\uffb6\130\uffb6\131\uffb6\132\uffb6\135\uffb6\140" +
    "\uffb6\141\uffb6\142\uffb6\001\002\000\024\005\075\053\057" +
    "\054\103\117\076\150\064\152\061\153\060\154\042\155" +
    "\021\001\002\000\064\013\uffab\044\uffab\050\uffab\051\uffab" +
    "\053\uffab\056\uffab\071\uffab\104\uffab\113\uffab\114\uffab\116" +
    "\uffab\120\uffab\121\uffab\122\uffab\123\uffab\125\uffab\127\uffab" +
    "\130\uffab\131\uffab\132\uffab\135\uffab\136\uffab\140\uffab\141" +
    "\uffab\142\uffab\001\002\000\020\054\103\117\076\150\064" +
    "\152\061\153\060\154\042\155\021\001\002\000\032\003" +
    "\077\005\075\053\057\054\103\117\076\121\105\123\051" +
    "\150\064\152\061\153\060\154\042\155\021\001\002\000" +
    "\014\050\uffd8\104\uffd8\116\uffd8\122\uffd8\127\uffd8\001\002" +
    "\000\064\013\uffad\044\uffad\050\uffad\051\uffad\053\uffad\056" +
    "\uffad\071\uffad\104\uffad\113\uffad\114\uffad\116\uffad\120\uffad" +
    "\121\uffad\122\uffad\123\uffad\125\uffad\127\uffad\130\uffad\131" +
    "\uffad\132\uffad\135\uffad\136\uffad\140\uffad\141\uffad\142\uffad" +
    "\001\002\000\064\013\uffa7\044\uffa7\050\uffa7\051\uffa7\053" +
    "\uffa7\056\uffa7\071\uffa7\104\uffa7\113\uffa7\114\uffa7\116\uffa7" +
    "\120\uffa7\121\uffa7\122\uffa7\123\uffa7\125\uffa7\127\uffa7\130" +
    "\uffa7\131\uffa7\132\uffa7\135\uffa7\136\uffa7\140\uffa7\141\uffa7" +
    "\142\uffa7\001\002\000\022\013\106\050\uffde\056\107\104" +
    "\uffde\113\110\116\uffde\122\uffde\127\uffde\001\002\000\064" +
    "\013\uffa9\044\uffa9\050\uffa9\051\uffa9\053\uffa9\056\uffa9\071" +
    "\uffa9\104\uffa9\113\uffa9\114\uffa9\116\uffa9\120\uffa9\121\uffa9" +
    "\122\uffa9\123\uffa9\125\uffa9\127\uffa9\130\uffa9\131\uffa9\132" +
    "\uffa9\135\uffa9\136\uffa9\140\uffa9\141\uffa9\142\uffa9\001\002" +
    "\000\064\013\uffaa\044\uffaa\050\uffaa\051\uffaa\053\uffaa\056" +
    "\uffaa\071\uffaa\104\uffaa\113\uffaa\114\uffaa\116\uffaa\120\uffaa" +
    "\121\uffaa\122\uffaa\123\uffaa\125\uffaa\127\uffaa\130\uffaa\131" +
    "\uffaa\132\uffaa\135\uffaa\136\uffaa\140\uffaa\141\uffaa\142\uffaa" +
    "\001\002\000\024\005\uffbf\053\uffbf\054\uffbf\117\uffbf\150" +
    "\uffbf\152\uffbf\153\uffbf\154\uffbf\155\uffbf\001\002\000\032" +
    "\005\uff5b\053\uff5b\054\uff5b\104\116\117\uff5b\121\uff5b\123" +
    "\uff5b\150\uff5b\152\uff5b\153\uff5b\154\uff5b\155\uff5b\001\002" +
    "\000\032\005\uff5b\030\112\053\uff5b\054\uff5b\117\uff5b\121" +
    "\uff5b\123\uff5b\150\uff5b\152\uff5b\153\uff5b\154\uff5b\155\uff5b" +
    "\001\002\000\030\005\075\053\057\054\103\117\076\121" +
    "\105\123\051\150\064\152\061\153\060\154\042\155\021" +
    "\001\002\000\016\050\uffd3\104\uffd3\113\uffd3\116\uffd3\122" +
    "\uffd3\127\uffd3\001\002\000\030\005\075\053\057\054\103" +
    "\117\076\121\105\123\051\150\064\152\061\153\060\154" +
    "\042\155\021\001\002\000\030\005\075\053\057\054\103" +
    "\117\076\121\105\123\051\150\064\152\061\153\060\154" +
    "\042\155\021\001\002\000\016\050\uffd5\056\uffd5\104\uffd5" +
    "\116\uffd5\122\uffd5\127\uffd5\001\002\000\016\050\uffcf\056" +
    "\uffcf\104\uffcf\116\uffcf\122\uffcf\127\uffcf\001\002\000\030" +
    "\005\075\053\057\054\103\117\076\121\105\123\051\150" +
    "\064\152\061\153\060\154\042\155\021\001\002\000\030" +
    "\005\075\053\057\054\103\117\076\121\105\123\051\150" +
    "\064\152\061\153\060\154\042\155\021\001\002\000\016" +
    "\013\uffd7\050\uffd7\104\uffd7\116\uffd7\122\uffd7\127\uffd7\001" +
    "\002\000\016\013\uffd1\050\uffd1\104\uffd1\116\uffd1\122\uffd1" +
    "\127\uffd1\001\002\000\004\116\123\001\002\000\064\013" +
    "\uffac\044\uffac\050\uffac\051\uffac\053\uffac\056\uffac\071\uffac" +
    "\104\uffac\113\uffac\114\uffac\116\uffac\120\uffac\121\uffac\122" +
    "\uffac\123\uffac\125\uffac\127\uffac\130\uffac\131\uffac\132\uffac" +
    "\135\uffac\136\uffac\140\uffac\141\uffac\142\uffac\001\002\000" +
    "\062\013\uffb1\044\uffb1\050\uffb1\051\uffb1\053\uffb1\056\uffb1" +
    "\071\uffb1\104\uffb1\113\uffb1\114\uffb1\116\uffb1\120\uffb1\121" +
    "\uffb1\122\uffb1\123\uffb1\125\uffb1\127\uffb1\130\uffb1\131\uffb1" +
    "\132\uffb1\135\uffb1\140\uffb1\141\uffb1\142\uffb1\001\002\000" +
    "\052\013\uffc8\044\uffc8\050\uffc8\053\uffc8\056\uffc8\104\uffc8" +
    "\113\uffc8\114\131\116\uffc8\121\126\122\uffc8\123\127\127" +
    "\uffc8\130\uffc8\131\uffc8\132\uffc8\135\uffc8\140\uffc8\141\uffc8" +
    "\142\uffc8\001\002\000\024\005\uffbd\053\uffbd\054\uffbd\117" +
    "\uffbd\150\uffbd\152\uffbd\153\uffbd\154\uffbd\155\uffbd\001\002" +
    "\000\024\005\uffbc\053\uffbc\054\uffbc\117\uffbc\150\uffbc\152" +
    "\uffbc\153\uffbc\154\uffbc\155\uffbc\001\002\000\024\005\075" +
    "\053\057\054\103\117\076\150\064\152\061\153\060\154" +
    "\042\155\021\001\002\000\024\005\uffbb\053\uffbb\054\uffbb" +
    "\117\uffbb\150\uffbb\152\uffbb\153\uffbb\154\uffbb\155\uffbb\001" +
    "\002\000\062\013\uffb5\044\uffb5\050\uffb5\051\134\053\uffb5" +
    "\056\uffb5\071\136\104\uffb5\113\uffb5\114\uffb5\116\uffb5\120" +
    "\133\121\uffb5\122\uffb5\123\uffb5\125\135\127\uffb5\130\uffb5" +
    "\131\uffb5\132\uffb5\135\uffb5\140\uffb5\141\uffb5\142\uffb5\001" +
    "\002\000\024\005\uffba\053\uffba\054\uffba\117\uffba\150\uffba" +
    "\152\uffba\153\uffba\154\uffba\155\uffba\001\002\000\024\005" +
    "\uffb8\053\uffb8\054\uffb8\117\uffb8\150\uffb8\152\uffb8\153\uffb8" +
    "\154\uffb8\155\uffb8\001\002\000\024\005\uffb9\053\uffb9\054" +
    "\uffb9\117\uffb9\150\uffb9\152\uffb9\153\uffb9\154\uffb9\155\uffb9" +
    "\001\002\000\024\005\uffb7\053\uffb7\054\uffb7\117\uffb7\150" +
    "\uffb7\152\uffb7\153\uffb7\154\uffb7\155\uffb7\001\002\000\024" +
    "\005\075\053\057\054\103\117\076\150\064\152\061\153" +
    "\060\154\042\155\021\001\002\000\062\013\uffb3\044\uffb3" +
    "\050\uffb3\051\uffb3\053\uffb3\056\uffb3\071\uffb3\104\uffb3\113" +
    "\uffb3\114\uffb3\116\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3" +
    "\125\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\135\uffb3\140" +
    "\uffb3\141\uffb3\142\uffb3\001\002\000\004\104\142\001\002" +
    "\000\030\005\075\053\057\054\103\117\076\121\105\123" +
    "\051\150\064\152\061\153\060\154\042\155\021\001\002" +
    "\000\016\013\uffd0\050\uffd0\104\uffd0\116\uffd0\122\uffd0\127" +
    "\uffd0\001\002\000\004\030\145\001\002\000\030\005\075" +
    "\053\057\054\103\117\076\121\105\123\051\150\064\152" +
    "\061\153\060\154\042\155\021\001\002\000\016\050\uffce" +
    "\056\uffce\104\uffce\116\uffce\122\uffce\127\uffce\001\002\000" +
    "\020\054\103\117\076\150\064\152\061\153\060\154\042" +
    "\155\021\001\002\000\062\013\uffaf\044\uffaf\050\uffaf\051" +
    "\uffaf\053\uffaf\056\uffaf\071\uffaf\104\uffaf\113\uffaf\114\uffaf" +
    "\116\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\125\uffaf\127" +
    "\uffaf\130\uffaf\131\uffaf\132\uffaf\135\uffaf\140\uffaf\141\uffaf" +
    "\142\uffaf\001\002\000\030\005\075\053\057\054\103\117" +
    "\076\121\105\123\051\150\064\152\061\153\060\154\042" +
    "\155\021\001\002\000\030\005\uffc4\053\uffc4\054\uffc4\117" +
    "\uffc4\121\uffc4\123\uffc4\150\uffc4\152\uffc4\153\uffc4\154\uffc4" +
    "\155\uffc4\001\002\000\030\005\uffc1\053\uffc1\054\uffc1\117" +
    "\uffc1\121\uffc1\123\uffc1\150\uffc1\152\uffc1\153\uffc1\154\uffc1" +
    "\155\uffc1\001\002\000\030\005\uffc6\053\uffc6\054\uffc6\117" +
    "\uffc6\121\uffc6\123\uffc6\150\uffc6\152\uffc6\153\uffc6\154\uffc6" +
    "\155\uffc6\001\002\000\030\005\uffc5\053\uffc5\054\uffc5\117" +
    "\uffc5\121\uffc5\123\uffc5\150\uffc5\152\uffc5\153\uffc5\154\uffc5" +
    "\155\uffc5\001\002\000\030\005\uffc7\053\uffc7\054\uffc7\117" +
    "\uffc7\121\uffc7\123\uffc7\150\uffc7\152\uffc7\153\uffc7\154\uffc7" +
    "\155\uffc7\001\002\000\030\005\uffc2\053\uffc2\054\uffc2\117" +
    "\uffc2\121\uffc2\123\uffc2\150\uffc2\152\uffc2\153\uffc2\154\uffc2" +
    "\155\uffc2\001\002\000\030\005\075\053\057\054\103\117" +
    "\076\121\105\123\051\150\064\152\061\153\060\154\042" +
    "\155\021\001\002\000\004\044\163\001\002\000\030\005" +
    "\uffc3\053\uffc3\054\uffc3\117\uffc3\121\uffc3\123\uffc3\150\uffc3" +
    "\152\uffc3\153\uffc3\154\uffc3\155\uffc3\001\002\000\030\005" +
    "\uffc0\053\uffc0\054\uffc0\117\uffc0\121\uffc0\123\uffc0\150\uffc0" +
    "\152\uffc0\153\uffc0\154\uffc0\155\uffc0\001\002\000\022\013" +
    "\uffcc\050\uffcc\056\uffcc\104\uffcc\113\uffcc\116\uffcc\122\uffcc" +
    "\127\uffcc\001\002\000\022\013\uffcb\050\uffcb\056\uffcb\104" +
    "\uffcb\113\uffcb\116\uffcb\122\uffcb\127\uffcb\001\002\000\004" +
    "\135\167\001\002\000\030\005\075\053\057\054\103\117" +
    "\076\121\105\123\051\150\064\152\061\153\060\154\042" +
    "\155\021\001\002\000\022\013\uffca\050\uffca\056\uffca\104" +
    "\uffca\113\uffca\116\uffca\122\uffca\127\uffca\001\002\000\030" +
    "\005\uff5b\053\uff5b\054\uff5b\117\uff5b\121\uff5b\123\uff5b\150" +
    "\uff5b\152\uff5b\153\uff5b\154\uff5b\155\uff5b\001\002\000\030" +
    "\005\075\053\057\054\103\117\076\121\105\123\051\150" +
    "\064\152\061\153\060\154\042\155\021\001\002\000\016" +
    "\013\uffd6\050\uffd6\104\uffd6\116\uffd6\122\uffd6\127\uffd6\001" +
    "\002\000\062\013\uffb0\044\uffb0\050\uffb0\051\uffb0\053\uffb0" +
    "\056\uffb0\071\uffb0\104\uffb0\113\uffb0\114\uffb0\116\uffb0\120" +
    "\uffb0\121\uffb0\122\uffb0\123\uffb0\125\uffb0\127\uffb0\130\uffb0" +
    "\131\uffb0\132\uffb0\135\uffb0\140\uffb0\141\uffb0\142\uffb0\001" +
    "\002\000\030\005\075\053\057\054\103\117\076\121\105" +
    "\123\051\150\064\152\061\153\060\154\042\155\021\001" +
    "\002\000\016\050\uffd2\104\uffd2\113\uffd2\116\uffd2\122\uffd2" +
    "\127\uffd2\001\002\000\030\005\uff5b\053\uff5b\054\uff5b\117" +
    "\uff5b\121\uff5b\123\uff5b\150\uff5b\152\uff5b\153\uff5b\154\uff5b" +
    "\155\uff5b\001\002\000\030\005\075\053\057\054\103\117" +
    "\076\121\105\123\051\150\064\152\061\153\060\154\042" +
    "\155\021\001\002\000\016\050\uffd4\056\uffd4\104\uffd4\116" +
    "\uffd4\122\uffd4\127\uffd4\001\002\000\006\154\042\155\021" +
    "\001\002\000\034\003\077\005\075\053\057\054\103\116" +
    "\uff7d\117\076\121\105\123\051\150\064\152\061\153\060" +
    "\154\042\155\021\001\002\000\006\116\uff7b\122\uff7b\001" +
    "\002\000\006\116\uff7c\122\210\001\002\000\004\116\207" +
    "\001\002\000\064\013\uff66\044\uff66\050\uff66\051\uff66\053" +
    "\uff66\056\uff66\071\uff66\104\uff66\113\uff66\114\uff66\116\uff66" +
    "\120\uff66\121\uff66\122\uff66\123\uff66\125\uff66\127\uff66\130" +
    "\uff66\131\uff66\132\uff66\135\uff66\136\uff66\140\uff66\141\uff66" +
    "\142\uff66\001\002\000\032\003\077\005\075\053\057\054" +
    "\103\117\076\121\105\123\051\150\064\152\061\153\060" +
    "\154\042\155\021\001\002\000\006\116\uff7a\122\uff7a\001" +
    "\002\000\066\013\uffa6\044\uffa6\050\uffa6\051\uffa6\053\uffa6" +
    "\056\uffa6\071\uffa6\104\uffa6\113\uffa6\114\uffa6\116\uffa6\120" +
    "\uffa6\121\uffa6\122\uffa6\123\uffa6\125\uffa6\127\uffa6\130\uffa6" +
    "\131\uffa6\132\uffa6\135\uffa6\136\uffa6\137\uffa6\140\uffa6\141" +
    "\uffa6\142\uffa6\001\002\000\014\020\uffe3\037\uffe3\045\uffe3" +
    "\154\uffe3\155\uffe3\001\002\000\006\122\uffdf\126\uffdf\001" +
    "\002\000\004\154\222\001\002\000\020\020\uffe6\037\uffe6" +
    "\044\036\045\uffe6\060\035\154\uffe6\155\uffe6\001\002\000" +
    "\014\020\046\037\044\045\040\154\042\155\021\001\002" +
    "\000\010\116\uffe2\127\uffe2\137\047\001\002\000\006\116" +
    "\uffe9\127\uffe9\001\002\000\006\122\uffe0\126\uffe0\001\002" +
    "\000\024\002\ufff0\003\ufff0\016\ufff0\040\ufff0\046\ufff0\064" +
    "\ufff0\074\ufff0\105\ufff0\154\ufff0\001\002\000\006\003\027" +
    "\154\030\001\002\000\006\116\uffea\127\uffea\001\002\000" +
    "\014\020\046\037\044\045\040\154\042\155\021\001\002" +
    "\000\022\002\ufff6\003\ufff6\016\ufff6\040\ufff6\046\230\064" +
    "\ufff6\105\ufff6\154\ufff6\001\002\000\016\003\uff9e\016\uff9e" +
    "\040\uff9e\064\uff9e\105\uff9e\154\uff9e\001\002\000\024\002" +
    "\ufff2\003\ufff2\016\ufff2\040\ufff2\046\233\064\ufff2\105\ufff2" +
    "\117\025\154\ufff2\001\002\000\022\002\ufff1\003\ufff1\016" +
    "\ufff1\040\ufff1\046\235\064\ufff1\105\ufff1\154\ufff1\001\002" +
    "\000\016\003\uffa0\016\uffa0\040\uffa0\064\uffa0\105\uffa0\154" +
    "\uffa0\001\002\000\020\002\ufff7\003\ufff7\016\ufff7\040\ufff7" +
    "\064\ufff7\105\ufff7\154\ufff7\001\002\000\016\003\uff9f\016" +
    "\uff9f\040\uff9f\064\uff9f\105\uff9f\154\uff9f\001\002\000\016" +
    "\003\uff9b\016\uff9b\040\uff9b\064\uff9b\105\uff9b\154\uff9b\001" +
    "\002\000\016\003\374\016\uff9d\040\016\064\011\105\372" +
    "\154\u0100\001\002\000\004\016\241\001\002\000\034\003" +
    "\244\036\uff91\042\uff91\043\uff91\050\uff91\054\uff91\074\uff91" +
    "\111\uff91\144\uff91\146\uff91\147\uff91\154\uff91\155\uff91\001" +
    "\002\000\036\003\uff5b\032\363\036\uff5b\042\uff5b\043\uff5b" +
    "\050\uff5b\054\uff5b\074\uff5b\111\uff5b\144\uff5b\146\uff5b\147" +
    "\uff5b\154\uff5b\155\uff5b\001\002\000\032\036\270\042\251" +
    "\043\256\050\uff6f\054\271\074\254\111\250\144\261\146" +
    "\257\147\276\154\042\155\021\001\002\000\042\003\uff92" +
    "\030\uff92\031\uff92\032\uff92\036\uff92\042\uff92\043\uff92\050" +
    "\uff92\054\uff92\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92" +
    "\154\uff92\155\uff92\001\002\000\042\003\uff96\030\uff96\031" +
    "\uff96\032\uff96\036\uff96\042\uff96\043\uff96\050\uff96\054\uff96" +
    "\074\uff96\111\uff96\144\uff96\146\uff96\147\uff96\154\uff96\155" +
    "\uff96\001\002\000\010\117\203\124\202\137\360\001\002" +
    "\000\042\003\uff88\030\uff88\031\uff88\032\uff88\036\uff88\042" +
    "\uff88\043\uff88\050\uff88\054\uff88\074\uff88\111\uff88\144\uff88" +
    "\146\uff88\147\uff88\154\uff88\155\uff88\001\002\000\032\003" +
    "\077\005\075\053\057\054\103\117\076\121\105\123\051" +
    "\150\064\152\061\153\060\154\042\155\021\001\002\000" +
    "\006\154\042\155\021\001\002\000\004\050\350\001\002" +
    "\000\042\003\uff86\030\uff86\031\uff86\032\uff86\036\uff86\042" +
    "\uff86\043\uff86\050\uff86\054\uff86\074\uff86\111\uff86\144\uff86" +
    "\146\uff86\147\uff86\154\uff86\155\uff86\001\002\000\034\003" +
    "\077\005\075\053\057\054\103\117\076\121\105\123\051" +
    "\127\345\150\064\152\061\153\060\154\042\155\021\001" +
    "\002\000\042\003\uff8c\030\uff8c\031\uff8c\032\uff8c\036\uff8c" +
    "\042\uff8c\043\uff8c\050\uff8c\054\uff8c\074\uff8c\111\uff8c\144" +
    "\uff8c\146\uff8c\147\uff8c\154\uff8c\155\uff8c\001\002\000\032" +
    "\003\077\005\075\053\057\054\103\117\076\121\105\123" +
    "\051\150\064\152\061\153\060\154\042\155\021\001\002" +
    "\000\004\117\316\001\002\000\042\003\uff89\030\uff89\031" +
    "\uff89\032\uff89\036\uff89\042\uff89\043\uff89\050\uff89\054\uff89" +
    "\074\uff89\111\uff89\144\uff89\146\uff89\147\uff89\154\uff89\155" +
    "\uff89\001\002\000\004\154\314\001\002\000\004\127\313" +
    "\001\002\000\042\003\uff8b\030\uff8b\031\uff8b\032\uff8b\036" +
    "\uff8b\042\uff8b\043\uff8b\050\uff8b\054\uff8b\074\uff8b\111\uff8b" +
    "\144\uff8b\146\uff8b\147\uff8b\154\uff8b\155\uff8b\001\002\000" +
    "\042\003\uff87\030\uff87\031\uff87\032\uff87\036\uff87\042\uff87" +
    "\043\uff87\050\uff87\054\uff87\074\uff87\111\uff87\144\uff87\146" +
    "\uff87\147\uff87\154\uff87\155\uff87\001\002\000\042\003\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\036\uff8d\042\uff8d\043\uff8d\050" +
    "\uff8d\054\uff8d\074\uff8d\111\uff8d\144\uff8d\146\uff8d\147\uff8d" +
    "\154\uff8d\155\uff8d\001\002\000\032\036\uff90\042\uff90\043" +
    "\uff90\050\uff90\054\uff90\074\uff90\111\uff90\144\uff90\146\uff90" +
    "\147\uff90\154\uff90\155\uff90\001\002\000\042\003\uff93\030" +
    "\uff93\031\uff93\032\uff93\036\uff93\042\uff93\043\uff93\050\uff93" +
    "\054\uff93\074\uff93\111\uff93\144\uff93\146\uff93\147\uff93\154" +
    "\uff93\155\uff93\001\002\000\006\154\042\155\021\001\002" +
    "\000\004\127\307\001\002\000\004\137\304\001\002\000" +
    "\042\003\uff8e\030\uff8e\031\uff8e\032\uff8e\036\uff8e\042\uff8e" +
    "\043\uff8e\050\uff8e\054\uff8e\074\uff8e\111\uff8e\144\uff8e\146" +
    "\uff8e\147\uff8e\154\uff8e\155\uff8e\001\002\000\042\003\uff94" +
    "\030\uff94\031\uff94\032\uff94\036\uff94\042\uff94\043\uff94\050" +
    "\uff94\054\uff94\074\uff94\111\uff94\144\uff94\146\uff94\147\uff94" +
    "\154\uff94\155\uff94\001\002\000\042\003\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\036\uff8a\042\uff8a\043\uff8a\050\uff8a\054\uff8a" +
    "\074\uff8a\111\uff8a\144\uff8a\146\uff8a\147\uff8a\154\uff8a\155" +
    "\uff8a\001\002\000\004\117\300\001\002\000\042\003\uff85" +
    "\030\uff85\031\uff85\032\uff85\036\uff85\042\uff85\043\uff85\050" +
    "\uff85\054\uff85\074\uff85\111\uff85\144\uff85\146\uff85\147\uff85" +
    "\154\uff85\155\uff85\001\002\000\034\003\077\005\075\053" +
    "\057\054\103\116\uff7d\117\076\121\105\123\051\150\064" +
    "\152\061\153\060\154\042\155\021\001\002\000\004\116" +
    "\302\001\002\000\004\127\303\001\002\000\042\003\uff7e" +
    "\030\uff7e\031\uff7e\032\uff7e\036\uff7e\042\uff7e\043\uff7e\050" +
    "\uff7e\054\uff7e\074\uff7e\111\uff7e\144\uff7e\146\uff7e\147\uff7e" +
    "\154\uff7e\155\uff7e\001\002\000\032\003\077\005\075\053" +
    "\057\054\103\117\076\121\105\123\051\150\064\152\061" +
    "\153\060\154\042\155\021\001\002\000\004\127\306\001" +
    "\002\000\042\003\uff81\030\uff81\031\uff81\032\uff81\036\uff81" +
    "\042\uff81\043\uff81\050\uff81\054\uff81\074\uff81\111\uff81\144" +
    "\uff81\146\uff81\147\uff81\154\uff81\155\uff81\001\002\000\042" +
    "\003\uff83\030\uff83\031\uff83\032\uff83\036\uff83\042\uff83\043" +
    "\uff83\050\uff83\054\uff83\074\uff83\111\uff83\144\uff83\146\uff83" +
    "\147\uff83\154\uff83\155\uff83\001\002\000\004\044\311\001" +
    "\002\000\030\005\075\053\057\054\103\117\076\121\105" +
    "\123\051\150\064\152\061\153\060\154\042\155\021\001" +
    "\002\000\004\050\uff6e\001\002\000\042\003\uff84\030\uff84" +
    "\031\uff84\032\uff84\036\uff84\042\uff84\043\uff84\050\uff84\054" +
    "\uff84\074\uff84\111\uff84\144\uff84\146\uff84\147\uff84\154\uff84" +
    "\155\uff84\001\002\000\004\143\315\001\002\000\032\036" +
    "\uff8f\042\uff8f\043\uff8f\050\uff8f\054\uff8f\074\uff8f\111\uff8f" +
    "\144\uff8f\146\uff8f\147\uff8f\154\uff8f\155\uff8f\001\002\000" +
    "\034\003\077\005\075\053\057\054\103\116\uff7d\117\076" +
    "\121\105\123\051\150\064\152\061\153\060\154\042\155" +
    "\021\001\002\000\004\116\320\001\002\000\004\127\321" +
    "\001\002\000\042\003\uff7f\030\uff7f\031\uff7f\032\uff7f\036" +
    "\uff7f\042\uff7f\043\uff7f\050\uff7f\054\uff7f\074\uff7f\111\uff7f" +
    "\144\uff7f\146\uff7f\147\uff7f\154\uff7f\155\uff7f\001\002\000" +
    "\006\050\uff72\104\uff72\001\002\000\004\104\324\001\002" +
    "\000\034\003\uff5b\036\uff5b\042\uff5b\043\uff5b\050\uff5b\054" +
    "\uff5b\074\uff5b\111\uff5b\144\uff5b\146\uff5b\147\uff5b\154\uff5b" +
    "\155\uff5b\001\002\000\034\003\244\036\uff91\042\uff91\043" +
    "\uff91\050\uff91\054\uff91\074\uff91\111\uff91\144\uff91\146\uff91" +
    "\147\uff91\154\uff91\155\uff91\001\002\000\042\003\uff5b\030" +
    "\uff76\031\uff76\032\uff76\036\uff5b\042\uff5b\043\uff5b\050\uff5b" +
    "\054\uff5b\074\uff5b\111\uff5b\144\uff5b\146\uff5b\147\uff5b\154" +
    "\uff5b\155\uff5b\001\002\000\010\030\332\031\333\032\uff74" +
    "\001\002\000\034\003\244\036\uff91\042\uff91\043\uff91\050" +
    "\uff91\054\uff91\074\uff91\111\uff91\144\uff91\146\uff91\147\uff91" +
    "\154\uff91\155\uff91\001\002\000\042\003\uff95\030\uff95\031" +
    "\uff95\032\uff95\036\uff95\042\uff95\043\uff95\050\uff95\054\uff95" +
    "\074\uff95\111\uff95\144\uff95\146\uff95\147\uff95\154\uff95\155" +
    "\uff95\001\002\000\034\003\244\036\uff91\042\uff91\043\uff91" +
    "\050\uff91\054\uff91\074\uff91\111\uff91\144\uff91\146\uff91\147" +
    "\uff91\154\uff91\155\uff91\001\002\000\032\003\077\005\075" +
    "\053\057\054\103\117\076\121\105\123\051\150\064\152" +
    "\061\153\060\154\042\155\021\001\002\000\004\032\335" +
    "\001\002\000\004\043\336\001\002\000\004\127\337\001" +
    "\002\000\042\003\uff77\030\uff77\031\uff77\032\uff77\036\uff77" +
    "\042\uff77\043\uff77\050\uff77\054\uff77\074\uff77\111\uff77\144" +
    "\uff77\146\uff77\147\uff77\154\uff77\155\uff77\001\002\000\004" +
    "\104\341\001\002\000\034\003\244\036\uff91\042\uff91\043" +
    "\uff91\050\uff91\054\uff91\074\uff91\111\uff91\144\uff91\146\uff91" +
    "\147\uff91\154\uff91\155\uff91\001\002\000\042\003\uff5b\030" +
    "\uff75\031\uff75\032\uff75\036\uff5b\042\uff5b\043\uff5b\050\uff5b" +
    "\054\uff5b\074\uff5b\111\uff5b\144\uff5b\146\uff5b\147\uff5b\154" +
    "\uff5b\155\uff5b\001\002\000\036\003\uff5b\032\uff73\036\uff5b" +
    "\042\uff5b\043\uff5b\050\uff5b\054\uff5b\074\uff5b\111\uff5b\144" +
    "\uff5b\146\uff5b\147\uff5b\154\uff5b\155\uff5b\001\002\000\004" +
    "\127\346\001\002\000\042\003\uff78\030\uff78\031\uff78\032" +
    "\uff78\036\uff78\042\uff78\043\uff78\050\uff78\054\uff78\074\uff78" +
    "\111\uff78\144\uff78\146\uff78\147\uff78\154\uff78\155\uff78\001" +
    "\002\000\042\003\uff79\030\uff79\031\uff79\032\uff79\036\uff79" +
    "\042\uff79\043\uff79\050\uff79\054\uff79\074\uff79\111\uff79\144" +
    "\uff79\146\uff79\147\uff79\154\uff79\155\uff79\001\002\000\004" +
    "\127\354\001\002\000\034\003\244\036\uff91\042\uff91\043" +
    "\uff91\050\uff91\054\uff91\074\uff91\111\uff91\144\uff91\146\uff91" +
    "\147\uff91\154\uff91\155\uff91\001\002\000\036\003\uff5b\032" +
    "\352\036\uff5b\042\uff5b\043\uff5b\050\uff5b\054\uff5b\074\uff5b" +
    "\111\uff5b\144\uff5b\146\uff5b\147\uff5b\154\uff5b\155\uff5b\001" +
    "\002\000\004\050\353\001\002\000\004\127\uff70\001\002" +
    "\000\042\003\uff71\030\uff71\031\uff71\032\uff71\036\uff71\042" +
    "\uff71\043\uff71\050\uff71\054\uff71\074\uff71\111\uff71\144\uff71" +
    "\146\uff71\147\uff71\154\uff71\155\uff71\001\002\000\004\127" +
    "\356\001\002\000\042\003\uff80\030\uff80\031\uff80\032\uff80" +
    "\036\uff80\042\uff80\043\uff80\050\uff80\054\uff80\074\uff80\111" +
    "\uff80\144\uff80\146\uff80\147\uff80\154\uff80\155\uff80\001\002" +
    "\000\004\050\uff6d\001\002\000\032\003\077\005\075\053" +
    "\057\054\103\117\076\121\105\123\051\150\064\152\061" +
    "\153\060\154\042\155\021\001\002\000\004\127\362\001" +
    "\002\000\042\003\uff82\030\uff82\031\uff82\032\uff82\036\uff82" +
    "\042\uff82\043\uff82\050\uff82\054\uff82\074\uff82\111\uff82\144" +
    "\uff82\146\uff82\147\uff82\154\uff82\155\uff82\001\002\000\010" +
    "\127\uff6c\154\017\155\021\001\002\000\004\127\366\001" +
    "\002\000\004\127\uff6b\001\002\000\012\002\uffa1\016\uffa1" +
    "\040\uffa1\064\uffa1\001\002\000\016\003\uff69\016\uff69\040" +
    "\uff69\064\uff69\105\uff69\154\uff69\001\002\000\010\016\uff97" +
    "\040\uff97\064\uff97\001\002\000\016\003\uff68\016\uff68\040" +
    "\uff68\064\uff68\105\uff68\154\uff68\001\002\000\004\154\u0117" +
    "\001\002\000\016\003\uff9a\016\uff9a\040\uff9a\064\uff9a\105" +
    "\uff9a\154\uff9a\001\002\000\016\003\uff67\016\uff67\040\uff67" +
    "\064\uff67\105\uff67\154\uff67\001\002\000\006\122\033\126" +
    "\u0113\001\002\000\010\016\uff99\040\uff99\064\uff99\001\002" +
    "\000\016\003\uff6a\016\uff6a\040\uff6a\064\uff6a\105\uff6a\154" +
    "\uff6a\001\002\000\006\122\215\126\u0101\001\002\000\016" +
    "\020\046\022\u0102\037\044\045\040\154\042\155\021\001" +
    "\002\000\014\020\046\037\044\045\040\154\042\155\021" +
    "\001\002\000\006\127\uffe2\137\047\001\002\000\004\127" +
    "\u0105\001\002\000\020\003\uff5e\016\uff5e\032\uff5e\040\uff5e" +
    "\064\uff5e\105\uff5e\154\uff5e\001\002\000\006\127\uffe2\137" +
    "\047\001\002\000\004\127\u0108\001\002\000\020\003\uff5c" +
    "\016\uff5c\032\uff5c\040\uff5c\064\uff5c\105\uff5c\154\uff5c\001" +
    "\002\000\010\016\uff9c\040\u010c\064\u010b\001\002\000\010" +
    "\016\uff98\040\uff98\064\uff98\001\002\000\004\154\u0111\001" +
    "\002\000\006\154\017\155\021\001\002\000\006\074\ufff2" +
    "\117\025\001\002\000\004\074\u010f\001\002\000\014\020" +
    "\046\037\044\045\040\154\042\155\021\001\002\000\004" +
    "\046\230\001\002\000\006\046\233\117\025\001\002\000" +
    "\004\046\235\001\002\000\014\020\046\037\044\045\040" +
    "\154\042\155\021\001\002\000\006\127\uffe2\137\047\001" +
    "\002\000\004\127\u0116\001\002\000\020\003\uff5d\016\uff5d" +
    "\032\uff5d\040\uff5d\064\uff5d\105\uff5d\154\uff5d\001\002\000" +
    "\004\046\u0118\001\002\000\004\070\uff65\001\002\000\004" +
    "\070\u011b\001\002\000\004\127\u0123\001\002\000\010\032" +
    "\uff60\054\u011e\154\uff60\001\002\000\006\032\uff62\154\u0100" +
    "\001\002\000\004\032\u0120\001\002\000\004\127\u011f\001" +
    "\002\000\004\032\uff61\001\002\000\004\070\u0121\001\002" +
    "\000\004\127\uff63\001\002\000\006\032\uff5f\154\uff5f\001" +
    "\002\000\016\003\uff64\016\uff64\040\uff64\064\uff64\105\uff64" +
    "\154\uff64\001\002\000\010\002\ufffd\040\ufffd\064\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\006\002\004\124\003\001\001\000\016\003" +
    "\006\004\013\005\011\006\014\014\012\051\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\u0123\005" +
    "\011\006\014\014\012\051\007\001\001\000\004\125\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\021" +
    "\031\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\023\024\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\025\026\031\032" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\044\022\040\031\042\001\001\000" +
    "\002\001\001\000\004\030\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\007\055\010\065\012\077\013\051" +
    "\016\061\017\052\020\054\021\067\031\042\033\053\035" +
    "\071\037\070\040\062\041\066\042\101\044\064\047\072" +
    "\050\073\120\100\121\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\173\012\077\013\051\031\042\040\062\050\073" +
    "\120\100\121\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\157\046\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\136\001\001\000\030\010\065\012\077\013\051\031" +
    "\042\033\124\035\071\037\070\040\062\050\073\120\100" +
    "\121\103\001\001\000\002\001\001\000\022\010\123\012" +
    "\077\013\051\031\042\040\062\050\073\120\100\121\103" +
    "\001\001\000\052\007\121\010\065\012\077\013\051\016" +
    "\061\017\052\020\054\021\067\031\042\033\053\035\071" +
    "\037\070\040\062\041\066\042\101\044\064\047\072\050" +
    "\073\120\100\121\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\122\116" +
    "\001\001\000\004\122\112\001\001\000\036\010\065\012" +
    "\077\013\051\031\042\033\053\035\071\037\070\040\062" +
    "\042\110\044\064\047\072\050\073\120\100\121\103\001" +
    "\001\000\002\001\001\000\036\010\065\012\077\013\051" +
    "\031\042\033\053\035\071\037\070\040\062\042\114\044" +
    "\064\047\072\050\073\120\100\121\103\001\001\000\036" +
    "\010\065\012\077\013\051\031\042\033\053\035\071\037" +
    "\070\040\062\042\113\044\064\047\072\050\073\120\100" +
    "\121\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\065\012\077\013\051\031\042\033\053\035\071" +
    "\037\070\040\062\042\120\044\064\047\072\050\073\120" +
    "\100\121\103\001\001\000\036\010\065\012\077\013\051" +
    "\031\042\033\053\035\071\037\070\040\062\042\117\044" +
    "\064\047\072\050\073\120\100\121\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\065\012\077\013" +
    "\051\031\042\035\131\037\070\040\062\050\073\120\100" +
    "\121\103\001\001\000\002\001\001\000\004\036\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\065\012\077\013\051\031" +
    "\042\037\137\040\062\050\073\120\100\121\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\065\012" +
    "\077\013\051\031\042\033\053\035\071\037\070\040\062" +
    "\042\142\044\064\047\072\050\073\120\100\121\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\065" +
    "\012\077\013\051\031\042\033\053\035\071\037\070\040" +
    "\062\042\145\044\064\047\072\050\073\120\100\121\103" +
    "\001\001\000\002\001\001\000\022\010\147\012\077\013" +
    "\051\031\042\040\062\050\073\120\100\121\103\001\001" +
    "\000\002\001\001\000\036\010\065\012\077\013\051\031" +
    "\042\033\053\035\071\037\070\040\062\043\164\044\165" +
    "\047\072\050\073\120\100\121\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\065\012" +
    "\077\013\051\031\042\033\053\035\071\037\070\040\062" +
    "\044\163\047\072\050\073\120\100\121\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\010" +
    "\065\012\077\013\051\031\042\033\053\035\071\037\070" +
    "\040\062\044\167\047\072\050\073\120\100\121\103\001" +
    "\001\000\002\001\001\000\004\122\171\001\001\000\036" +
    "\010\065\012\077\013\051\031\042\033\053\035\071\037" +
    "\070\040\062\042\172\044\064\047\072\050\073\120\100" +
    "\121\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\065\012\077\013\051\031\042\033\053\035\071" +
    "\037\070\040\062\042\175\044\064\047\072\050\073\120" +
    "\100\121\103\001\001\000\002\001\001\000\004\122\177" +
    "\001\001\000\036\010\065\012\077\013\051\031\042\033" +
    "\053\035\071\037\070\040\062\042\200\044\064\047\072" +
    "\050\073\120\100\121\103\001\001\000\002\001\001\000" +
    "\006\013\211\031\042\001\001\000\056\007\203\010\065" +
    "\012\077\013\051\016\061\017\052\020\054\021\067\031" +
    "\042\033\053\035\071\037\070\040\062\041\066\042\101" +
    "\044\064\047\072\050\073\106\205\107\204\120\100\121" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\007\210\010\065\012" +
    "\077\013\051\016\061\017\052\020\054\021\067\031\042" +
    "\033\053\035\071\037\070\040\062\041\066\042\101\044" +
    "\064\047\072\050\073\120\100\121\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\216\001\001\000\010" +
    "\013\044\022\217\031\042\001\001\000\004\030\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\224\032\030\001\001\000\002\001\001\000" +
    "\010\013\044\022\226\031\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\233\024\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\237\055\236\001\001\000\024\005" +
    "\376\006\367\014\012\032\374\051\007\056\372\057\375" +
    "\112\366\116\370\001\001\000\002\001\001\000\010\053" +
    "\241\060\244\061\242\001\001\000\004\122\327\001\001" +
    "\000\046\013\245\031\042\050\261\062\273\063\266\064" +
    "\265\065\272\066\264\067\254\070\262\071\274\072\252" +
    "\073\276\103\251\110\246\111\263\117\257\121\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\007\321\010\065\012\077\013" +
    "\051\016\061\017\052\020\054\021\067\031\042\033\053" +
    "\035\071\037\070\040\062\041\066\042\101\044\064\047" +
    "\072\050\073\074\356\120\100\121\103\001\001\000\006" +
    "\013\354\031\042\001\001\000\004\076\346\001\001\000" +
    "\002\001\001\000\052\007\343\010\065\012\077\013\051" +
    "\016\061\017\052\020\054\021\067\031\042\033\053\035" +
    "\071\037\070\040\062\041\066\042\101\044\064\047\072" +
    "\050\073\120\100\121\103\001\001\000\002\001\001\000" +
    "\054\007\321\010\065\012\077\013\051\016\061\017\052" +
    "\020\054\021\067\031\042\033\053\035\071\037\070\040" +
    "\062\041\066\042\101\044\064\047\072\050\073\074\322" +
    "\120\100\121\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\307\031\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\203\010\065\012\077\013\051\016\061\017" +
    "\052\020\054\021\067\031\042\033\053\035\071\037\070" +
    "\040\062\041\066\042\101\044\064\047\072\050\073\106" +
    "\300\107\204\120\100\121\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\007\304\010" +
    "\065\012\077\013\051\016\061\017\052\020\054\021\067" +
    "\031\042\033\053\035\071\037\070\040\062\041\066\042" +
    "\101\044\064\047\072\050\073\120\100\121\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\010\065\012\077\013\051\031\042" +
    "\033\053\035\071\037\070\040\062\043\311\044\165\047" +
    "\072\050\073\120\100\121\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\007\203\010\065\012\077\013\051\016\061\017\052" +
    "\020\054\021\067\031\042\033\053\035\071\037\070\040" +
    "\062\041\066\042\101\044\064\047\072\050\073\106\316" +
    "\107\204\120\100\121\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\324\001\001\000\010\053\325\060" +
    "\244\061\242\001\001\000\006\102\326\122\327\001\001" +
    "\000\004\075\333\001\001\000\006\060\330\061\242\001" +
    "\001\000\002\001\001\000\010\053\342\060\244\061\242" +
    "\001\001\000\054\007\321\010\065\012\077\013\051\016" +
    "\061\017\052\020\054\021\067\031\042\033\053\035\071" +
    "\037\070\040\062\041\066\042\101\044\064\047\072\050" +
    "\073\074\337\120\100\121\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\341\060\244\061\242\001\001" +
    "\000\004\122\327\001\001\000\004\122\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\350\060\244\061\242\001\001\000" +
    "\004\122\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\007\360\010\065\012\077\013\051" +
    "\016\061\017\052\020\054\021\067\031\042\033\053\035" +
    "\071\037\070\040\062\041\066\042\101\044\064\047\072" +
    "\050\073\120\100\121\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\364\031\017\054\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\u0108\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\044\022\u0102\031\042\001\001\000" +
    "\010\013\044\022\u0105\031\042\001\001\000\004\030\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\367\051\007\057\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u010c\031\017\001\001\000\006" +
    "\015\u010d\024\022\001\001\000\002\001\001\000\010\013" +
    "\044\022\u010f\031\042\001\001\000\002\001\001\000\004" +
    "\024\u0111\001\001\000\002\001\001\000\010\013\044\022" +
    "\u0113\031\042\001\001\000\004\030\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\126" +
    "\u0118\001\001\000\004\113\u0119\001\001\000\002\001\001" +
    "\000\006\114\u011c\115\u011b\001\001\000\006\032\374\116" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Generator$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Generator$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Generator$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    action_obj.filename = nf;

    }


    String nf;
    public void setNombreArchivo(String f){
        nf = f;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Generator$actions {


    public String filename;
    GeneradorASM gen = new GeneradorASM();
    GeneradorIntermedio genInt = new GeneradorIntermedio();

    public Stack<TablaSimbolos> env = new Stack<TablaSimbolos>();
    public Stack<Integer> pila = new Stack<Integer>();
    public int desplazamiento = 0;
    public TablaSimbolos superior = new TablaSimbolos(null);




  private final Generator parser;

  /** Constructor */
  CUP$Generator$actions(Generator parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Generator$do_action(
    int                        CUP$Generator$act_num,
    java_cup.runtime.lr_parser CUP$Generator$parser,
    java.util.Stack            CUP$Generator$stack,
    int                        CUP$Generator$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Generator$result;

      /* select the action based on the action number */
      switch (CUP$Generator$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // N ::= 
            {
              Object RESULT =null;
		
                                       Resultado res = new Resultado();
                                       res.siglista = genInt.crearLista(genInt.siginstr());
                                       genInt.generarGoto("-");
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("N",81, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // M ::= 
            {
              Object RESULT =null;
		 RESULT = new Integer(genInt.siginstr()); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("M",80, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declaracion_componente ::= IDENTIFICADOR DOS_PUNTOS CONSTANT indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-5)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_componente",76, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaracion_componente ::= lista_identificador2 DOS_PUNTOS indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int li2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).right;
		Object li2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-4)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_componente",76, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaracion_componente ::= IDENTIFICADOR DOS_PUNTOS indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-4)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		
                                        Tipo tipo = (Tipo)(ist);
                                        Simbolo sim = new Simbolo(id, tipo, desplazamiento);
                                        superior.put(id, sim);
                                        desplazamiento += tipo.anchura;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_componente",76, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // lista_declaracion_componentes0 ::= lista_declaracion_componentes0 declaracion_componente 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_declaracion_componentes0",75, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // lista_declaracion_componentes0 ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_declaracion_componentes0",75, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_componentes ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_componentes",74, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lista_componentes ::= lista_declaracion_componentes0 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_componentes",74, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // definicion_record ::= RECORD lista_componentes END RECORD 
            {
              Object RESULT =null;
		 DefinicionRecord tipo = new DefinicionRecord(superior); tipo.anchura = desplazamiento;
                                       superior = env.pop(); desplazamiento = pila.pop();
                                       RESULT = tipo;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("definicion_record",73, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaracion_record ::= TYPE IDENTIFICADOR IS NT$2 definicion_record PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-4)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		
                                        superior.put(id, new Simbolo(id, (Tipo)dr, -1));
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_record",72, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

                                        env.push(superior); superior = new TablaSimbolos(null);
                                        pila.push(new Integer(desplazamiento)); desplazamiento = 0;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // llamada_funcion ::= nombre PAR_IZQ lista_expresiones_variante PAR_DER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int lnvleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int lnvright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object lnv = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaracion ::= error 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declaracion ::= declaracion_componente 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // declaracion ::= declaracion_record 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // declaracion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // designador_variante ::= designador 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("designador_variante",42, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // designador_variante ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("designador_variante",42, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // iteracion_clausula_variante ::= WHILE condicion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",65, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // iteracion_clausula_variante ::= FOR nombre IN rango 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",65, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // iteracion_clausula_variante ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",65, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // loop_basico ::= LOOP secuencia_de_sentencias END LOOP 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("loop_basico",60, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia_loop ::= iteracion_clausula_variante loop_basico PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int icvleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int icvright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object icv = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_loop",57, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condicion ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		RESULT = e;
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("condicion",58, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // else_variante ::= ELSE secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("else_variante",59, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // else_variante ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("else_variante",59, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_elsif0 ::= lista_elsif0 ELSIF condicion THEN secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_elsif0",64, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lista_elsif0 ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_elsif0",64, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_if ::= IF condicion THEN M secuencia_de_sentencias lista_elsif0 else_variante END IF PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-8)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-6)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-5)).value;
		
                                        genInt.backpatch(((Resultado)c).listatrue, ((Integer)m).intValue());
                                        Resultado res = new Resultado();
                                        res.siglista = genInt.combinar(((Resultado)c).listafalse, ((Resultado)c).siglista);
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_if",56, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-9)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_retorno ::= RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",54, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_retorno ::= RETURN expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",54, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_expresiones",69, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_expresiones",69, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lista_expresiones_variante ::= lista_expresiones 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",68, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_expresiones_variante ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",68, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_get ::= GET PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_get",71, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_put ::= PUT PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_put",70, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_goto ::= GOTO nombre PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_goto",55, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_asignacion ::= literal_record ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int lrleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int lrright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object lr = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",52, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_asignacion ::= nombre ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		
                                        Simbolo sim = (Simbolo)n;
                                        RESULT = genInt.generarAsignacion(sim.id, (String)e);
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",52, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_nula ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_nula",51, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_llamada_funcion ::= llamada_funcion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_llamada_funcion",77, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_compuesta ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",49, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_compuesta ::= sentencia_if 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = si; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",49, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_simple ::= sentencia_get 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_simple ::= sentencia_put 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_simple ::= sentencia_llamada_funcion 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_simple ::= sentencia_goto 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_simple ::= sentencia_retorno 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_simple ::= sentencia_salida 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_simple ::= sentencia_asignacion 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_simple ::= sentencia_nula 
            {
              Object RESULT =null;
		 RESULT = new Resultado(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // etiqueta ::= ETIQUETA_IZQ IDENTIFICADOR ETIQUETA_DER 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("etiqueta",50, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_etiqueta ::= lista_etiqueta etiqueta 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",47, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_etiqueta ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",47, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia ::= lista_etiqueta sentencia_compuesta 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = sc; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia ::= lista_etiqueta sentencia_simple 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = ss; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // secuencia_de_sentencias ::= secuencia_de_sentencias M sentencia 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 
                                       genInt.backpatch(((Resultado)ss).siglista, ((Integer)m).intValue());
                                       Resultado res = new Resultado();
                                       res.siglista = ((Resultado)s).siglista;
                                       RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",41, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // secuencia_de_sentencias ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 
                                        RESULT = s;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",41, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_cuerpo0 ::= lista_cuerpo0 cuerpo 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",62, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_cuerpo0 ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",62, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_declarativa_item0 ::= lista_declarativa_item0 declaracion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",43, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_declarativa_item0 ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",43, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parte_declarativa ::= lista_declarativa_item0 cuerpo lista_cuerpo0 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("parte_declarativa",40, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parte_declarativa ::= lista_declarativa_item0 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("parte_declarativa",40, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // especific_subprograma_es ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo IS 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-4)).value;
		int pfvleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int pfvright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object pfv = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-5)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR parte_formal IS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR IS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_subprograma ::= especific_subprograma_es NT$1 parte_declarativa BEGIN secuencia_de_sentencias END designador_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-6)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-7)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-7)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-7)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		
                                        superior = env.pop();
                                        desplazamiento = pila.pop();
                                   
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("cuerpo_subprograma",4, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-7)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$1 ::= 
            {
              Object RESULT =null;
		int eseleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
 
                                         TablaSimbolos tablaNueva = new TablaSimbolos(superior);
                                         env.push(superior);
                                         pila.push(new Integer(desplazamiento));
                                         desplazamiento = 0;
                                         superior = tablaNueva;
                                      
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal_booleano ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		  Resultado res = new Resultado();
                                        if(bl){
                                            res.listatrue = genInt.crearLista(genInt.siginstr());
                                        }else{
                                            res.listafalse = genInt.crearLista(genInt.siginstr());
                                        }
                                        genInt.generarGoto("-");
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal_booleano",78, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal_numerico ::= REAL_LITERAL 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Float rl = (Float)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal_numerico",30, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal_numerico ::= ENTERO_LITERAL 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Integer el = (Integer)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = ((Integer)el).toString(); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal_numerico",30, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal_record ::= nombre PUNTO nombre 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal_record",79, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= literal_booleano 
            {
              Object RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= literal_numerico 
            {
              Object RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object ln = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = ln; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= NULL 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primario ::= literal_record 
            {
              Object RESULT =null;
		int lrleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int lrright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object lr = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primario ::= llamada_funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primario ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		 RESULT = e; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primario ::= literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = l; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primario ::= nombre 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = genInt.obtenerRegistroVariable(((Simbolo)n).id); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= primario EXPONENTE primario 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= NOT primario 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        Resultado res = new Resultado();
                                        res.listatrue = ((Resultado)p).listafalse;
                                        res.listafalse = ((Resultado)p).listatrue;
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= ABS primario 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= primario 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = p; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		  
                                        RESULT = genInt.generarOperacion((String)op, (String)t, (String)f);
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("termino",27, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = f; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("termino",27, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_terminos ::= lista_terminos operador_suma termino 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        RESULT = genInt.generarOperacion((String)op, (String)lt, (String)t);
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_terminos",25, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_terminos ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = t; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_terminos",25, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_multiplicacion ::= REM 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_suma ::= CONCATENAR 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_suma ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_suma ::= MAS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_unario ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = "menos"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_unario ::= MAS 
            {
              Object RESULT =null;
		 RESULT = "mas"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_membresia ::= NOT IN 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_membresia",36, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_membresia ::= IN 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_membresia",36, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_relacional ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_relacional ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_relacional ::= DISTINTO_DE 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_simple ::= operador_unario lista_terminos 
            {
              Object RESULT =null;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        RESULT = genInt.generarOperacion((String)ou, (String)lt, (String)lt);
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_simple ::= lista_terminos 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = lt; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rango ::= expresion_simple RANGO expresion_simple 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relacion ::= expresion_simple operador_membresia rango 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relacion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        Resultado res = new Resultado();
                                        res.listatrue = genInt.crearLista(genInt.siginstr());
                                        res.listafalse = genInt.crearLista(genInt.siginstr()+1);
                                        genInt.generarIf((String)op, (String)es1, (String)es2, "-");
                                        genInt.generarGoto("-");
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relacion ::= expresion_simple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = es; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_orelse ::= expresion_orelse OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_orelse",31, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_orelse ::= relacion OR ELSE relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_orelse",31, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_andthen ::= expresion_andthen AND THEN relacion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_andthen",15, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_andthen ::= relacion AND THEN relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_andthen",15, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_xor ::= expresion_xor XOR relacion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_xor",14, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_xor ::= relacion XOR relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_xor",14, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_or ::= expresion_or OR M relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        Resultado res =  new Resultado();
                                        genInt.backpatch(((Resultado)r1).listafalse, ((Integer)m).intValue());
                                        res.listafalse = ((Resultado)r2).listafalse;
                                        res.listatrue = genInt.combinar(((Resultado)r1).listatrue, ((Resultado)r2).listatrue);
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_or",13, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_or ::= relacion OR M relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        Resultado res =  new Resultado();
                                        genInt.backpatch(((Resultado)r1).listafalse, ((Integer)m).intValue());
                                        res.listafalse = ((Resultado)r2).listafalse;
                                        res.listatrue = genInt.combinar(((Resultado)r1).listatrue, ((Resultado)r2).listatrue);
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_or",13, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_and ::= expresion_and AND M relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        Resultado res =  new Resultado();
                                        genInt.backpatch(((Resultado)r1).listatrue, ((Integer)m).intValue());
                                        res.listatrue = ((Resultado)r2).listatrue;
                                        res.listafalse = genInt.combinar(((Resultado)r1).listafalse, ((Resultado)r2).listafalse);
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_and",12, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_and ::= relacion AND M relacion 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        Resultado res =  new Resultado();
                                        genInt.backpatch(((Resultado)r1).listatrue, ((Integer)m).intValue());
                                        res.listatrue = ((Resultado)r2).listatrue;
                                        res.listafalse = genInt.combinar(((Resultado)r1).listafalse, ((Resultado)r2).listafalse);
                                        RESULT = res;
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion_and",12, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-3)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= error 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion_orelse 
            {
              Object RESULT =null;
		int eoeleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eoeright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object eoe = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = eoe; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion_andthen 
            {
              Object RESULT =null;
		int eatleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eatright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object eat = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = eat; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion_xor 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = ex; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion_or 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = eo; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion_and 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = ea; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= relacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = r; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_identificador2 ::= lista_identificador2 COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int li2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object li2 = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_identificador2",24, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_identificador2 ::= IDENTIFICADOR COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_identificador2",24, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inicializacion_opcion ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = e; 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",22, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inicializacion_opcion ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",22, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // modo ::= IN OUT 
            {
              Object RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modo ::= OUT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modo ::= IN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modo ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_parametro ::= error 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_parametro ::= lista_identificador2 DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_parametro ::= IDENTIFICADOR DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_declaracion_parametro ::= lista_declaracion_parametro PUNTO_Y_COMA declaracion_parametro 
            {
              Object RESULT =null;
		int ldpleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).left;
		int ldpright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)).right;
		Object ldp = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",19, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaracion_parametro ::= declaracion_parametro 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",19, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // indicacion_subtipo ::= nombre 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = new TipoRecord((DefinicionRecord)(((Simbolo)n).tipo.copia())); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // indicacion_subtipo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = new TipoFloat(8); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // indicacion_subtipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = new TipoBoolean(4); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // indicacion_subtipo ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		 RESULT = new TipoInteger(4); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parte_formal ::= PAR_IZQ lista_declaracion_parametro PAR_DER 
            {
              Object RESULT =null;
		int ldpleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int ldpright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object ldp = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("parte_formal",18, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parte_formal_variante ::= parte_formal 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",11, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parte_formal_variante ::= 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",11, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operador_simbolo ::= CADENA_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("operador_simbolo",23, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // designador ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("designador",17, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // designador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("designador",17, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // especific_subprograma ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("especific_subprograma",10, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-4)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especific_subprograma ::= PROCEDURE IDENTIFICADOR parte_formal_variante 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("especific_subprograma",10, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-2)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_subprograma ::= especific_subprograma 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("declaracion_subprograma",3, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombre ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("nombre",9, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Generator$stack.peek()).value;
		
                                        RESULT = superior.get(id);
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("nombre",9, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unidad_compilacion ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unidad_compilacion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_compilacion ::= lista_compilacion unidad_compilacion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_compilacion ::= unidad_compilacion 
            {
              Object RESULT =null;

              CUP$Generator$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= NT$0 lista_compilacion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		
                                        genInt.escribirFlujo();
                                    
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("raiz",0, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Generando código intermedio..."); 
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          return CUP$Generator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Generator$stack.elementAt(CUP$Generator$top-1)).value;
		RESULT = start_val;
              CUP$Generator$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Generator$stack.elementAt(CUP$Generator$top-1)), ((java_cup.runtime.Symbol)CUP$Generator$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Generator$parser.done_parsing();
          return CUP$Generator$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

