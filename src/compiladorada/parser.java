
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 22 20:02:16 CST 2009
//----------------------------------------------------

package compiladorada;

import java.util.Stack;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 22 20:02:16 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\013\003\000\002\013\003\000\002\005\003\000" +
    "\002\014\005\000\002\014\007\000\002\023\003\000\002" +
    "\023\003\000\002\031\003\000\002\015\002\000\002\015" +
    "\003\000\002\024\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\025\003\000" +
    "\002\025\005\000\002\026\007\000\002\026\007\000\002" +
    "\027\002\000\002\027\003\000\002\027\003\000\002\027" +
    "\004\000\002\030\002\000\002\030\004\000\002\032\005" +
    "\000\002\032\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\016\005\000\002\016" +
    "\005\000\002\017\005\000\002\017\005\000\002\020\005" +
    "\000\002\020\005\000\002\021\006\000\002\021\006\000" +
    "\002\041\006\000\002\041\006\000\002\042\003\000\002" +
    "\042\005\000\002\042\005\000\002\043\005\000\002\044" +
    "\003\000\002\044\004\000\002\044\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\046\003\000\002" +
    "\046\004\000\002\047\003\000\002\047\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\033\003\000\002\033\005\000\002\035\003\000\002" +
    "\035\005\000\002\037\003\000\002\037\004\000\002\037" +
    "\004\000\002\037\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\005\000\002\011\004\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\040\003\000\002\040\003\000\002\117\003\000\002\120" +
    "\002\000\002\121\002\000\002\006\013\000\002\051\005" +
    "\000\002\051\006\000\002\051\010\000\002\052\003\000" +
    "\002\052\005\000\002\055\002\000\002\055\004\000\002" +
    "\100\002\000\002\100\004\000\002\057\003\000\002\053" +
    "\003\000\002\053\004\000\002\060\004\000\002\060\004" +
    "\000\002\060\003\000\002\061\002\000\002\061\004\000" +
    "\002\064\005\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\063\003" +
    "\000\002\063\003\000\002\116\004\000\002\065\004\000" +
    "\002\066\006\000\002\067\006\000\002\071\005\000\002" +
    "\107\007\000\002\110\007\000\002\101\002\000\002\101" +
    "\003\000\002\102\002\000\002\102\004\000\002\070\004" +
    "\000\002\070\005\000\002\122\002\000\002\123\002\000" +
    "\002\072\015\000\002\103\002\000\002\103\007\000\002" +
    "\075\002\000\002\075\004\000\002\074\003\000\002\073" +
    "\005\000\002\073\010\000\002\124\002\000\002\076\007" +
    "\000\002\104\002\000\002\104\006\000\002\104\007\000" +
    "\002\104\004\000\002\054\002\000\002\054\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\050\006\000\002\105\002\000\002\105\003" +
    "\000\002\106\003\000\002\106\005\000\002\111\007\000" +
    "\002\112\006\000\002\113\003\000\002\113\004\000\002" +
    "\114\002\000\002\114\004\000\002\115\007\000\002\115" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\006\040\013\064\010\001\002\000\010\002" +
    "\uffff\040\uffff\064\uffff\001\002\000\016\003\uff9c\016\uff9c" +
    "\040\uff9c\064\uff9c\105\uff9c\154\uff9c\001\002\000\010\002" +
    "\000\040\013\064\010\001\002\000\010\002\ufffc\040\ufffc" +
    "\064\ufffc\001\002\000\004\154\224\001\002\000\020\002" +
    "\ufff9\003\ufff9\016\ufff9\040\ufff9\064\ufff9\105\ufff9\154\ufff9" +
    "\001\002\000\004\002\223\001\002\000\006\154\015\155" +
    "\017\001\002\000\010\002\ufffd\040\ufffd\064\ufffd\001\002" +
    "\000\010\074\ufff6\117\ufff6\127\ufff6\001\002\000\010\074" +
    "\ufff5\117\ufff5\127\ufff5\001\002\000\114\002\ufff4\003\ufff4" +
    "\013\ufff4\016\ufff4\040\ufff4\044\ufff4\046\ufff4\050\ufff4\051" +
    "\ufff4\053\ufff4\056\ufff4\064\ufff4\071\ufff4\074\ufff4\104\ufff4" +
    "\105\ufff4\110\ufff4\113\ufff4\114\ufff4\116\ufff4\117\ufff4\120" +
    "\ufff4\121\ufff4\122\ufff4\123\ufff4\125\ufff4\127\ufff4\130\ufff4" +
    "\131\ufff4\132\ufff4\135\ufff4\136\ufff4\137\ufff4\140\ufff4\141" +
    "\ufff4\142\ufff4\154\ufff4\001\002\000\006\074\ufff3\117\023" +
    "\001\002\000\004\074\ufff2\001\002\000\004\074\220\001" +
    "\002\000\004\154\025\001\002\000\006\116\215\127\216" +
    "\001\002\000\006\122\207\126\210\001\002\000\006\122" +
    "\030\126\031\001\002\000\006\116\uffec\127\uffec\001\002" +
    "\000\004\154\206\001\002\000\020\020\uffe8\037\uffe8\044" +
    "\033\045\uffe8\060\032\154\uffe8\155\uffe8\001\002\000\014" +
    "\020\uffe6\037\uffe6\045\uffe6\154\uffe6\155\uffe6\001\002\000" +
    "\016\020\uffe7\037\uffe7\045\uffe7\060\205\154\uffe7\155\uffe7" +
    "\001\002\000\014\020\042\037\043\045\035\154\037\155" +
    "\017\001\002\000\030\002\ufff0\003\ufff0\016\ufff0\040\ufff0" +
    "\046\ufff0\064\ufff0\105\ufff0\116\ufff0\127\ufff0\137\ufff0\154" +
    "\ufff0\001\002\000\010\116\uffe4\127\uffe4\137\044\001\002" +
    "\000\112\002\ufffb\003\ufffb\013\ufffb\016\ufffb\040\ufffb\044" +
    "\ufffb\046\ufffb\050\ufffb\051\ufffb\053\ufffb\056\ufffb\064\ufffb" +
    "\071\ufffb\104\ufffb\105\ufffb\110\ufffb\113\ufffb\114\ufffb\116" +
    "\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\123\ufffb\125\ufffb" +
    "\127\ufffb\130\ufffb\131\ufffb\132\ufffb\135\ufffb\136\ufffb\137" +
    "\ufffb\140\ufffb\141\ufffb\142\ufffb\154\ufffb\001\002\000\112" +
    "\002\ufffa\003\ufffa\013\ufffa\016\ufffa\040\ufffa\044\ufffa\046" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\056\ufffa\064\ufffa\071\ufffa" +
    "\104\ufffa\105\ufffa\110\ufffa\113\ufffa\114\ufffa\116\ufffa\117" +
    "\ufffa\120\ufffa\121\ufffa\122\ufffa\123\ufffa\125\ufffa\127\ufffa" +
    "\130\ufffa\131\ufffa\132\ufffa\135\ufffa\136\ufffa\137\ufffa\140" +
    "\ufffa\141\ufffa\142\ufffa\154\ufffa\001\002\000\030\002\uffed" +
    "\003\uffed\016\uffed\040\uffed\046\uffed\064\uffed\105\uffed\116" +
    "\uffed\127\uffed\137\uffed\154\uffed\001\002\000\030\002\uffef" +
    "\003\uffef\016\uffef\040\uffef\046\uffef\064\uffef\105\uffef\116" +
    "\uffef\127\uffef\137\uffef\154\uffef\001\002\000\030\002\uffee" +
    "\003\uffee\016\uffee\040\uffee\046\uffee\064\uffee\105\uffee\116" +
    "\uffee\127\uffee\137\uffee\154\uffee\001\002\000\034\003\075" +
    "\005\073\052\101\053\054\054\102\117\074\121\103\123" +
    "\046\150\062\152\056\153\055\154\037\155\017\001\002" +
    "\000\006\116\uffe9\127\uffe9\001\002\000\026\005\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\117\uffbf\150\uffbf\152\uffbf\153\uffbf" +
    "\154\uffbf\155\uffbf\001\002\000\066\013\uffaf\044\uffaf\050" +
    "\uffaf\051\uffaf\053\uffaf\056\uffaf\071\uffaf\104\uffaf\113\uffaf" +
    "\114\uffaf\116\uffaf\117\176\120\uffaf\121\uffaf\122\uffaf\123" +
    "\uffaf\125\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf\135\uffaf" +
    "\136\uffaf\140\uffaf\141\uffaf\142\uffaf\001\002\000\016\050" +
    "\uffde\056\174\104\uffde\116\uffde\122\uffde\127\uffde\001\002" +
    "\000\052\013\uffcb\044\uffcb\050\uffcb\053\uffcb\056\uffcb\104" +
    "\uffcb\113\uffcb\114\127\116\uffcb\121\124\122\uffcb\123\126" +
    "\127\uffcb\130\uffcb\131\uffcb\132\uffcb\135\uffcb\140\uffcb\141" +
    "\uffcb\142\uffcb\001\002\000\016\050\uffdd\104\uffdd\113\172" +
    "\116\uffdd\122\uffdd\127\uffdd\001\002\000\006\116\uffe3\127" +
    "\uffe3\001\002\000\022\052\101\054\102\117\074\150\062" +
    "\152\056\153\055\154\037\155\017\001\002\000\064\013" +
    "\uffa5\044\uffa5\050\uffa5\051\uffa5\053\uffa5\056\uffa5\071\uffa5" +
    "\104\uffa5\113\uffa5\114\uffa5\116\uffa5\120\uffa5\121\uffa5\122" +
    "\uffa5\123\uffa5\125\uffa5\127\uffa5\130\uffa5\131\uffa5\132\uffa5" +
    "\135\uffa5\136\uffa5\140\uffa5\141\uffa5\142\uffa5\001\002\000" +
    "\064\013\uffa6\044\uffa6\050\uffa6\051\uffa6\053\uffa6\056\uffa6" +
    "\071\uffa6\104\uffa6\113\uffa6\114\uffa6\116\uffa6\120\uffa6\121" +
    "\uffa6\122\uffa6\123\uffa6\125\uffa6\127\uffa6\130\uffa6\131\uffa6" +
    "\132\uffa6\135\uffa6\136\uffa6\140\uffa6\141\uffa6\142\uffa6\001" +
    "\002\000\064\013\uffae\044\uffae\050\uffae\051\uffae\053\uffae" +
    "\056\uffae\071\uffae\104\uffae\113\uffae\114\uffae\116\uffae\120" +
    "\uffae\121\uffae\122\uffae\123\uffae\125\uffae\127\uffae\130\uffae" +
    "\131\uffae\132\uffae\135\uffae\136\uffae\140\uffae\141\uffae\142" +
    "\uffae\001\002\000\016\013\167\050\uffdf\104\uffdf\116\uffdf" +
    "\122\uffdf\127\uffdf\001\002\000\064\013\uffa9\044\uffa9\050" +
    "\uffa9\051\uffa9\053\uffa9\056\uffa9\071\uffa9\104\uffa9\113\uffa9" +
    "\114\uffa9\116\uffa9\120\uffa9\121\uffa9\122\uffa9\123\uffa9\125" +
    "\uffa9\127\uffa9\130\uffa9\131\uffa9\132\uffa9\135\uffa9\136\uffa9" +
    "\140\uffa9\141\uffa9\142\uffa9\001\002\000\064\013\uffa7\044" +
    "\uffa7\050\uffa7\051\uffa7\053\uffa7\056\uffa7\071\uffa7\104\uffa7" +
    "\113\uffa7\114\uffa7\116\uffa7\120\uffa7\121\uffa7\122\uffa7\123" +
    "\uffa7\125\uffa7\127\uffa7\130\uffa7\131\uffa7\132\uffa7\135\uffa7" +
    "\136\uffa7\140\uffa7\141\uffa7\142\uffa7\001\002\000\042\013" +
    "\uffcf\044\151\050\uffcf\053\157\056\uffcf\104\uffcf\113\uffcf" +
    "\116\uffcf\122\uffcf\127\uffcf\130\153\131\154\132\150\140" +
    "\152\141\160\142\155\001\002\000\064\013\uffb3\044\uffb3" +
    "\050\uffb3\051\uffb3\053\uffb3\056\uffb3\071\uffb3\104\uffb3\113" +
    "\uffb3\114\uffb3\116\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3" +
    "\125\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\135\uffb3\136" +
    "\145\140\uffb3\141\uffb3\142\uffb3\001\002\000\016\050\uffdb" +
    "\056\142\104\uffdb\116\uffdb\122\uffdb\127\uffdb\001\002\000" +
    "\062\013\uffb5\044\uffb5\050\uffb5\051\uffb5\053\uffb5\056\uffb5" +
    "\071\uffb5\104\uffb5\113\uffb5\114\uffb5\116\uffb5\120\uffb5\121" +
    "\uffb5\122\uffb5\123\uffb5\125\uffb5\127\uffb5\130\uffb5\131\uffb5" +
    "\132\uffb5\135\uffb5\140\uffb5\141\uffb5\142\uffb5\001\002\000" +
    "\016\013\137\050\uffdc\104\uffdc\116\uffdc\122\uffdc\127\uffdc" +
    "\001\002\000\062\013\uffb7\044\uffb7\050\uffb7\051\132\053" +
    "\uffb7\056\uffb7\071\134\104\uffb7\113\uffb7\114\uffb7\116\uffb7" +
    "\120\131\121\uffb7\122\uffb7\123\uffb7\125\133\127\uffb7\130" +
    "\uffb7\131\uffb7\132\uffb7\135\uffb7\140\uffb7\141\uffb7\142\uffb7" +
    "\001\002\000\044\013\uffc9\044\uffc9\050\uffc9\053\uffc9\056" +
    "\uffc9\104\uffc9\113\uffc9\116\uffc9\122\uffc9\127\uffc9\130\uffc9" +
    "\131\uffc9\132\uffc9\135\uffc9\140\uffc9\141\uffc9\142\uffc9\001" +
    "\002\000\026\005\073\052\101\053\054\054\102\117\074" +
    "\150\062\152\056\153\055\154\037\155\017\001\002\000" +
    "\022\052\101\054\102\117\074\150\062\152\056\153\055" +
    "\154\037\155\017\001\002\000\034\003\075\005\073\052" +
    "\101\053\054\054\102\117\074\121\103\123\046\150\062" +
    "\152\056\153\055\154\037\155\017\001\002\000\014\050" +
    "\uffda\104\uffda\116\uffda\122\uffda\127\uffda\001\002\000\064" +
    "\013\uffad\044\uffad\050\uffad\051\uffad\053\uffad\056\uffad\071" +
    "\uffad\104\uffad\113\uffad\114\uffad\116\uffad\120\uffad\121\uffad" +
    "\122\uffad\123\uffad\125\uffad\127\uffad\130\uffad\131\uffad\132" +
    "\uffad\135\uffad\136\uffad\140\uffad\141\uffad\142\uffad\001\002" +
    "\000\064\013\uffa8\044\uffa8\050\uffa8\051\uffa8\053\uffa8\056" +
    "\uffa8\071\uffa8\104\uffa8\113\uffa8\114\uffa8\116\uffa8\120\uffa8" +
    "\121\uffa8\122\uffa8\123\uffa8\125\uffa8\127\uffa8\130\uffa8\131" +
    "\uffa8\132\uffa8\135\uffa8\136\uffa8\140\uffa8\141\uffa8\142\uffa8" +
    "\001\002\000\022\013\105\050\uffe0\056\107\104\uffe0\113" +
    "\106\116\uffe0\122\uffe0\127\uffe0\001\002\000\006\154\037" +
    "\155\017\001\002\000\064\013\uffaa\044\uffaa\050\uffaa\051" +
    "\uffaa\053\uffaa\056\uffaa\071\uffaa\104\uffaa\113\uffaa\114\uffaa" +
    "\116\uffaa\120\uffaa\121\uffaa\122\uffaa\123\uffaa\125\uffaa\127" +
    "\uffaa\130\uffaa\131\uffaa\132\uffaa\135\uffaa\136\uffaa\140\uffaa" +
    "\141\uffaa\142\uffaa\001\002\000\026\005\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\117\uffc0\150\uffc0\152\uffc0\153\uffc0\154\uffc0" +
    "\155\uffc0\001\002\000\064\013\uffab\044\uffab\050\uffab\051" +
    "\uffab\053\uffab\056\uffab\071\uffab\104\uffab\113\uffab\114\uffab" +
    "\116\uffab\120\uffab\121\uffab\122\uffab\123\uffab\125\uffab\127" +
    "\uffab\130\uffab\131\uffab\132\uffab\135\uffab\136\uffab\140\uffab" +
    "\141\uffab\142\uffab\001\002\000\034\005\073\052\101\053" +
    "\054\054\102\104\114\117\074\121\103\123\046\150\062" +
    "\152\056\153\055\154\037\155\017\001\002\000\032\005" +
    "\073\052\101\053\054\054\102\117\074\121\103\123\046" +
    "\150\062\152\056\153\055\154\037\155\017\001\002\000" +
    "\034\005\073\030\110\052\101\053\054\054\102\117\074" +
    "\121\103\123\046\150\062\152\056\153\055\154\037\155" +
    "\017\001\002\000\032\005\073\052\101\053\054\054\102" +
    "\117\074\121\103\123\046\150\062\152\056\153\055\154" +
    "\037\155\017\001\002\000\016\050\uffd7\056\uffd7\104\uffd7" +
    "\116\uffd7\122\uffd7\127\uffd7\001\002\000\016\050\uffd1\056" +
    "\uffd1\104\uffd1\116\uffd1\122\uffd1\127\uffd1\001\002\000\016" +
    "\050\uffd5\104\uffd5\113\uffd5\116\uffd5\122\uffd5\127\uffd5\001" +
    "\002\000\032\005\073\052\101\053\054\054\102\117\074" +
    "\121\103\123\046\150\062\152\056\153\055\154\037\155" +
    "\017\001\002\000\016\013\uffd9\050\uffd9\104\uffd9\116\uffd9" +
    "\122\uffd9\127\uffd9\001\002\000\016\013\uffd3\050\uffd3\104" +
    "\uffd3\116\uffd3\122\uffd3\127\uffd3\001\002\000\004\116\120" +
    "\001\002\000\064\013\uffac\044\uffac\050\uffac\051\uffac\053" +
    "\uffac\056\uffac\071\uffac\104\uffac\113\uffac\114\uffac\116\uffac" +
    "\120\uffac\121\uffac\122\uffac\123\uffac\125\uffac\127\uffac\130" +
    "\uffac\131\uffac\132\uffac\135\uffac\136\uffac\140\uffac\141\uffac" +
    "\142\uffac\001\002\000\062\013\uffb2\044\uffb2\050\uffb2\051" +
    "\uffb2\053\uffb2\056\uffb2\071\uffb2\104\uffb2\113\uffb2\114\uffb2" +
    "\116\uffb2\120\uffb2\121\uffb2\122\uffb2\123\uffb2\125\uffb2\127" +
    "\uffb2\130\uffb2\131\uffb2\132\uffb2\135\uffb2\140\uffb2\141\uffb2" +
    "\142\uffb2\001\002\000\064\013\uffaf\044\uffaf\050\uffaf\051" +
    "\uffaf\053\uffaf\056\uffaf\071\uffaf\104\uffaf\113\uffaf\114\uffaf" +
    "\116\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\125\uffaf\127" +
    "\uffaf\130\uffaf\131\uffaf\132\uffaf\135\uffaf\136\uffaf\140\uffaf" +
    "\141\uffaf\142\uffaf\001\002\000\052\013\uffca\044\uffca\050" +
    "\uffca\053\uffca\056\uffca\104\uffca\113\uffca\114\127\116\uffca" +
    "\121\124\122\uffca\123\126\127\uffca\130\uffca\131\uffca\132" +
    "\uffca\135\uffca\140\uffca\141\uffca\142\uffca\001\002\000\026" +
    "\005\uffbe\052\uffbe\053\uffbe\054\uffbe\117\uffbe\150\uffbe\152" +
    "\uffbe\153\uffbe\154\uffbe\155\uffbe\001\002\000\026\005\073" +
    "\052\101\053\054\054\102\117\074\150\062\152\056\153" +
    "\055\154\037\155\017\001\002\000\026\005\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\117\uffbd\150\uffbd\152\uffbd\153\uffbd\154" +
    "\uffbd\155\uffbd\001\002\000\026\005\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\117\uffbc\150\uffbc\152\uffbc\153\uffbc\154\uffbc\155" +
    "\uffbc\001\002\000\062\013\uffb6\044\uffb6\050\uffb6\051\132" +
    "\053\uffb6\056\uffb6\071\134\104\uffb6\113\uffb6\114\uffb6\116" +
    "\uffb6\120\131\121\uffb6\122\uffb6\123\uffb6\125\133\127\uffb6" +
    "\130\uffb6\131\uffb6\132\uffb6\135\uffb6\140\uffb6\141\uffb6\142" +
    "\uffb6\001\002\000\026\005\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\117\uffbb\150\uffbb\152\uffbb\153\uffbb\154\uffbb\155\uffbb\001" +
    "\002\000\026\005\uffb9\052\uffb9\053\uffb9\054\uffb9\117\uffb9" +
    "\150\uffb9\152\uffb9\153\uffb9\154\uffb9\155\uffb9\001\002\000" +
    "\026\005\uffba\052\uffba\053\uffba\054\uffba\117\uffba\150\uffba" +
    "\152\uffba\153\uffba\154\uffba\155\uffba\001\002\000\026\005" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\117\uffb8\150\uffb8\152\uffb8" +
    "\153\uffb8\154\uffb8\155\uffb8\001\002\000\026\005\073\052" +
    "\101\053\054\054\102\117\074\150\062\152\056\153\055" +
    "\154\037\155\017\001\002\000\062\013\uffb4\044\uffb4\050" +
    "\uffb4\051\uffb4\053\uffb4\056\uffb4\071\uffb4\104\uffb4\113\uffb4" +
    "\114\uffb4\116\uffb4\120\uffb4\121\uffb4\122\uffb4\123\uffb4\125" +
    "\uffb4\127\uffb4\130\uffb4\131\uffb4\132\uffb4\135\uffb4\140\uffb4" +
    "\141\uffb4\142\uffb4\001\002\000\004\104\140\001\002\000" +
    "\032\005\073\052\101\053\054\054\102\117\074\121\103" +
    "\123\046\150\062\152\056\153\055\154\037\155\017\001" +
    "\002\000\016\013\uffd2\050\uffd2\104\uffd2\116\uffd2\122\uffd2" +
    "\127\uffd2\001\002\000\004\030\143\001\002\000\032\005" +
    "\073\052\101\053\054\054\102\117\074\121\103\123\046" +
    "\150\062\152\056\153\055\154\037\155\017\001\002\000" +
    "\016\050\uffd0\056\uffd0\104\uffd0\116\uffd0\122\uffd0\127\uffd0" +
    "\001\002\000\022\052\101\054\102\117\074\150\062\152" +
    "\056\153\055\154\037\155\017\001\002\000\062\013\uffb0" +
    "\044\uffb0\050\uffb0\051\uffb0\053\uffb0\056\uffb0\071\uffb0\104" +
    "\uffb0\113\uffb0\114\uffb0\116\uffb0\120\uffb0\121\uffb0\122\uffb0" +
    "\123\uffb0\125\uffb0\127\uffb0\130\uffb0\131\uffb0\132\uffb0\135" +
    "\uffb0\140\uffb0\141\uffb0\142\uffb0\001\002\000\032\005\073" +
    "\052\101\053\054\054\102\117\074\121\103\123\046\150" +
    "\062\152\056\153\055\154\037\155\017\001\002\000\032" +
    "\005\uffc5\052\uffc5\053\uffc5\054\uffc5\117\uffc5\121\uffc5\123" +
    "\uffc5\150\uffc5\152\uffc5\153\uffc5\154\uffc5\155\uffc5\001\002" +
    "\000\032\005\uffc2\052\uffc2\053\uffc2\054\uffc2\117\uffc2\121" +
    "\uffc2\123\uffc2\150\uffc2\152\uffc2\153\uffc2\154\uffc2\155\uffc2" +
    "\001\002\000\032\005\uffc7\052\uffc7\053\uffc7\054\uffc7\117" +
    "\uffc7\121\uffc7\123\uffc7\150\uffc7\152\uffc7\153\uffc7\154\uffc7" +
    "\155\uffc7\001\002\000\032\005\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\117\uffc6\121\uffc6\123\uffc6\150\uffc6\152\uffc6\153\uffc6" +
    "\154\uffc6\155\uffc6\001\002\000\032\005\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\117\uffc8\121\uffc8\123\uffc8\150\uffc8\152\uffc8" +
    "\153\uffc8\154\uffc8\155\uffc8\001\002\000\032\005\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\117\uffc3\121\uffc3\123\uffc3\150\uffc3" +
    "\152\uffc3\153\uffc3\154\uffc3\155\uffc3\001\002\000\032\005" +
    "\073\052\101\053\054\054\102\117\074\121\103\123\046" +
    "\150\062\152\056\153\055\154\037\155\017\001\002\000" +
    "\004\044\161\001\002\000\032\005\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\117\uffc4\121\uffc4\123\uffc4\150\uffc4\152\uffc4\153" +
    "\uffc4\154\uffc4\155\uffc4\001\002\000\032\005\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\117\uffc1\121\uffc1\123\uffc1\150\uffc1\152" +
    "\uffc1\153\uffc1\154\uffc1\155\uffc1\001\002\000\022\013\uffce" +
    "\050\uffce\056\uffce\104\uffce\113\uffce\116\uffce\122\uffce\127" +
    "\uffce\001\002\000\022\013\uffcd\050\uffcd\056\uffcd\104\uffcd" +
    "\113\uffcd\116\uffcd\122\uffcd\127\uffcd\001\002\000\004\135" +
    "\165\001\002\000\032\005\073\052\101\053\054\054\102" +
    "\117\074\121\103\123\046\150\062\152\056\153\055\154" +
    "\037\155\017\001\002\000\022\013\uffcc\050\uffcc\056\uffcc" +
    "\104\uffcc\113\uffcc\116\uffcc\122\uffcc\127\uffcc\001\002\000" +
    "\032\005\073\052\101\053\054\054\102\117\074\121\103" +
    "\123\046\150\062\152\056\153\055\154\037\155\017\001" +
    "\002\000\016\013\uffd8\050\uffd8\104\uffd8\116\uffd8\122\uffd8" +
    "\127\uffd8\001\002\000\062\013\uffb1\044\uffb1\050\uffb1\051" +
    "\uffb1\053\uffb1\056\uffb1\071\uffb1\104\uffb1\113\uffb1\114\uffb1" +
    "\116\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\125\uffb1\127" +
    "\uffb1\130\uffb1\131\uffb1\132\uffb1\135\uffb1\140\uffb1\141\uffb1" +
    "\142\uffb1\001\002\000\032\005\073\052\101\053\054\054" +
    "\102\117\074\121\103\123\046\150\062\152\056\153\055" +
    "\154\037\155\017\001\002\000\016\050\uffd4\104\uffd4\113" +
    "\uffd4\116\uffd4\122\uffd4\127\uffd4\001\002\000\032\005\073" +
    "\052\101\053\054\054\102\117\074\121\103\123\046\150" +
    "\062\152\056\153\055\154\037\155\017\001\002\000\016" +
    "\050\uffd6\056\uffd6\104\uffd6\116\uffd6\122\uffd6\127\uffd6\001" +
    "\002\000\036\003\075\005\073\052\101\053\054\054\102" +
    "\116\uff61\117\074\121\103\123\046\150\062\152\056\153" +
    "\055\154\037\155\017\001\002\000\006\116\uff5f\122\uff5f" +
    "\001\002\000\006\116\uff60\122\203\001\002\000\004\116" +
    "\202\001\002\000\044\013\uff62\044\uff62\050\uff62\053\uff62" +
    "\056\uff62\104\uff62\113\uff62\116\uff62\122\uff62\127\uff62\130" +
    "\uff62\131\uff62\132\uff62\135\uff62\140\uff62\141\uff62\142\uff62" +
    "\001\002\000\034\003\075\005\073\052\101\053\054\054" +
    "\102\117\074\121\103\123\046\150\062\152\056\153\055" +
    "\154\037\155\017\001\002\000\006\116\uff5e\122\uff5e\001" +
    "\002\000\014\020\uffe5\037\uffe5\045\uffe5\154\uffe5\155\uffe5" +
    "\001\002\000\006\122\uffe1\126\uffe1\001\002\000\004\154" +
    "\214\001\002\000\020\020\uffe8\037\uffe8\044\033\045\uffe8" +
    "\060\032\154\uffe8\155\uffe8\001\002\000\014\020\042\037" +
    "\043\045\035\154\037\155\017\001\002\000\010\116\uffe4" +
    "\127\uffe4\137\044\001\002\000\006\116\uffea\127\uffea\001" +
    "\002\000\006\122\uffe2\126\uffe2\001\002\000\024\002\ufff1" +
    "\003\ufff1\016\ufff1\040\ufff1\046\ufff1\064\ufff1\074\ufff1\105" +
    "\ufff1\154\ufff1\001\002\000\004\154\025\001\002\000\006" +
    "\116\uffeb\127\uffeb\001\002\000\014\020\042\037\043\045" +
    "\035\154\037\155\017\001\002\000\022\002\ufff7\003\ufff7" +
    "\016\ufff7\040\ufff7\046\222\064\ufff7\105\ufff7\154\ufff7\001" +
    "\002\000\016\003\uff9f\016\uff9f\040\uff9f\064\uff9f\105\uff9f" +
    "\154\uff9f\001\002\000\004\002\001\001\002\000\024\002" +
    "\ufff3\003\ufff3\016\ufff3\040\ufff3\046\226\064\ufff3\105\ufff3" +
    "\117\023\154\ufff3\001\002\000\022\002\ufff2\003\ufff2\016" +
    "\ufff2\040\ufff2\046\230\064\ufff2\105\ufff2\154\ufff2\001\002" +
    "\000\016\003\uffa1\016\uffa1\040\uffa1\064\uffa1\105\uffa1\154" +
    "\uffa1\001\002\000\020\002\ufff8\003\ufff8\016\ufff8\040\ufff8" +
    "\064\ufff8\105\ufff8\154\ufff8\001\002\000\016\003\uffa0\016" +
    "\uffa0\040\uffa0\064\uffa0\105\uffa0\154\uffa0\001\002\000\010" +
    "\002\ufffe\040\ufffe\064\ufffe\001\002\000\016\003\u0105\016" +
    "\uff9e\040\013\064\010\105\u0103\154\u0109\001\002\000\004" +
    "\016\234\001\002\000\036\003\uffa4\035\uffa4\036\uffa4\042" +
    "\uffa4\043\uffa4\050\uffa4\054\uffa4\074\uffa4\111\uffa4\144\uffa4" +
    "\146\uffa4\147\uffa4\154\uffa4\155\uffa4\001\002\000\036\003" +
    "\240\035\uff92\036\uff92\042\uff92\043\uff92\050\uff92\054\uff92" +
    "\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92\154\uff92\155" +
    "\uff92\001\002\000\040\003\240\032\373\035\uff92\036\uff92" +
    "\042\uff92\043\uff92\050\uff92\054\uff92\074\uff92\111\uff92\144" +
    "\uff92\146\uff92\147\uff92\154\uff92\155\uff92\001\002\000\034" +
    "\035\242\036\266\042\245\043\253\050\uff6c\054\267\074" +
    "\251\111\246\144\255\146\254\147\274\154\264\155\017" +
    "\001\002\000\044\003\uff93\030\uff93\031\uff93\032\uff93\035" +
    "\uff93\036\uff93\042\uff93\043\uff93\050\uff93\054\uff93\074\uff93" +
    "\111\uff93\144\uff93\146\uff93\147\uff93\154\uff93\155\uff93\001" +
    "\002\000\044\003\uff97\030\uff97\031\uff97\032\uff97\035\uff97" +
    "\036\uff97\042\uff97\043\uff97\050\uff97\054\uff97\074\uff97\111" +
    "\uff97\144\uff97\146\uff97\147\uff97\154\uff97\155\uff97\001\002" +
    "\000\012\110\uff7e\127\uff7e\154\037\155\017\001\002\000" +
    "\006\117\176\137\362\001\002\000\044\003\uff89\030\uff89" +
    "\031\uff89\032\uff89\035\uff89\036\uff89\042\uff89\043\uff89\050" +
    "\uff89\054\uff89\074\uff89\111\uff89\144\uff89\146\uff89\147\uff89" +
    "\154\uff89\155\uff89\001\002\000\006\154\037\155\017\001" +
    "\002\000\034\003\075\005\073\052\101\053\054\054\102" +
    "\117\074\121\103\123\046\150\062\152\056\153\055\154" +
    "\037\155\017\001\002\000\004\050\312\001\002\000\044" +
    "\003\uff87\030\uff87\031\uff87\032\uff87\035\uff87\036\uff87\042" +
    "\uff87\043\uff87\050\uff87\054\uff87\074\uff87\111\uff87\144\uff87" +
    "\146\uff87\147\uff87\154\uff87\155\uff87\001\002\000\036\003" +
    "\075\005\073\052\101\053\054\054\102\117\074\121\103" +
    "\123\046\127\353\150\062\152\056\153\055\154\037\155" +
    "\017\001\002\000\044\003\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\035\uff8d\036\uff8d\042\uff8d\043\uff8d\050\uff8d\054\uff8d\074" +
    "\uff8d\111\uff8d\144\uff8d\146\uff8d\147\uff8d\154\uff8d\155\uff8d" +
    "\001\002\000\034\003\uff78\005\uff78\052\uff78\053\uff78\054" +
    "\uff78\117\uff78\121\uff78\123\uff78\150\uff78\152\uff78\153\uff78" +
    "\154\uff78\155\uff78\001\002\000\004\117\325\001\002\000" +
    "\004\154\323\001\002\000\044\003\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\035\uff8a\036\uff8a\042\uff8a\043\uff8a\050\uff8a\054" +
    "\uff8a\074\uff8a\111\uff8a\144\uff8a\146\uff8a\147\uff8a\154\uff8a" +
    "\155\uff8a\001\002\000\004\127\322\001\002\000\044\003" +
    "\uff88\030\uff88\031\uff88\032\uff88\035\uff88\036\uff88\042\uff88" +
    "\043\uff88\050\uff88\054\uff88\074\uff88\111\uff88\144\uff88\146" +
    "\uff88\147\uff88\154\uff88\155\uff88\001\002\000\044\003\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\035\uff8c\036\uff8c\042\uff8c\043" +
    "\uff8c\050\uff8c\054\uff8c\074\uff8c\111\uff8c\144\uff8c\146\uff8c" +
    "\147\uff8c\154\uff8c\155\uff8c\001\002\000\044\003\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\035\uff8e\036\uff8e\042\uff8e\043\uff8e" +
    "\050\uff8e\054\uff8e\074\uff8e\111\uff8e\144\uff8e\146\uff8e\147" +
    "\uff8e\154\uff8e\155\uff8e\001\002\000\034\035\uff91\036\uff91" +
    "\042\uff91\043\uff91\050\uff91\054\uff91\074\uff91\111\uff91\144" +
    "\uff91\146\uff91\147\uff91\154\uff91\155\uff91\001\002\000\010" +
    "\117\ufffb\126\307\137\ufffb\001\002\000\044\003\uff94\030" +
    "\uff94\031\uff94\032\uff94\035\uff94\036\uff94\042\uff94\043\uff94" +
    "\050\uff94\054\uff94\074\uff94\111\uff94\144\uff94\146\uff94\147" +
    "\uff94\154\uff94\155\uff94\001\002\000\004\154\302\001\002" +
    "\000\004\127\301\001\002\000\044\003\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\035\uff8f\036\uff8f\042\uff8f\043\uff8f\050\uff8f" +
    "\054\uff8f\074\uff8f\111\uff8f\144\uff8f\146\uff8f\147\uff8f\154" +
    "\uff8f\155\uff8f\001\002\000\044\003\uff95\030\uff95\031\uff95" +
    "\032\uff95\035\uff95\036\uff95\042\uff95\043\uff95\050\uff95\054" +
    "\uff95\074\uff95\111\uff95\144\uff95\146\uff95\147\uff95\154\uff95" +
    "\155\uff95\001\002\000\044\003\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\035\uff8b\036\uff8b\042\uff8b\043\uff8b\050\uff8b\054\uff8b" +
    "\074\uff8b\111\uff8b\144\uff8b\146\uff8b\147\uff8b\154\uff8b\155" +
    "\uff8b\001\002\000\044\003\uff86\030\uff86\031\uff86\032\uff86" +
    "\035\uff86\036\uff86\042\uff86\043\uff86\050\uff86\054\uff86\074" +
    "\uff86\111\uff86\144\uff86\146\uff86\147\uff86\154\uff86\155\uff86" +
    "\001\002\000\004\117\275\001\002\000\036\003\075\005" +
    "\073\052\101\053\054\054\102\116\uff61\117\074\121\103" +
    "\123\046\150\062\152\056\153\055\154\037\155\017\001" +
    "\002\000\004\116\277\001\002\000\004\127\300\001\002" +
    "\000\044\003\uff7f\030\uff7f\031\uff7f\032\uff7f\035\uff7f\036" +
    "\uff7f\042\uff7f\043\uff7f\050\uff7f\054\uff7f\074\uff7f\111\uff7f" +
    "\144\uff7f\146\uff7f\147\uff7f\154\uff7f\155\uff7f\001\002\000" +
    "\044\003\uff84\030\uff84\031\uff84\032\uff84\035\uff84\036\uff84" +
    "\042\uff84\043\uff84\050\uff84\054\uff84\074\uff84\111\uff84\144" +
    "\uff84\146\uff84\147\uff84\154\uff84\155\uff84\001\002\000\004" +
    "\044\303\001\002\000\034\005\073\052\101\053\054\054" +
    "\102\075\305\117\074\121\103\123\046\150\062\152\056" +
    "\153\055\154\037\155\017\001\002\000\004\050\uff6b\001" +
    "\002\000\032\005\073\052\101\053\054\054\102\117\074" +
    "\121\103\123\046\150\062\152\056\153\055\154\037\155" +
    "\017\001\002\000\004\050\uff6a\001\002\000\010\036\266" +
    "\050\uff6c\111\246\001\002\000\004\050\312\001\002\000" +
    "\004\154\320\001\002\000\036\003\uff6e\035\uff6e\036\uff6e" +
    "\042\uff6e\043\uff6e\050\uff6e\054\uff6e\074\uff6e\111\uff6e\144" +
    "\uff6e\146\uff6e\147\uff6e\154\uff6e\155\uff6e\001\002\000\036" +
    "\003\240\035\uff92\036\uff92\042\uff92\043\uff92\050\uff92\054" +
    "\uff92\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92\154\uff92" +
    "\155\uff92\001\002\000\040\003\240\032\316\035\uff92\036" +
    "\uff92\042\uff92\043\uff92\050\uff92\054\uff92\074\uff92\111\uff92" +
    "\144\uff92\146\uff92\147\uff92\154\uff92\155\uff92\001\002\000" +
    "\044\003\uff96\030\uff96\031\uff96\032\uff96\035\uff96\036\uff96" +
    "\042\uff96\043\uff96\050\uff96\054\uff96\074\uff96\111\uff96\144" +
    "\uff96\146\uff96\147\uff96\154\uff96\155\uff96\001\002\000\004" +
    "\050\317\001\002\000\006\127\uff6d\154\uff6d\001\002\000" +
    "\004\127\321\001\002\000\044\003\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\035\uff6f\036\uff6f\042\uff6f\043\uff6f\050\uff6f\054" +
    "\uff6f\074\uff6f\111\uff6f\144\uff6f\146\uff6f\147\uff6f\154\uff6f" +
    "\155\uff6f\001\002\000\044\003\uff85\030\uff85\031\uff85\032" +
    "\uff85\035\uff85\036\uff85\042\uff85\043\uff85\050\uff85\054\uff85" +
    "\074\uff85\111\uff85\144\uff85\146\uff85\147\uff85\154\uff85\155" +
    "\uff85\001\002\000\004\143\324\001\002\000\034\035\uff90" +
    "\036\uff90\042\uff90\043\uff90\050\uff90\054\uff90\074\uff90\111" +
    "\uff90\144\uff90\146\uff90\147\uff90\154\uff90\155\uff90\001\002" +
    "\000\036\003\075\005\073\052\101\053\054\054\102\116" +
    "\uff61\117\074\121\103\123\046\150\062\152\056\153\055" +
    "\154\037\155\017\001\002\000\004\116\327\001\002\000" +
    "\004\127\330\001\002\000\044\003\uff80\030\uff80\031\uff80" +
    "\032\uff80\035\uff80\036\uff80\042\uff80\043\uff80\050\uff80\054" +
    "\uff80\074\uff80\111\uff80\144\uff80\146\uff80\147\uff80\154\uff80" +
    "\155\uff80\001\002\000\034\003\075\005\073\052\101\053" +
    "\054\054\102\117\074\121\103\123\046\150\062\152\056" +
    "\153\055\154\037\155\017\001\002\000\010\050\uff71\104" +
    "\uff71\127\uff71\001\002\000\004\104\334\001\002\000\036" +
    "\003\240\035\uff92\036\uff92\042\uff92\043\uff92\050\uff92\054" +
    "\uff92\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92\154\uff92" +
    "\155\uff92\001\002\000\044\003\240\030\uff75\031\uff75\032" +
    "\uff75\035\uff92\036\uff92\042\uff92\043\uff92\050\uff92\054\uff92" +
    "\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92\154\uff92\155" +
    "\uff92\001\002\000\010\030\337\031\340\032\uff73\001\002" +
    "\000\036\003\240\035\uff92\036\uff92\042\uff92\043\uff92\050" +
    "\uff92\054\uff92\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92" +
    "\154\uff92\155\uff92\001\002\000\034\003\075\005\073\052" +
    "\101\053\054\054\102\117\074\121\103\123\046\150\062" +
    "\152\056\153\055\154\037\155\017\001\002\000\004\032" +
    "\342\001\002\000\004\043\343\001\002\000\004\127\uff77" +
    "\001\002\000\004\127\345\001\002\000\044\003\uff76\030" +
    "\uff76\031\uff76\032\uff76\035\uff76\036\uff76\042\uff76\043\uff76" +
    "\050\uff76\054\uff76\074\uff76\111\uff76\144\uff76\146\uff76\147" +
    "\uff76\154\uff76\155\uff76\001\002\000\004\104\347\001\002" +
    "\000\036\003\240\035\uff92\036\uff92\042\uff92\043\uff92\050" +
    "\uff92\054\uff92\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92" +
    "\154\uff92\155\uff92\001\002\000\044\003\240\030\uff74\031" +
    "\uff74\032\uff74\035\uff92\036\uff92\042\uff92\043\uff92\050\uff92" +
    "\054\uff92\074\uff92\111\uff92\144\uff92\146\uff92\147\uff92\154" +
    "\uff92\155\uff92\001\002\000\040\003\240\032\uff72\035\uff92" +
    "\036\uff92\042\uff92\043\uff92\050\uff92\054\uff92\074\uff92\111" +
    "\uff92\144\uff92\146\uff92\147\uff92\154\uff92\155\uff92\001\002" +
    "\000\004\127\354\001\002\000\044\003\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\035\uff7a\036\uff7a\042\uff7a\043\uff7a\050\uff7a" +
    "\054\uff7a\074\uff7a\111\uff7a\144\uff7a\146\uff7a\147\uff7a\154" +
    "\uff7a\155\uff7a\001\002\000\044\003\uff79\030\uff79\031\uff79" +
    "\032\uff79\035\uff79\036\uff79\042\uff79\043\uff79\050\uff79\054" +
    "\uff79\074\uff79\111\uff79\144\uff79\146\uff79\147\uff79\154\uff79" +
    "\155\uff79\001\002\000\004\127\356\001\002\000\044\003" +
    "\uff70\030\uff70\031\uff70\032\uff70\035\uff70\036\uff70\042\uff70" +
    "\043\uff70\050\uff70\054\uff70\074\uff70\111\uff70\144\uff70\146" +
    "\uff70\147\uff70\154\uff70\155\uff70\001\002\000\004\050\uff69" +
    "\001\002\000\004\127\361\001\002\000\044\003\uff81\030" +
    "\uff81\031\uff81\032\uff81\035\uff81\036\uff81\042\uff81\043\uff81" +
    "\050\uff81\054\uff81\074\uff81\111\uff81\144\uff81\146\uff81\147" +
    "\uff81\154\uff81\155\uff81\001\002\000\034\003\075\005\073" +
    "\052\101\053\054\054\102\117\074\121\103\123\046\150" +
    "\062\152\056\153\055\154\037\155\017\001\002\000\004" +
    "\127\364\001\002\000\044\003\uff83\030\uff83\031\uff83\032" +
    "\uff83\035\uff83\036\uff83\042\uff83\043\uff83\050\uff83\054\uff83" +
    "\074\uff83\111\uff83\144\uff83\146\uff83\147\uff83\154\uff83\155" +
    "\uff83\001\002\000\006\110\367\127\uff7c\001\002\000\006" +
    "\110\uff7d\127\uff7d\001\002\000\034\003\075\005\073\052" +
    "\101\053\054\054\102\117\074\121\103\123\046\150\062" +
    "\152\056\153\055\154\037\155\017\001\002\000\004\127" +
    "\371\001\002\000\044\003\uff82\030\uff82\031\uff82\032\uff82" +
    "\035\uff82\036\uff82\042\uff82\043\uff82\050\uff82\054\uff82\074" +
    "\uff82\111\uff82\144\uff82\146\uff82\147\uff82\154\uff82\155\uff82" +
    "\001\002\000\004\127\uff7b\001\002\000\010\127\uffa3\154" +
    "\uffa3\155\uffa3\001\002\000\010\127\uff68\154\015\155\017" +
    "\001\002\000\004\127\377\001\002\000\004\127\uff67\001" +
    "\002\000\012\002\uffa2\016\uffa2\040\uffa2\064\uffa2\001\002" +
    "\000\016\003\uff65\016\uff65\040\uff65\064\uff65\105\uff65\154" +
    "\uff65\001\002\000\010\016\uff98\040\uff98\064\uff98\001\002" +
    "\000\016\003\uff64\016\uff64\040\uff64\064\uff64\105\uff64\154" +
    "\uff64\001\002\000\004\154\u011c\001\002\000\016\003\uff9b" +
    "\016\uff9b\040\uff9b\064\uff9b\105\uff9b\154\uff9b\001\002\000" +
    "\016\003\uff63\016\uff63\040\uff63\064\uff63\105\uff63\154\uff63" +
    "\001\002\000\006\122\030\126\u0118\001\002\000\016\003" +
    "\uff66\016\uff66\040\uff66\064\uff66\105\uff66\154\uff66\001\002" +
    "\000\010\016\uff9a\040\uff9a\064\uff9a\001\002\000\006\122" +
    "\207\126\u010a\001\002\000\014\020\042\037\043\045\035" +
    "\154\037\155\017\001\002\000\006\127\uffe4\137\044\001" +
    "\002\000\004\127\u010d\001\002\000\020\003\uff57\016\uff57" +
    "\032\uff57\040\uff57\064\uff57\105\uff57\154\uff57\001\002\000" +
    "\010\016\uff9d\040\u0111\064\u0110\001\002\000\010\016\uff99" +
    "\040\uff99\064\uff99\001\002\000\004\154\u0116\001\002\000" +
    "\006\154\015\155\017\001\002\000\006\074\ufff3\117\023" +
    "\001\002\000\004\074\u0114\001\002\000\014\020\042\037" +
    "\043\045\035\154\037\155\017\001\002\000\004\046\222" +
    "\001\002\000\006\046\226\117\023\001\002\000\004\046" +
    "\230\001\002\000\014\020\042\037\043\045\035\154\037" +
    "\155\017\001\002\000\006\127\uffe4\137\044\001\002\000" +
    "\004\127\u011b\001\002\000\020\003\uff56\016\uff56\032\uff56" +
    "\040\uff56\064\uff56\105\uff56\154\uff56\001\002\000\004\046" +
    "\u011d\001\002\000\004\070\u011e\001\002\000\010\032\uff59" +
    "\054\u0123\154\uff59\001\002\000\004\127\u0120\001\002\000" +
    "\016\003\uff5d\016\uff5d\040\uff5d\064\uff5d\105\uff5d\154\uff5d" +
    "\001\002\000\006\032\uff5b\154\u0109\001\002\000\004\032" +
    "\u0125\001\002\000\004\127\u0124\001\002\000\004\032\uff5a" +
    "\001\002\000\004\070\u0126\001\002\000\004\127\uff5c\001" +
    "\002\000\006\032\uff58\154\uff58\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\020\002\011\003\005\004\003\005\013\006" +
    "\006\014\010\051\004\001\001\000\002\001\001\000\006" +
    "\052\232\055\231\001\001\000\014\004\230\005\013\006" +
    "\006\014\010\051\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\017\031\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\021\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\023\026\026\032\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\040\022\035\031\037\001\001" +
    "\000\002\001\001\000\004\030\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\007\052\010\063\011\056\012" +
    "\075\013\046\016\057\017\047\020\051\021\066\031\037" +
    "\033\050\035\067\037\065\040\060\041\064\042\077\044" +
    "\062\047\071\050\070\117\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\170\011\056\012\075\013\121\031\037\040" +
    "\060\117\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\155\046\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\134\001\001\000\002\001\001\000\026" +
    "\010\063\011\056\012\075\013\121\031\037\033\122\035" +
    "\067\037\065\040\060\117\076\001\001\000\020\010\120" +
    "\011\056\012\075\013\121\031\037\040\060\117\076\001" +
    "\001\000\052\007\116\010\063\011\056\012\075\013\046" +
    "\016\057\017\047\020\051\021\066\031\037\033\050\035" +
    "\067\037\065\040\060\041\064\042\077\044\062\047\071" +
    "\050\070\117\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\103" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\010\063\011\056\012\075\013\046" +
    "\031\037\033\050\035\067\037\065\040\060\042\114\044" +
    "\062\047\071\050\070\117\076\001\001\000\036\010\063" +
    "\011\056\012\075\013\046\031\037\033\050\035\067\037" +
    "\065\040\060\042\112\044\062\047\071\050\070\117\076" +
    "\001\001\000\036\010\063\011\056\012\075\013\046\031" +
    "\037\033\050\035\067\037\065\040\060\042\110\044\062" +
    "\047\071\050\070\117\076\001\001\000\036\010\063\011" +
    "\056\012\075\013\046\031\037\033\050\035\067\037\065" +
    "\040\060\042\111\044\062\047\071\050\070\117\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\010\063\011\056\012\075\013\046\031\037\033" +
    "\050\035\067\037\065\040\060\042\115\044\062\047\071" +
    "\050\070\117\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\124\001\001\000\002\001" +
    "\001\000\024\010\063\011\056\012\075\013\121\031\037" +
    "\035\127\037\065\040\060\117\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\063\011\056\012\075\013\121\031\037" +
    "\037\135\040\060\117\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\010\063\011\056\012\075\013\046" +
    "\031\037\033\050\035\067\037\065\040\060\042\140\044" +
    "\062\047\071\050\070\117\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\010\063\011\056\012\075\013" +
    "\046\031\037\033\050\035\067\037\065\040\060\042\143" +
    "\044\062\047\071\050\070\117\076\001\001\000\002\001" +
    "\001\000\020\010\145\011\056\012\075\013\121\031\037" +
    "\040\060\117\076\001\001\000\002\001\001\000\036\010" +
    "\063\011\056\012\075\013\046\031\037\033\050\035\067" +
    "\037\065\040\060\043\162\044\163\047\071\050\070\117" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\063\011\056\012\075\013\046\031\037" +
    "\033\050\035\067\037\065\040\060\044\161\047\071\050" +
    "\070\117\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\063\011\056\012\075\013\046" +
    "\031\037\033\050\035\067\037\065\040\060\044\165\047" +
    "\071\050\070\117\076\001\001\000\002\001\001\000\036" +
    "\010\063\011\056\012\075\013\046\031\037\033\050\035" +
    "\067\037\065\040\060\042\167\044\062\047\071\050\070" +
    "\117\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\063\011\056\012\075\013\046\031\037\033\050" +
    "\035\067\037\065\040\060\042\172\044\062\047\071\050" +
    "\070\117\076\001\001\000\002\001\001\000\036\010\063" +
    "\011\056\012\075\013\046\031\037\033\050\035\067\037" +
    "\065\040\060\042\174\044\062\047\071\050\070\117\076" +
    "\001\001\000\002\001\001\000\056\007\176\010\063\011" +
    "\056\012\075\013\046\016\057\017\047\020\051\021\066" +
    "\031\037\033\050\035\067\037\065\040\060\041\064\042" +
    "\077\044\062\047\071\050\070\105\200\106\177\117\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\007\203\010\063\011\056" +
    "\012\075\013\046\016\057\017\047\020\051\021\066\031" +
    "\037\033\050\035\067\037\065\040\060\041\064\042\077" +
    "\044\062\047\071\050\070\117\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\210\001\001\000\010\013\040\022\211\031" +
    "\037\001\001\000\004\030\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\216\032" +
    "\025\001\001\000\002\001\001\000\010\013\040\022\220" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\226\024\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\u0106\006\u0100\014\010" +
    "\032\u0105\051\004\056\u0103\057\u0107\111\377\115\u0101\001" +
    "\001\000\002\001\001\000\004\120\234\001\001\000\010" +
    "\053\235\060\240\061\236\001\001\000\006\060\314\061" +
    "\236\001\001\000\044\013\242\031\037\050\256\062\270" +
    "\063\264\064\262\065\267\066\261\067\251\070\260\071" +
    "\271\072\247\073\272\104\246\107\243\110\257\116\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\365\031\037\101\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\357\031\037\001\001\000\054\007" +
    "\331\010\063\011\056\012\075\013\046\016\057\017\047" +
    "\020\051\021\066\031\037\033\050\035\067\037\065\040" +
    "\060\041\064\042\077\044\062\047\071\050\070\074\356" +
    "\117\076\001\001\000\004\076\354\001\001\000\002\001" +
    "\001\000\052\007\351\010\063\011\056\012\075\013\046" +
    "\016\057\017\047\020\051\021\066\031\037\033\050\035" +
    "\067\037\065\040\060\041\064\042\077\044\062\047\071" +
    "\050\070\117\076\001\001\000\002\001\001\000\004\122" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\007\176\010\063\011" +
    "\056\012\075\013\046\016\057\017\047\020\051\021\066" +
    "\031\037\033\050\035\067\037\065\040\060\041\064\042" +
    "\077\044\062\047\071\050\070\105\275\106\177\117\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\063" +
    "\011\056\012\075\013\046\031\037\033\050\035\067\037" +
    "\065\040\060\043\303\044\163\047\071\050\070\117\076" +
    "\001\001\000\002\001\001\000\036\010\063\011\056\012" +
    "\075\013\046\031\037\033\050\035\067\037\065\040\060" +
    "\043\305\044\163\047\071\050\070\117\076\001\001\000" +
    "\002\001\001\000\004\104\307\001\001\000\004\076\310" +
    "\001\001\000\002\001\001\000\004\124\312\001\001\000" +
    "\010\053\313\060\240\061\236\001\001\000\006\060\314" +
    "\061\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\176\010\063\011\056\012\075\013\046\016\057\017\047" +
    "\020\051\021\066\031\037\033\050\035\067\037\065\040" +
    "\060\041\064\042\077\044\062\047\071\050\070\105\325" +
    "\106\177\117\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\007\331\010\063\011\056" +
    "\012\075\013\046\016\057\017\047\020\051\021\066\031" +
    "\037\033\050\035\067\037\065\040\060\041\064\042\077" +
    "\044\062\047\071\050\070\074\332\117\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\053\334\060\240" +
    "\061\236\001\001\000\010\060\314\061\236\103\335\001" +
    "\001\000\004\075\340\001\001\000\010\053\350\060\240" +
    "\061\236\001\001\000\054\007\331\010\063\011\056\012" +
    "\075\013\046\016\057\017\047\020\051\021\066\031\037" +
    "\033\050\035\067\037\065\040\060\041\064\042\077\044" +
    "\062\047\071\050\070\074\345\117\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\347\060\240\061\236\001\001\000\006\060\314\061" +
    "\236\001\001\000\006\060\314\061\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\007\362\010\063\011\056\012" +
    "\075\013\046\016\057\017\047\020\051\021\066\031\037" +
    "\033\050\035\067\037\065\040\060\041\064\042\077\044" +
    "\062\047\071\050\070\117\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\367\001\001\000\002\001" +
    "\001\000\054\007\331\010\063\011\056\012\075\013\046" +
    "\016\057\017\047\020\051\021\066\031\037\033\050\035" +
    "\067\037\065\040\060\041\064\042\077\044\062\047\071" +
    "\050\070\074\371\117\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\373\001\001" +
    "\000\010\023\375\031\015\054\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\u010d\001\001\000\002\001\001\000" +
    "\010\013\040\022\u010a\031\037\001\001\000\004\030\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\u0100\051\004\057\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u0111\031\015\001\001\000\006\015" +
    "\u0112\024\020\001\001\000\002\001\001\000\010\013\040" +
    "\022\u0114\031\037\001\001\000\002\001\001\000\004\024" +
    "\u0116\001\001\000\002\001\001\000\010\013\040\022\u0118" +
    "\031\037\001\001\000\004\030\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u011e" +
    "\001\001\000\006\113\u0121\114\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\u0105\115\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if(message.equals("Syntax error"))
                message = "Error sintáctico";
        else if (message.equals("Couldn't repair and continue parse"))
		if(!action_obj.pila.empty())
                    message = "Fin del archivo sin completar la sentencia " + action_obj.pila.pop();
                else
                    message = "No se pudo recuperar para continuar el parseo";

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);
	System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        
	//System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   public Stack pila = new Stack();
   public TablaSimbolos tablaActual = null;
   public boolean hasError = true;


   public String ErrorTipoIdDeclarado(int left, int right, String id){
        hasError = true;
        return "Error de tipos en la linea " + (left+1) + " columna " + (right+1)
                + " : El identificador \"" + id + "\" ya fue declarado anteriormente en un ámbito superior.";
   }

   public String ErrorTipoValorIrreconocible(int left, int right){
        hasError = true;
        return "Error de tipos en la linea " + (left+1) + " columna " + (right+1)
                + " : No se puede reconocer el tipo del elemento.";
   }

   public String ErrorTipoAsignacionNoCompatible(int left, int right, Object t1, Object t2){
        hasError = true;
        String retorno = "Error de tipos en la linea " + (left+1) + " columna " + (right+1)
                + " : No puede asignar un valor ";

        if(t2 instanceof TipoInteger)
            retorno += "entero";
        else if(t2 instanceof TipoFloat)
            retorno += "float";
        else if(t2 instanceof TipoBoolean)
            retorno += "boolean";

        retorno +=  " a una variable tipo ";

        if(t1 instanceof TipoInteger)
            retorno += "entero.";
        else if(t1 instanceof TipoFloat)
            retorno += "float.";
        else if(t1 instanceof TipoBoolean)
            retorno += "boolean.";

        return retorno;
   }

   public String ErrorTipoOperacionNoCompatible(int left, int right, String op, Object t1, Object t2){
        hasError = true;
        String retorno = "Error de tipos en la linea " + (left+1) + " columna " + (right+1)
                + " : El operador " + op + " no se puede usar entre expresiones ";


        if(t1 instanceof TipoInteger)
            retorno += "entero";
        else if(t1 instanceof TipoFloat)
            retorno += "float";
        else if(t1 instanceof TipoBoolean)
            retorno += "boolean";

        retorno +=  " y ";

        if(t2 instanceof TipoInteger)
            retorno += "entero.";
        else if(t2 instanceof TipoFloat)
            retorno += "float.";
        else if(t2 instanceof TipoBoolean)
            retorno += "boolean.";

        return retorno;
   }

   public Tipo ErrorTipoDeterminarTipo(Object t1, Object t2){
          Tipo tmpT1;
          Tipo tmpT2;
          Tipo ret;

          if(t1 instanceof Tipo)
                tmpT1 = (Tipo)t1;
          else
                tmpT1 = null;

          if(t2 instanceof Tipo)
                tmpT2 = (Tipo)t2;
          else
                tmpT2 = null;


          if(!tmpT1.error && !tmpT2.error){
                ret = tmpT1.copia();
                ret.error = true;
                return ret;
          }else{
                if(tmpT2.error){
                    ret = tmpT1.copia();
                    ret.error = false;
                    return ret;
                }else{
                    ret = tmpT2.copia();
                    ret.error = false;
                    return ret;
                }
          }
   }

   public boolean ErrorTipoEsNumerico(int left, int right, boolean es, Object t1, Object t2){
        Tipo tmpT1;
        Tipo tmpT2;

        if(t1 instanceof Tipo)
            tmpT1 = (Tipo)t1;
        else
            tmpT1 = null;

        if(t2 instanceof Tipo)
            tmpT2 = (Tipo)t2;
        else
            tmpT2 = null;

        if( es && (!tmpT1.esNumerico()  || !tmpT2.esNumerico())){
            System.out.println("Error de tipos en la linea " + (left+1) + " columna " + (right+1)
                + " : Esta operación solo se puede realizar con tipos numéricos.");
            return false;

        }else if( !es && (tmpT1.esNumerico()  || tmpT2.esNumerico()) ){
            System.out.println("Error de tipos en la linea " + (left+1) + " columna " + (right+1)
                + " : Esta operación solo se puede realizar con tipos booleanos.");
            return false;

        }else
            return true;


   }



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaracion_componente ::= lista_identificador2 DOS_PUNTOS indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int li2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object li2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Resultado res = (Resultado)ist;
                                       ArrayList<String> ids =  (ArrayList<String>)li2;
                                       ArrayList<Tipo> tipos = new ArrayList<Tipo>();
                                       for(String s: ids){
                                          Simbolo tmpSim = new Simbolo((String)s, res.tipo);
                                          boolean done = tablaActual.put((String)s, tmpSim);

                                            if (!done){
                                                System.out.println(ErrorTipoIdDeclarado(li2left, li2right, s));
                                            }
                                       }

                                       if(io != null){
                                            int error = res.tipo.mismoTipo(io);
                                            if(error == 1){
                                                System.out.println(ErrorTipoAsignacionNoCompatible(ioleft, ioright, res.tipo, io));
                                            }
                                            else if (error == 2){
                                                System.out.println(ErrorTipoValorIrreconocible(ioleft, ioright));
                                            }
                                        }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_componente",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracion_componente ::= IDENTIFICADOR DOS_PUNTOS indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int istleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int istright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object io = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Resultado res = (Resultado)ist;
                                       Simbolo tmpSim = new Simbolo((String)id, res.tipo);
                                       boolean done = tablaActual.put((String)id, tmpSim);

                                       if (!done){
                                           hasError = true;
                                           System.out.println(ErrorTipoIdDeclarado(idleft, idright, (String)id));
                                       } else 

                                       if(io != null){
                                           int error = res.tipo.mismoTipo(io);
                                           if(error == 1){
                                                System.out.println(ErrorTipoAsignacionNoCompatible(ioleft, ioright, res.tipo, io));
                                           }
                                           else if (error == 2){
                                                System.out.println(ErrorTipoValorIrreconocible(ioleft, ioright));
                                           }
                                       }



                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_componente",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // lista_declaracion_componentes0 ::= lista_declaracion_componentes0 declaracion_componente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_componentes0",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // lista_declaracion_componentes0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_componentes0",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // lista_componentes ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_componentes",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lista_componentes ::= lista_declaracion_componentes0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_componentes",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // definicion_record ::= RECORD lista_componentes END RECORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_record",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaracion_record ::= TYPE IDENTIFICADOR IS definicion_record PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_record",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // lista_expresiones_variante ::= lista_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_expresiones_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // llamada_funcion ::= nombre PAR_IZQ lista_expresiones_variante PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declaracion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaracion ::= declaracion_componente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declaracion ::= declaracion_record 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declaracion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // designador_variante ::= designador 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador_variante",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // designador_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador_variante",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // iteracion_clausula_variante ::= WHILE condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // iteracion_clausula_variante ::= FOR IDENTIFICADOR IN REVERSE rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // iteracion_clausula_variante ::= FOR IDENTIFICADOR IN rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // iteracion_clausula_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // loop_basico ::= LOOP NT$4 secuencia_de_sentencias END LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 pila.pop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_basico",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$4 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pila.push("LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencia_loop ::= IDENTIFICADOR DOS_PUNTOS iteracion_clausula_variante loop_basico IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_loop",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencia_loop ::= iteracion_clausula_variante loop_basico PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_loop",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condicion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // else_variante ::= ELSE secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_variante",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // else_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_variante",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lista_elsif0 ::= lista_elsif0 ELSIF condicion THEN secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elsif0",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_elsif0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elsif0",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_if ::= IF NT$2 condicion THEN secuencia_de_sentencias lista_elsif0 else_variante END IF NT$3 PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
 pila.pop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pila.push("IF"); 
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_retorno ::= RETURN expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_retorno ::= RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // when_variante ::= WHEN condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_variante",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // when_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_variante",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // nombre_variante ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variante",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // nombre_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variante",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_get ::= GET PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_get",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_put ::= PUT PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_put",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_goto ::= GOTO nombre PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_goto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_salida ::= EXIT nombre_variante when_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_salida",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_asignacion ::= nombre ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_nula ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_nula",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_llamada_funcion ::= llamada_funcion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamada_funcion",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_compuesta ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_compuesta ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_simple ::= sentencia_get 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_simple ::= sentencia_put 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_simple ::= sentencia_llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_simple ::= sentencia_goto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_simple ::= sentencia_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_simple ::= sentencia_salida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_simple ::= sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_simple ::= sentencia_nula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // etiqueta ::= ETIQUETA_IZQ IDENTIFICADOR ETIQUETA_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_etiqueta ::= lista_etiqueta etiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lista_etiqueta ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia ::= lista_etiqueta sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia ::= lista_etiqueta sentencia_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // secuencia_de_sentencias ::= secuencia_de_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // secuencia_de_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_cuerpo0 ::= lista_cuerpo0 cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_cuerpo0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_declarativa_item0 ::= lista_declarativa_item0 declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_declarativa_item0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parte_declarativa ::= lista_declarativa_item0 cuerpo lista_cuerpo0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_declarativa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parte_declarativa ::= lista_declarativa_item0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_declarativa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // especific_subprograma_es ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo IS 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = ds;
                                       TablaSimbolos tablaTmp = new TablaSimbolos(tablaActual);
                                       tablaTmp.nombre = (String)ds;
                                       tablaActual = tablaTmp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR parte_formal IS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id;
                                       TablaSimbolos tablaTmp = new TablaSimbolos(tablaActual);
                                       tablaTmp.nombre = id;
                                       tablaActual = tablaTmp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR IS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id;
                                       TablaSimbolos tablaTmp = new TablaSimbolos(tablaActual);
                                       tablaTmp.nombre = id;
                                       tablaActual = tablaTmp;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_subprograma ::= especific_subprograma_es parte_declarativa BEGIN NT$0 secuencia_de_sentencias END NT$1 designador_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!ese.equals(dv))
                                        System.out.println("Error en la linea "+ (dvleft+1) + " columna "
                                        + (dvright+1) + " : Se esperaba fin del procedimiento " + ese);
                                      
                                      tablaActual = tablaActual.padre;


                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_subprograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$0 ::= 
            {
              Object RESULT =null;
		int eseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
pila.push("BEGIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal_booleano ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoBoolean(bl.booleanValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_booleano",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal_numerico ::= REAL_LITERAL 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float rl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoFloat(rl.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal_numerico ::= ENTERO_LITERAL 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer el = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoInteger(el.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= literal_booleano 
            {
              Object RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= literal_numerico 
            {
              Object RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ln; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= NULL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignador ::= NEW nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primario ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primario ::= literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primario ::= asignador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primario ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= primario EXPONENTE primario 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Tipo tmp1 = (Tipo)p1;
                                       Tipo tmp2 = (Tipo)p2;
                                       int error = tmp1.mismoTipo(tmp2);
                                       
                                       if(ErrorTipoEsNumerico(p1left, p1right, true, p1, p2)){
                                           if(error == 1){
                                                RESULT = ErrorTipoDeterminarTipo(p1, p2);
                                                if(((Tipo)RESULT).error)
                                                    System.out.println(ErrorTipoOperacionNoCompatible(p1left, p1right, "**", p1, p2));
                                           }else if(error == 2){
                                                RESULT = ErrorTipoDeterminarTipo(p1, p2);
                                                if(((Tipo)RESULT).error)
                                                    System.out.println(ErrorTipoValorIrreconocible(p1left, p1right));
                                           }
                                            else{
                                                RESULT = tmp1.copia();
                                           }
                                       }else{
                                            if(tmp2.esNumerico())
                                                RESULT = tmp2.copia();
                                            else
                                                RESULT = tmp1.copia();
                                      }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= NOT primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= ABS primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= primario 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_terminos ::= lista_terminos operador_suma termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_terminos ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_multiplicacion ::= REM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_suma ::= CONCATENAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_unario ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_unario ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_membresia ::= NOT IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_membresia ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_relacional ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_relacional ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_relacional ::= DISTINTO_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_simple ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_simple ::= operador_unario lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_simple ::= lista_terminos 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rango ::= expresion_simple RANGO expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relacion ::= expresion_simple operador_membresia rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relacion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relacion ::= expresion_simple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_orelse ::= expresion_orelse OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_orelse ::= relacion OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_andthen ::= expresion_andthen AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_andthen ::= relacion AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_xor ::= expresion_xor XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_xor ::= relacion XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_or ::= expresion_or OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_or ::= relacion OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_and ::= expresion_and AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_and ::= relacion AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion_orelse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion_andthen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion_xor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= relacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_identificador2 ::= lista_identificador2 COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int li2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object li2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> res = (ArrayList<String>) li2;
                                                                                      res.add((String)id);
                                                                                      RESULT = res;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_identificador2 ::= IDENTIFICADOR COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> res = new ArrayList<String>();
                                                                                 res.add((String)id1);
                                                                                 res.add((String)id2);
                                                                                 RESULT = res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inicializacion_opcion ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inicializacion_opcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modo ::= IN OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modo ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // modo ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_parametro ::= lista_identificador2 DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_parametro ::= IDENTIFICADOR DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaracion_parametro ::= lista_declaracion_parametro PUNTO_Y_COMA declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_declaracion_parametro ::= declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // indicacion_subtipo ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // indicacion_subtipo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resultado();
                                               Resultado res = (Resultado)RESULT;
                                               res.tipo = new TipoFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // indicacion_subtipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resultado();
                                               Resultado res = (Resultado)RESULT;
                                               res.tipo = new TipoBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // indicacion_subtipo ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resultado();
                                               Resultado res = (Resultado)RESULT;
                                               res.tipo = new TipoInteger(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parte_formal ::= PAR_IZQ lista_declaracion_parametro PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parte_formal_variante ::= parte_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_formal_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operador_simbolo ::= CADENA_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cl.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_simbolo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // designador ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // designador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especific_subprograma ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especific_subprograma ::= PROCEDURE IDENTIFICADOR parte_formal_variante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_subprograma ::= especific_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_subprograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombre ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unidad_compilacion ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidad_compilacion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_compilacion ::= lista_compilacion unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_compilacion ::= unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // raiz ::= lista_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

