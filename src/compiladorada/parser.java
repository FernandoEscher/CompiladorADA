
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 23 23:36:00 CST 2009
//----------------------------------------------------

package compiladorada;

import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 23 23:36:00 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\013\003\000\002\013\003\000\002\005\003\000" +
    "\002\014\005\000\002\014\007\000\002\023\003\000\002" +
    "\023\003\000\002\031\003\000\002\015\002\000\002\015" +
    "\003\000\002\024\005\000\002\022\003\000\002\025\003" +
    "\000\002\025\005\000\002\026\007\000\002\026\007\000" +
    "\002\027\002\000\002\027\003\000\002\027\003\000\002" +
    "\027\004\000\002\030\002\000\002\030\004\000\002\032" +
    "\005\000\002\032\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\016\005\000\002" +
    "\016\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\005\000\002\020\005\000\002\021\006\000\002\021\006" +
    "\000\002\041\006\000\002\041\006\000\002\042\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\043\005\000\002\044\003\000\002\044\004\000\002\044" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\046\003\000\002\046\004\000\002\047\003\000\002" +
    "\047\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\033\003\000\002\033\005\000" +
    "\002\035\003\000\002\035\005\000\002\037\003\000\002" +
    "\037\004\000\002\037\004\000\002\037\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\004\000\002\012\003\000\002\012\003\000" +
    "\002\040\003\000\002\040\003\000\002\117\002\000\002" +
    "\120\002\000\002\006\013\000\002\051\005\000\002\051" +
    "\006\000\002\051\010\000\002\052\003\000\002\052\005" +
    "\000\002\055\002\000\002\055\004\000\002\100\002\000" +
    "\002\100\004\000\002\057\003\000\002\053\003\000\002" +
    "\053\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\003\000\002\061\002\000\002\061\004\000\002\064\005" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\063\003\000\002\063" +
    "\003\000\002\116\004\000\002\065\004\000\002\066\006" +
    "\000\002\067\006\000\002\071\005\000\002\107\007\000" +
    "\002\110\007\000\002\101\002\000\002\101\003\000\002" +
    "\102\002\000\002\102\004\000\002\070\004\000\002\070" +
    "\005\000\002\121\002\000\002\122\002\000\002\072\015" +
    "\000\002\103\002\000\002\103\007\000\002\075\002\000" +
    "\002\075\004\000\002\074\003\000\002\073\005\000\002" +
    "\073\010\000\002\123\002\000\002\076\007\000\002\104" +
    "\002\000\002\104\006\000\002\104\007\000\002\104\004" +
    "\000\002\054\002\000\002\054\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\077\010\000\002\077\010\000\002\050" +
    "\006\000\002\105\002\000\002\105\003\000\002\106\003" +
    "\000\002\106\005\000\002\111\007\000\002\112\006\000" +
    "\002\113\003\000\002\113\004\000\002\114\002\000\002" +
    "\114\004\000\002\115\007\000\002\115\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\006\036\013\061\010\001\002\000\010\002" +
    "\uffff\036\uffff\061\uffff\001\002\000\016\003\uffa0\016\uffa0" +
    "\036\uffa0\061\uffa0\102\uffa0\150\uffa0\001\002\000\010\002" +
    "\000\036\013\061\010\001\002\000\010\002\ufffc\036\ufffc" +
    "\061\ufffc\001\002\000\004\150\221\001\002\000\020\002" +
    "\ufff9\003\ufff9\016\ufff9\036\ufff9\061\ufff9\102\ufff9\150\ufff9" +
    "\001\002\000\004\002\220\001\002\000\006\150\015\151" +
    "\017\001\002\000\010\002\ufffd\036\ufffd\061\ufffd\001\002" +
    "\000\010\071\ufff6\114\ufff6\124\ufff6\001\002\000\010\071" +
    "\ufff5\114\ufff5\124\ufff5\001\002\000\114\002\ufff4\003\ufff4" +
    "\013\ufff4\016\ufff4\036\ufff4\042\ufff4\043\ufff4\045\ufff4\046" +
    "\ufff4\050\ufff4\053\ufff4\061\ufff4\066\ufff4\071\ufff4\101\ufff4" +
    "\102\ufff4\105\ufff4\110\ufff4\111\ufff4\113\ufff4\114\ufff4\115" +
    "\ufff4\116\ufff4\117\ufff4\120\ufff4\122\ufff4\124\ufff4\125\ufff4" +
    "\126\ufff4\127\ufff4\132\ufff4\133\ufff4\134\ufff4\135\ufff4\136" +
    "\ufff4\137\ufff4\150\ufff4\001\002\000\006\071\ufff3\114\023" +
    "\001\002\000\004\071\ufff2\001\002\000\004\071\215\001" +
    "\002\000\004\150\025\001\002\000\006\113\212\124\213" +
    "\001\002\000\006\117\204\123\205\001\002\000\006\117" +
    "\030\123\031\001\002\000\006\113\uffef\124\uffef\001\002" +
    "\000\004\150\203\001\002\000\012\042\033\055\032\150" +
    "\uffeb\151\uffeb\001\002\000\006\150\uffe9\151\uffe9\001\002" +
    "\000\010\055\202\150\uffea\151\uffea\001\002\000\006\150" +
    "\036\151\017\001\002\000\010\113\uffe7\124\uffe7\134\041" +
    "\001\002\000\112\002\ufffb\003\ufffb\013\ufffb\016\ufffb\036" +
    "\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\053\ufffb" +
    "\061\ufffb\066\ufffb\101\ufffb\102\ufffb\105\ufffb\110\ufffb\111" +
    "\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117\ufffb\120\ufffb" +
    "\122\ufffb\124\ufffb\125\ufffb\126\ufffb\127\ufffb\132\ufffb\133" +
    "\ufffb\134\ufffb\135\ufffb\136\ufffb\137\ufffb\150\ufffb\001\002" +
    "\000\112\002\ufffa\003\ufffa\013\ufffa\016\ufffa\036\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\046\ufffa\050\ufffa\053\ufffa\061\ufffa" +
    "\066\ufffa\101\ufffa\102\ufffa\105\ufffa\110\ufffa\111\ufffa\113" +
    "\ufffa\114\ufffa\115\ufffa\116\ufffa\117\ufffa\120\ufffa\122\ufffa" +
    "\124\ufffa\125\ufffa\126\ufffa\127\ufffa\132\ufffa\133\ufffa\134" +
    "\ufffa\135\ufffa\136\ufffa\137\ufffa\150\ufffa\001\002\000\030" +
    "\002\ufff0\003\ufff0\016\ufff0\036\ufff0\043\ufff0\061\ufff0\102" +
    "\ufff0\113\ufff0\124\ufff0\134\ufff0\150\ufff0\001\002\000\032" +
    "\003\071\005\067\047\073\050\051\051\075\114\070\116" +
    "\076\120\043\145\056\147\052\150\036\151\017\001\002" +
    "\000\006\113\uffec\124\uffec\001\002\000\024\005\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\114\uffc1\145\uffc1\147\uffc1\150\uffc1" +
    "\151\uffc1\001\002\000\066\013\uffb1\042\uffb1\045\uffb1\046" +
    "\uffb1\050\uffb1\053\uffb1\066\uffb1\101\uffb1\110\uffb1\111\uffb1" +
    "\113\uffb1\114\164\115\uffb1\116\uffb1\117\uffb1\120\uffb1\122" +
    "\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\132\uffb1\133\uffb1" +
    "\135\uffb1\136\uffb1\137\uffb1\001\002\000\016\045\uffe1\053" +
    "\200\101\uffe1\113\uffe1\117\uffe1\124\uffe1\001\002\000\052" +
    "\013\uffcd\042\uffcd\045\uffcd\050\uffcd\053\uffcd\101\uffcd\110" +
    "\uffcd\111\122\113\uffcd\116\117\117\uffcd\120\120\124\uffcd" +
    "\125\uffcd\126\uffcd\127\uffcd\132\uffcd\135\uffcd\136\uffcd\137" +
    "\uffcd\001\002\000\016\045\uffe0\101\uffe0\110\176\113\uffe0" +
    "\117\uffe0\124\uffe0\001\002\000\006\113\uffe6\124\uffe6\001" +
    "\002\000\020\047\073\051\075\114\070\145\056\147\052" +
    "\150\036\151\017\001\002\000\064\013\uffa9\042\uffa9\045" +
    "\uffa9\046\uffa9\050\uffa9\053\uffa9\066\uffa9\101\uffa9\110\uffa9" +
    "\111\uffa9\113\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\122" +
    "\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9\132\uffa9\133\uffa9" +
    "\135\uffa9\136\uffa9\137\uffa9\001\002\000\064\013\uffb0\042" +
    "\uffb0\045\uffb0\046\uffb0\050\uffb0\053\uffb0\066\uffb0\101\uffb0" +
    "\110\uffb0\111\uffb0\113\uffb0\115\uffb0\116\uffb0\117\uffb0\120" +
    "\uffb0\122\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\132\uffb0" +
    "\133\uffb0\135\uffb0\136\uffb0\137\uffb0\001\002\000\016\013" +
    "\173\045\uffe2\101\uffe2\113\uffe2\117\uffe2\124\uffe2\001\002" +
    "\000\064\013\uffab\042\uffab\045\uffab\046\uffab\050\uffab\053" +
    "\uffab\066\uffab\101\uffab\110\uffab\111\uffab\113\uffab\115\uffab" +
    "\116\uffab\117\uffab\120\uffab\122\uffab\124\uffab\125\uffab\126" +
    "\uffab\127\uffab\132\uffab\133\uffab\135\uffab\136\uffab\137\uffab" +
    "\001\002\000\064\013\uffaa\042\uffaa\045\uffaa\046\uffaa\050" +
    "\uffaa\053\uffaa\066\uffaa\101\uffaa\110\uffaa\111\uffaa\113\uffaa" +
    "\115\uffaa\116\uffaa\117\uffaa\120\uffaa\122\uffaa\124\uffaa\125" +
    "\uffaa\126\uffaa\127\uffaa\132\uffaa\133\uffaa\135\uffaa\136\uffaa" +
    "\137\uffaa\001\002\000\042\013\uffd2\042\144\045\uffd2\050" +
    "\152\053\uffd2\101\uffd2\110\uffd2\113\uffd2\117\uffd2\124\uffd2" +
    "\125\146\126\147\127\143\135\145\136\153\137\150\001" +
    "\002\000\064\013\uffb5\042\uffb5\045\uffb5\046\uffb5\050\uffb5" +
    "\053\uffb5\066\uffb5\101\uffb5\110\uffb5\111\uffb5\113\uffb5\115" +
    "\uffb5\116\uffb5\117\uffb5\120\uffb5\122\uffb5\124\uffb5\125\uffb5" +
    "\126\uffb5\127\uffb5\132\uffb5\133\140\135\uffb5\136\uffb5\137" +
    "\uffb5\001\002\000\016\045\uffde\053\135\101\uffde\113\uffde" +
    "\117\uffde\124\uffde\001\002\000\062\013\uffb9\042\uffb9\045" +
    "\uffb9\046\125\050\uffb9\053\uffb9\066\127\101\uffb9\110\uffb9" +
    "\111\uffb9\113\uffb9\115\124\116\uffb9\117\uffb9\120\uffb9\122" +
    "\126\124\uffb9\125\uffb9\126\uffb9\127\uffb9\132\uffb9\135\uffb9" +
    "\136\uffb9\137\uffb9\001\002\000\016\013\132\045\uffdf\101" +
    "\uffdf\113\uffdf\117\uffdf\124\uffdf\001\002\000\062\013\uffb7" +
    "\042\uffb7\045\uffb7\046\uffb7\050\uffb7\053\uffb7\066\uffb7\101" +
    "\uffb7\110\uffb7\111\uffb7\113\uffb7\115\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\122\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\132" +
    "\uffb7\135\uffb7\136\uffb7\137\uffb7\001\002\000\044\013\uffcb" +
    "\042\uffcb\045\uffcb\050\uffcb\053\uffcb\101\uffcb\110\uffcb\113" +
    "\uffcb\117\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb\132\uffcb" +
    "\135\uffcb\136\uffcb\137\uffcb\001\002\000\024\005\067\047" +
    "\073\050\051\051\075\114\070\145\056\147\052\150\036" +
    "\151\017\001\002\000\020\047\073\051\075\114\070\145" +
    "\056\147\052\150\036\151\017\001\002\000\032\003\071" +
    "\005\067\047\073\050\051\051\075\114\070\116\076\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\014" +
    "\045\uffdd\101\uffdd\113\uffdd\117\uffdd\124\uffdd\001\002\000" +
    "\064\013\uffaf\042\uffaf\045\uffaf\046\uffaf\050\uffaf\053\uffaf" +
    "\066\uffaf\101\uffaf\110\uffaf\111\uffaf\113\uffaf\115\uffaf\116" +
    "\uffaf\117\uffaf\120\uffaf\122\uffaf\124\uffaf\125\uffaf\126\uffaf" +
    "\127\uffaf\132\uffaf\133\uffaf\135\uffaf\136\uffaf\137\uffaf\001" +
    "\002\000\006\150\036\151\017\001\002\000\022\013\077" +
    "\045\uffe3\053\101\101\uffe3\110\100\113\uffe3\117\uffe3\124" +
    "\uffe3\001\002\000\064\013\uffac\042\uffac\045\uffac\046\uffac" +
    "\050\uffac\053\uffac\066\uffac\101\uffac\110\uffac\111\uffac\113" +
    "\uffac\115\uffac\116\uffac\117\uffac\120\uffac\122\uffac\124\uffac" +
    "\125\uffac\126\uffac\127\uffac\132\uffac\133\uffac\135\uffac\136" +
    "\uffac\137\uffac\001\002\000\024\005\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\114\uffc2\145\uffc2\147\uffc2\150\uffc2\151\uffc2\001" +
    "\002\000\032\005\067\047\073\050\051\051\075\101\106" +
    "\114\070\116\076\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\030\005\067\047\073\050\051\051\075" +
    "\114\070\116\076\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\032\005\067\027\102\047\073\050\051" +
    "\051\075\114\070\116\076\120\043\145\056\147\052\150" +
    "\036\151\017\001\002\000\030\005\067\047\073\050\051" +
    "\051\075\114\070\116\076\120\043\145\056\147\052\150" +
    "\036\151\017\001\002\000\016\045\uffda\053\uffda\101\uffda" +
    "\113\uffda\117\uffda\124\uffda\001\002\000\016\045\uffd4\053" +
    "\uffd4\101\uffd4\113\uffd4\117\uffd4\124\uffd4\001\002\000\016" +
    "\045\uffd8\101\uffd8\110\uffd8\113\uffd8\117\uffd8\124\uffd8\001" +
    "\002\000\030\005\067\047\073\050\051\051\075\114\070" +
    "\116\076\120\043\145\056\147\052\150\036\151\017\001" +
    "\002\000\016\013\uffdc\045\uffdc\101\uffdc\113\uffdc\117\uffdc" +
    "\124\uffdc\001\002\000\016\013\uffd6\045\uffd6\101\uffd6\113" +
    "\uffd6\117\uffd6\124\uffd6\001\002\000\064\013\uffad\042\uffad" +
    "\045\uffad\046\uffad\050\uffad\053\uffad\066\uffad\101\uffad\110" +
    "\uffad\111\uffad\113\uffad\115\uffad\116\uffad\117\uffad\120\uffad" +
    "\122\uffad\124\uffad\125\uffad\126\uffad\127\uffad\132\uffad\133" +
    "\uffad\135\uffad\136\uffad\137\uffad\001\002\000\004\113\113" +
    "\001\002\000\064\013\uffae\042\uffae\045\uffae\046\uffae\050" +
    "\uffae\053\uffae\066\uffae\101\uffae\110\uffae\111\uffae\113\uffae" +
    "\115\uffae\116\uffae\117\uffae\120\uffae\122\uffae\124\uffae\125" +
    "\uffae\126\uffae\127\uffae\132\uffae\133\uffae\135\uffae\136\uffae" +
    "\137\uffae\001\002\000\062\013\uffb4\042\uffb4\045\uffb4\046" +
    "\uffb4\050\uffb4\053\uffb4\066\uffb4\101\uffb4\110\uffb4\111\uffb4" +
    "\113\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\122\uffb4\124" +
    "\uffb4\125\uffb4\126\uffb4\127\uffb4\132\uffb4\135\uffb4\136\uffb4" +
    "\137\uffb4\001\002\000\064\013\uffb1\042\uffb1\045\uffb1\046" +
    "\uffb1\050\uffb1\053\uffb1\066\uffb1\101\uffb1\110\uffb1\111\uffb1" +
    "\113\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\122\uffb1\124" +
    "\uffb1\125\uffb1\126\uffb1\127\uffb1\132\uffb1\133\uffb1\135\uffb1" +
    "\136\uffb1\137\uffb1\001\002\000\052\013\uffcc\042\uffcc\045" +
    "\uffcc\050\uffcc\053\uffcc\101\uffcc\110\uffcc\111\122\113\uffcc" +
    "\116\117\117\uffcc\120\120\124\uffcc\125\uffcc\126\uffcc\127" +
    "\uffcc\132\uffcc\135\uffcc\136\uffcc\137\uffcc\001\002\000\024" +
    "\005\uffc0\047\uffc0\050\uffc0\051\uffc0\114\uffc0\145\uffc0\147" +
    "\uffc0\150\uffc0\151\uffc0\001\002\000\024\005\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\114\uffbf\145\uffbf\147\uffbf\150\uffbf\151" +
    "\uffbf\001\002\000\024\005\067\047\073\050\051\051\075" +
    "\114\070\145\056\147\052\150\036\151\017\001\002\000" +
    "\024\005\uffbe\047\uffbe\050\uffbe\051\uffbe\114\uffbe\145\uffbe" +
    "\147\uffbe\150\uffbe\151\uffbe\001\002\000\062\013\uffb8\042" +
    "\uffb8\045\uffb8\046\125\050\uffb8\053\uffb8\066\127\101\uffb8" +
    "\110\uffb8\111\uffb8\113\uffb8\115\124\116\uffb8\117\uffb8\120" +
    "\uffb8\122\126\124\uffb8\125\uffb8\126\uffb8\127\uffb8\132\uffb8" +
    "\135\uffb8\136\uffb8\137\uffb8\001\002\000\024\005\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\114\uffbd\145\uffbd\147\uffbd\150\uffbd" +
    "\151\uffbd\001\002\000\024\005\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\114\uffbb\145\uffbb\147\uffbb\150\uffbb\151\uffbb\001\002" +
    "\000\024\005\uffbc\047\uffbc\050\uffbc\051\uffbc\114\uffbc\145" +
    "\uffbc\147\uffbc\150\uffbc\151\uffbc\001\002\000\024\005\uffba" +
    "\047\uffba\050\uffba\051\uffba\114\uffba\145\uffba\147\uffba\150" +
    "\uffba\151\uffba\001\002\000\024\005\067\047\073\050\051" +
    "\051\075\114\070\145\056\147\052\150\036\151\017\001" +
    "\002\000\062\013\uffb6\042\uffb6\045\uffb6\046\uffb6\050\uffb6" +
    "\053\uffb6\066\uffb6\101\uffb6\110\uffb6\111\uffb6\113\uffb6\115" +
    "\uffb6\116\uffb6\117\uffb6\120\uffb6\122\uffb6\124\uffb6\125\uffb6" +
    "\126\uffb6\127\uffb6\132\uffb6\135\uffb6\136\uffb6\137\uffb6\001" +
    "\002\000\004\101\133\001\002\000\030\005\067\047\073" +
    "\050\051\051\075\114\070\116\076\120\043\145\056\147" +
    "\052\150\036\151\017\001\002\000\016\013\uffd5\045\uffd5" +
    "\101\uffd5\113\uffd5\117\uffd5\124\uffd5\001\002\000\004\027" +
    "\136\001\002\000\030\005\067\047\073\050\051\051\075" +
    "\114\070\116\076\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\016\045\uffd3\053\uffd3\101\uffd3\113\uffd3" +
    "\117\uffd3\124\uffd3\001\002\000\020\047\073\051\075\114" +
    "\070\145\056\147\052\150\036\151\017\001\002\000\062" +
    "\013\uffb2\042\uffb2\045\uffb2\046\uffb2\050\uffb2\053\uffb2\066" +
    "\uffb2\101\uffb2\110\uffb2\111\uffb2\113\uffb2\115\uffb2\116\uffb2" +
    "\117\uffb2\120\uffb2\122\uffb2\124\uffb2\125\uffb2\126\uffb2\127" +
    "\uffb2\132\uffb2\135\uffb2\136\uffb2\137\uffb2\001\002\000\030" +
    "\005\067\047\073\050\051\051\075\114\070\116\076\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\030" +
    "\005\uffc7\047\uffc7\050\uffc7\051\uffc7\114\uffc7\116\uffc7\120" +
    "\uffc7\145\uffc7\147\uffc7\150\uffc7\151\uffc7\001\002\000\030" +
    "\005\uffc4\047\uffc4\050\uffc4\051\uffc4\114\uffc4\116\uffc4\120" +
    "\uffc4\145\uffc4\147\uffc4\150\uffc4\151\uffc4\001\002\000\030" +
    "\005\uffc9\047\uffc9\050\uffc9\051\uffc9\114\uffc9\116\uffc9\120" +
    "\uffc9\145\uffc9\147\uffc9\150\uffc9\151\uffc9\001\002\000\030" +
    "\005\uffc8\047\uffc8\050\uffc8\051\uffc8\114\uffc8\116\uffc8\120" +
    "\uffc8\145\uffc8\147\uffc8\150\uffc8\151\uffc8\001\002\000\030" +
    "\005\uffca\047\uffca\050\uffca\051\uffca\114\uffca\116\uffca\120" +
    "\uffca\145\uffca\147\uffca\150\uffca\151\uffca\001\002\000\030" +
    "\005\uffc5\047\uffc5\050\uffc5\051\uffc5\114\uffc5\116\uffc5\120" +
    "\uffc5\145\uffc5\147\uffc5\150\uffc5\151\uffc5\001\002\000\030" +
    "\005\067\047\073\050\051\051\075\114\070\116\076\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\004" +
    "\042\154\001\002\000\030\005\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\114\uffc6\116\uffc6\120\uffc6\145\uffc6\147\uffc6\150\uffc6" +
    "\151\uffc6\001\002\000\030\005\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\114\uffc3\116\uffc3\120\uffc3\145\uffc3\147\uffc3\150\uffc3" +
    "\151\uffc3\001\002\000\022\013\uffd1\045\uffd1\053\uffd1\101" +
    "\uffd1\110\uffd1\113\uffd1\117\uffd1\124\uffd1\001\002\000\046" +
    "\013\ufff0\045\ufff0\046\uffb1\053\ufff0\066\uffb1\101\ufff0\110" +
    "\ufff0\111\uffb1\113\ufff0\114\164\115\uffb1\116\uffb1\117\ufff0" +
    "\120\uffb1\122\uffb1\124\ufff0\132\uffb1\133\uffb1\001\002\000" +
    "\022\013\uffd0\045\uffd0\053\uffd0\101\uffd0\110\uffd0\113\uffd0" +
    "\117\uffd0\124\uffd0\001\002\000\022\013\uffcf\045\uffcf\053" +
    "\uffcf\101\uffcf\110\uffcf\113\uffcf\117\uffcf\124\uffcf\001\002" +
    "\000\004\132\162\001\002\000\030\005\067\047\073\050" +
    "\051\051\075\114\070\116\076\120\043\145\056\147\052" +
    "\150\036\151\017\001\002\000\022\013\uffce\045\uffce\053" +
    "\uffce\101\uffce\110\uffce\113\uffce\117\uffce\124\uffce\001\002" +
    "\000\034\003\071\005\067\047\073\050\051\051\075\113" +
    "\uff62\114\070\116\076\120\043\145\056\147\052\150\036" +
    "\151\017\001\002\000\006\113\uff60\117\uff60\001\002\000" +
    "\006\113\uff61\117\171\001\002\000\004\113\170\001\002" +
    "\000\044\013\uff63\042\uff63\045\uff63\050\uff63\053\uff63\101" +
    "\uff63\110\uff63\113\uff63\117\uff63\124\uff63\125\uff63\126\uff63" +
    "\127\uff63\132\uff63\135\uff63\136\uff63\137\uff63\001\002\000" +
    "\032\003\071\005\067\047\073\050\051\051\075\114\070" +
    "\116\076\120\043\145\056\147\052\150\036\151\017\001" +
    "\002\000\006\113\uff5f\117\uff5f\001\002\000\030\005\067" +
    "\047\073\050\051\051\075\114\070\116\076\120\043\145" +
    "\056\147\052\150\036\151\017\001\002\000\016\013\uffdb" +
    "\045\uffdb\101\uffdb\113\uffdb\117\uffdb\124\uffdb\001\002\000" +
    "\062\013\uffb3\042\uffb3\045\uffb3\046\uffb3\050\uffb3\053\uffb3" +
    "\066\uffb3\101\uffb3\110\uffb3\111\uffb3\113\uffb3\115\uffb3\116" +
    "\uffb3\117\uffb3\120\uffb3\122\uffb3\124\uffb3\125\uffb3\126\uffb3" +
    "\127\uffb3\132\uffb3\135\uffb3\136\uffb3\137\uffb3\001\002\000" +
    "\030\005\067\047\073\050\051\051\075\114\070\116\076" +
    "\120\043\145\056\147\052\150\036\151\017\001\002\000" +
    "\016\045\uffd7\101\uffd7\110\uffd7\113\uffd7\117\uffd7\124\uffd7" +
    "\001\002\000\030\005\067\047\073\050\051\051\075\114" +
    "\070\116\076\120\043\145\056\147\052\150\036\151\017" +
    "\001\002\000\016\045\uffd9\053\uffd9\101\uffd9\113\uffd9\117" +
    "\uffd9\124\uffd9\001\002\000\006\150\uffe8\151\uffe8\001\002" +
    "\000\006\117\uffe4\123\uffe4\001\002\000\004\150\211\001" +
    "\002\000\012\042\033\055\032\150\uffeb\151\uffeb\001\002" +
    "\000\006\150\036\151\017\001\002\000\010\113\uffe7\124" +
    "\uffe7\134\041\001\002\000\006\113\uffed\124\uffed\001\002" +
    "\000\006\117\uffe5\123\uffe5\001\002\000\024\002\ufff1\003" +
    "\ufff1\016\ufff1\036\ufff1\043\ufff1\061\ufff1\071\ufff1\102\ufff1" +
    "\150\ufff1\001\002\000\004\150\025\001\002\000\006\113" +
    "\uffee\124\uffee\001\002\000\006\150\036\151\017\001\002" +
    "\000\022\002\ufff7\003\ufff7\016\ufff7\036\ufff7\043\217\061" +
    "\ufff7\102\ufff7\150\ufff7\001\002\000\016\003\uffa3\016\uffa3" +
    "\036\uffa3\061\uffa3\102\uffa3\150\uffa3\001\002\000\004\002" +
    "\001\001\002\000\024\002\ufff3\003\ufff3\016\ufff3\036\ufff3" +
    "\043\224\061\ufff3\102\ufff3\114\023\150\ufff3\001\002\000" +
    "\022\002\ufff2\003\ufff2\016\ufff2\036\ufff2\043\225\061\ufff2" +
    "\102\ufff2\150\ufff2\001\002\000\020\002\ufff8\003\ufff8\016" +
    "\ufff8\036\ufff8\061\ufff8\102\ufff8\150\ufff8\001\002\000\016" +
    "\003\uffa5\016\uffa5\036\uffa5\061\uffa5\102\uffa5\150\uffa5\001" +
    "\002\000\016\003\uffa4\016\uffa4\036\uffa4\061\uffa4\102\uffa4" +
    "\150\uffa4\001\002\000\010\002\ufffe\036\ufffe\061\ufffe\001" +
    "\002\000\016\003\u0103\016\uffa2\036\013\061\010\102\u0101" +
    "\150\u0107\001\002\000\004\016\231\001\002\000\036\003" +
    "\uffa8\034\uffa8\035\uffa8\040\uffa8\041\uffa8\045\uffa8\051\uffa8" +
    "\071\uffa8\106\uffa8\141\uffa8\143\uffa8\144\uffa8\150\uffa8\151" +
    "\uffa8\001\002\000\036\003\235\034\uff96\035\uff96\040\uff96" +
    "\041\uff96\045\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143" +
    "\uff96\144\uff96\150\uff96\151\uff96\001\002\000\040\003\235" +
    "\031\370\034\uff96\035\uff96\040\uff96\041\uff96\045\uff96\051" +
    "\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144\uff96\150\uff96" +
    "\151\uff96\001\002\000\034\034\237\035\263\040\243\041" +
    "\250\045\uff70\051\264\071\246\106\242\141\253\143\251" +
    "\144\270\150\261\151\017\001\002\000\044\003\uff97\027" +
    "\uff97\030\uff97\031\uff97\034\uff97\035\uff97\040\uff97\041\uff97" +
    "\045\uff97\051\uff97\071\uff97\106\uff97\141\uff97\143\uff97\144" +
    "\uff97\150\uff97\151\uff97\001\002\000\044\003\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045" +
    "\uff9b\051\uff9b\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b" +
    "\150\uff9b\151\uff9b\001\002\000\012\105\uff82\124\uff82\150" +
    "\036\151\017\001\002\000\006\114\164\134\357\001\002" +
    "\000\044\003\uff8d\027\uff8d\030\uff8d\031\uff8d\034\uff8d\035" +
    "\uff8d\040\uff8d\041\uff8d\045\uff8d\051\uff8d\071\uff8d\106\uff8d" +
    "\141\uff8d\143\uff8d\144\uff8d\150\uff8d\151\uff8d\001\002\000" +
    "\032\003\071\005\067\047\073\050\051\051\075\114\070" +
    "\116\076\120\043\145\056\147\052\150\036\151\017\001" +
    "\002\000\006\150\036\151\017\001\002\000\004\045\307" +
    "\001\002\000\044\003\uff8b\027\uff8b\030\uff8b\031\uff8b\034" +
    "\uff8b\035\uff8b\040\uff8b\041\uff8b\045\uff8b\051\uff8b\071\uff8b" +
    "\106\uff8b\141\uff8b\143\uff8b\144\uff8b\150\uff8b\151\uff8b\001" +
    "\002\000\034\003\071\005\067\047\073\050\051\051\075" +
    "\114\070\116\076\120\043\124\350\145\056\147\052\150" +
    "\036\151\017\001\002\000\044\003\uff91\027\uff91\030\uff91" +
    "\031\uff91\034\uff91\035\uff91\040\uff91\041\uff91\045\uff91\051" +
    "\uff91\071\uff91\106\uff91\141\uff91\143\uff91\144\uff91\150\uff91" +
    "\151\uff91\001\002\000\032\003\uff7c\005\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\114\uff7c\116\uff7c\120\uff7c\145\uff7c\147\uff7c" +
    "\150\uff7c\151\uff7c\001\002\000\004\114\322\001\002\000" +
    "\044\003\uff8e\027\uff8e\030\uff8e\031\uff8e\034\uff8e\035\uff8e" +
    "\040\uff8e\041\uff8e\045\uff8e\051\uff8e\071\uff8e\106\uff8e\141" +
    "\uff8e\143\uff8e\144\uff8e\150\uff8e\151\uff8e\001\002\000\004" +
    "\150\320\001\002\000\004\124\317\001\002\000\044\003" +
    "\uff90\027\uff90\030\uff90\031\uff90\034\uff90\035\uff90\040\uff90" +
    "\041\uff90\045\uff90\051\uff90\071\uff90\106\uff90\141\uff90\143" +
    "\uff90\144\uff90\150\uff90\151\uff90\001\002\000\044\003\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\034\uff8c\035\uff8c\040\uff8c\041" +
    "\uff8c\045\uff8c\051\uff8c\071\uff8c\106\uff8c\141\uff8c\143\uff8c" +
    "\144\uff8c\150\uff8c\151\uff8c\001\002\000\044\003\uff92\027" +
    "\uff92\030\uff92\031\uff92\034\uff92\035\uff92\040\uff92\041\uff92" +
    "\045\uff92\051\uff92\071\uff92\106\uff92\141\uff92\143\uff92\144" +
    "\uff92\150\uff92\151\uff92\001\002\000\034\034\uff95\035\uff95" +
    "\040\uff95\041\uff95\045\uff95\051\uff95\071\uff95\106\uff95\141" +
    "\uff95\143\uff95\144\uff95\150\uff95\151\uff95\001\002\000\010" +
    "\114\ufffb\123\304\134\ufffb\001\002\000\044\003\uff98\027" +
    "\uff98\030\uff98\031\uff98\034\uff98\035\uff98\040\uff98\041\uff98" +
    "\045\uff98\051\uff98\071\uff98\106\uff98\141\uff98\143\uff98\144" +
    "\uff98\150\uff98\151\uff98\001\002\000\004\150\277\001\002" +
    "\000\004\124\276\001\002\000\044\003\uff93\027\uff93\030" +
    "\uff93\031\uff93\034\uff93\035\uff93\040\uff93\041\uff93\045\uff93" +
    "\051\uff93\071\uff93\106\uff93\141\uff93\143\uff93\144\uff93\150" +
    "\uff93\151\uff93\001\002\000\044\003\uff99\027\uff99\030\uff99" +
    "\031\uff99\034\uff99\035\uff99\040\uff99\041\uff99\045\uff99\051" +
    "\uff99\071\uff99\106\uff99\141\uff99\143\uff99\144\uff99\150\uff99" +
    "\151\uff99\001\002\000\044\003\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\034\uff8f\035\uff8f\040\uff8f\041\uff8f\045\uff8f\051\uff8f" +
    "\071\uff8f\106\uff8f\141\uff8f\143\uff8f\144\uff8f\150\uff8f\151" +
    "\uff8f\001\002\000\004\114\272\001\002\000\044\003\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\034\uff8a\035\uff8a\040\uff8a\041" +
    "\uff8a\045\uff8a\051\uff8a\071\uff8a\106\uff8a\141\uff8a\143\uff8a" +
    "\144\uff8a\150\uff8a\151\uff8a\001\002\000\034\003\071\005" +
    "\067\047\073\050\051\051\075\113\uff62\114\070\116\076" +
    "\120\043\145\056\147\052\150\036\151\017\001\002\000" +
    "\004\113\274\001\002\000\004\124\275\001\002\000\044" +
    "\003\uff83\027\uff83\030\uff83\031\uff83\034\uff83\035\uff83\040" +
    "\uff83\041\uff83\045\uff83\051\uff83\071\uff83\106\uff83\141\uff83" +
    "\143\uff83\144\uff83\150\uff83\151\uff83\001\002\000\044\003" +
    "\uff88\027\uff88\030\uff88\031\uff88\034\uff88\035\uff88\040\uff88" +
    "\041\uff88\045\uff88\051\uff88\071\uff88\106\uff88\141\uff88\143" +
    "\uff88\144\uff88\150\uff88\151\uff88\001\002\000\004\042\300" +
    "\001\002\000\032\005\067\047\073\050\051\051\075\072" +
    "\302\114\070\116\076\120\043\145\056\147\052\150\036" +
    "\151\017\001\002\000\004\045\uff6f\001\002\000\030\005" +
    "\067\047\073\050\051\051\075\114\070\116\076\120\043" +
    "\145\056\147\052\150\036\151\017\001\002\000\004\045" +
    "\uff6e\001\002\000\010\035\263\045\uff70\106\242\001\002" +
    "\000\004\045\307\001\002\000\004\150\315\001\002\000" +
    "\036\003\uff72\034\uff72\035\uff72\040\uff72\041\uff72\045\uff72" +
    "\051\uff72\071\uff72\106\uff72\141\uff72\143\uff72\144\uff72\150" +
    "\uff72\151\uff72\001\002\000\036\003\235\034\uff96\035\uff96" +
    "\040\uff96\041\uff96\045\uff96\051\uff96\071\uff96\106\uff96\141" +
    "\uff96\143\uff96\144\uff96\150\uff96\151\uff96\001\002\000\040" +
    "\003\235\031\313\034\uff96\035\uff96\040\uff96\041\uff96\045" +
    "\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144\uff96" +
    "\150\uff96\151\uff96\001\002\000\044\003\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\034\uff9a\035\uff9a\040\uff9a\041\uff9a\045\uff9a" +
    "\051\uff9a\071\uff9a\106\uff9a\141\uff9a\143\uff9a\144\uff9a\150" +
    "\uff9a\151\uff9a\001\002\000\004\045\314\001\002\000\006" +
    "\124\uff71\150\uff71\001\002\000\004\124\316\001\002\000" +
    "\044\003\uff73\027\uff73\030\uff73\031\uff73\034\uff73\035\uff73" +
    "\040\uff73\041\uff73\045\uff73\051\uff73\071\uff73\106\uff73\141" +
    "\uff73\143\uff73\144\uff73\150\uff73\151\uff73\001\002\000\044" +
    "\003\uff89\027\uff89\030\uff89\031\uff89\034\uff89\035\uff89\040" +
    "\uff89\041\uff89\045\uff89\051\uff89\071\uff89\106\uff89\141\uff89" +
    "\143\uff89\144\uff89\150\uff89\151\uff89\001\002\000\004\140" +
    "\321\001\002\000\034\034\uff94\035\uff94\040\uff94\041\uff94" +
    "\045\uff94\051\uff94\071\uff94\106\uff94\141\uff94\143\uff94\144" +
    "\uff94\150\uff94\151\uff94\001\002\000\034\003\071\005\067" +
    "\047\073\050\051\051\075\113\uff62\114\070\116\076\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\004" +
    "\113\324\001\002\000\004\124\325\001\002\000\044\003" +
    "\uff84\027\uff84\030\uff84\031\uff84\034\uff84\035\uff84\040\uff84" +
    "\041\uff84\045\uff84\051\uff84\071\uff84\106\uff84\141\uff84\143" +
    "\uff84\144\uff84\150\uff84\151\uff84\001\002\000\032\003\071" +
    "\005\067\047\073\050\051\051\075\114\070\116\076\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\010" +
    "\045\uff75\101\uff75\124\uff75\001\002\000\004\101\331\001" +
    "\002\000\036\003\235\034\uff96\035\uff96\040\uff96\041\uff96" +
    "\045\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144" +
    "\uff96\150\uff96\151\uff96\001\002\000\044\003\235\027\uff79" +
    "\030\uff79\031\uff79\034\uff96\035\uff96\040\uff96\041\uff96\045" +
    "\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144\uff96" +
    "\150\uff96\151\uff96\001\002\000\010\027\334\030\335\031" +
    "\uff77\001\002\000\036\003\235\034\uff96\035\uff96\040\uff96" +
    "\041\uff96\045\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143" +
    "\uff96\144\uff96\150\uff96\151\uff96\001\002\000\032\003\071" +
    "\005\067\047\073\050\051\051\075\114\070\116\076\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\004" +
    "\031\337\001\002\000\004\041\340\001\002\000\004\124" +
    "\uff7b\001\002\000\004\124\342\001\002\000\044\003\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\034\uff7a\035\uff7a\040\uff7a\041" +
    "\uff7a\045\uff7a\051\uff7a\071\uff7a\106\uff7a\141\uff7a\143\uff7a" +
    "\144\uff7a\150\uff7a\151\uff7a\001\002\000\004\101\344\001" +
    "\002\000\036\003\235\034\uff96\035\uff96\040\uff96\041\uff96" +
    "\045\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144" +
    "\uff96\150\uff96\151\uff96\001\002\000\044\003\235\027\uff78" +
    "\030\uff78\031\uff78\034\uff96\035\uff96\040\uff96\041\uff96\045" +
    "\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144\uff96" +
    "\150\uff96\151\uff96\001\002\000\040\003\235\031\uff76\034" +
    "\uff96\035\uff96\040\uff96\041\uff96\045\uff96\051\uff96\071\uff96" +
    "\106\uff96\141\uff96\143\uff96\144\uff96\150\uff96\151\uff96\001" +
    "\002\000\004\124\351\001\002\000\044\003\uff7e\027\uff7e" +
    "\030\uff7e\031\uff7e\034\uff7e\035\uff7e\040\uff7e\041\uff7e\045" +
    "\uff7e\051\uff7e\071\uff7e\106\uff7e\141\uff7e\143\uff7e\144\uff7e" +
    "\150\uff7e\151\uff7e\001\002\000\044\003\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\034\uff7d\035\uff7d\040\uff7d\041\uff7d\045\uff7d" +
    "\051\uff7d\071\uff7d\106\uff7d\141\uff7d\143\uff7d\144\uff7d\150" +
    "\uff7d\151\uff7d\001\002\000\004\124\353\001\002\000\044" +
    "\003\uff74\027\uff74\030\uff74\031\uff74\034\uff74\035\uff74\040" +
    "\uff74\041\uff74\045\uff74\051\uff74\071\uff74\106\uff74\141\uff74" +
    "\143\uff74\144\uff74\150\uff74\151\uff74\001\002\000\004\124" +
    "\355\001\002\000\044\003\uff85\027\uff85\030\uff85\031\uff85" +
    "\034\uff85\035\uff85\040\uff85\041\uff85\045\uff85\051\uff85\071" +
    "\uff85\106\uff85\141\uff85\143\uff85\144\uff85\150\uff85\151\uff85" +
    "\001\002\000\004\045\uff6d\001\002\000\032\003\071\005" +
    "\067\047\073\050\051\051\075\114\070\116\076\120\043" +
    "\145\056\147\052\150\036\151\017\001\002\000\004\124" +
    "\361\001\002\000\044\003\uff87\027\uff87\030\uff87\031\uff87" +
    "\034\uff87\035\uff87\040\uff87\041\uff87\045\uff87\051\uff87\071" +
    "\uff87\106\uff87\141\uff87\143\uff87\144\uff87\150\uff87\151\uff87" +
    "\001\002\000\006\105\364\124\uff80\001\002\000\006\105" +
    "\uff81\124\uff81\001\002\000\032\003\071\005\067\047\073" +
    "\050\051\051\075\114\070\116\076\120\043\145\056\147" +
    "\052\150\036\151\017\001\002\000\004\124\366\001\002" +
    "\000\044\003\uff86\027\uff86\030\uff86\031\uff86\034\uff86\035" +
    "\uff86\040\uff86\041\uff86\045\uff86\051\uff86\071\uff86\106\uff86" +
    "\141\uff86\143\uff86\144\uff86\150\uff86\151\uff86\001\002\000" +
    "\004\124\uff7f\001\002\000\010\124\uffa7\150\uffa7\151\uffa7" +
    "\001\002\000\010\124\uff6c\150\015\151\017\001\002\000" +
    "\004\124\374\001\002\000\004\124\uff6b\001\002\000\012" +
    "\002\uffa6\016\uffa6\036\uffa6\061\uffa6\001\002\000\016\003" +
    "\uff68\016\uff68\036\uff68\061\uff68\102\uff68\150\uff68\001\002" +
    "\000\010\016\uff9c\036\uff9c\061\uff9c\001\002\000\016\003" +
    "\uff6a\016\uff6a\036\uff6a\061\uff6a\102\uff6a\150\uff6a\001\002" +
    "\000\016\003\uff67\016\uff67\036\uff67\061\uff67\102\uff67\150" +
    "\uff67\001\002\000\004\150\u0122\001\002\000\016\003\uff9f" +
    "\016\uff9f\036\uff9f\061\uff9f\102\uff9f\150\uff9f\001\002\000" +
    "\016\003\uff66\016\uff66\036\uff66\061\uff66\102\uff66\150\uff66" +
    "\001\002\000\006\117\030\123\u011a\001\002\000\010\016" +
    "\uff9e\036\uff9e\061\uff9e\001\002\000\016\003\uff69\016\uff69" +
    "\036\uff69\061\uff69\102\uff69\150\uff69\001\002\000\006\117" +
    "\204\123\u0108\001\002\000\010\021\u010a\150\036\151\017" +
    "\001\002\000\006\124\uffe7\134\041\001\002\000\004\134" +
    "\u010b\001\002\000\032\003\071\005\067\047\073\050\051" +
    "\051\075\114\070\116\076\120\043\145\056\147\052\150" +
    "\036\151\017\001\002\000\004\124\u010d\001\002\000\016" +
    "\003\uff65\016\uff65\036\uff65\061\uff65\102\uff65\150\uff65\001" +
    "\002\000\004\124\u010f\001\002\000\020\003\uff58\016\uff58" +
    "\031\uff58\036\uff58\061\uff58\102\uff58\150\uff58\001\002\000" +
    "\010\016\uffa1\036\u0113\061\u0112\001\002\000\010\016\uff9d" +
    "\036\uff9d\061\uff9d\001\002\000\004\150\u0118\001\002\000" +
    "\006\150\015\151\017\001\002\000\006\071\ufff3\114\023" +
    "\001\002\000\004\071\u0116\001\002\000\006\150\036\151" +
    "\017\001\002\000\004\043\217\001\002\000\006\043\224" +
    "\114\023\001\002\000\004\043\225\001\002\000\010\021" +
    "\u011c\150\036\151\017\001\002\000\006\124\uffe7\134\041" +
    "\001\002\000\004\134\u011d\001\002\000\032\003\071\005" +
    "\067\047\073\050\051\051\075\114\070\116\076\120\043" +
    "\145\056\147\052\150\036\151\017\001\002\000\004\124" +
    "\u011f\001\002\000\016\003\uff64\016\uff64\036\uff64\061\uff64" +
    "\102\uff64\150\uff64\001\002\000\004\124\u0121\001\002\000" +
    "\020\003\uff57\016\uff57\031\uff57\036\uff57\061\uff57\102\uff57" +
    "\150\uff57\001\002\000\004\043\u0123\001\002\000\004\065" +
    "\u0125\001\002\000\004\124\u0131\001\002\000\010\031\uff5a" +
    "\051\u0128\150\uff5a\001\002\000\006\031\uff5c\150\u012d\001" +
    "\002\000\004\031\u012a\001\002\000\004\124\u0129\001\002" +
    "\000\004\031\uff5b\001\002\000\004\065\u012b\001\002\000" +
    "\004\124\uff5d\001\002\000\006\031\uff59\150\uff59\001\002" +
    "\000\006\117\204\123\u0130\001\002\000\006\117\030\123" +
    "\u012f\001\002\000\006\150\036\151\017\001\002\000\006" +
    "\150\036\151\017\001\002\000\016\003\uff5e\016\uff5e\036" +
    "\uff5e\061\uff5e\102\uff5e\150\uff5e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\020\002\011\003\005\004\003\005\013\006" +
    "\006\014\010\051\004\001\001\000\002\001\001\000\006" +
    "\052\227\055\226\001\001\000\014\004\225\005\013\006" +
    "\006\014\010\051\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\017\031\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\021\024" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\023\026\026\032\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\037\022\034\031\036\001\001" +
    "\000\004\030\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\007\047\010\057\011\052" +
    "\012\071\013\043\016\053\017\044\020\046\021\062\031" +
    "\036\033\045\035\061\037\063\040\054\041\060\042\073" +
    "\044\056\047\065\050\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\174\011\052\012\071\013\114\031\036\040\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\150" +
    "\046\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\057\011\052\012\071\013" +
    "\114\031\036\033\115\035\061\037\063\040\054\001\001" +
    "\000\016\010\113\011\052\012\071\013\114\031\036\040" +
    "\054\001\001\000\050\007\111\010\057\011\052\012\071" +
    "\013\043\016\053\017\044\020\046\021\062\031\036\033" +
    "\045\035\061\037\063\040\054\041\060\042\073\044\056" +
    "\047\065\050\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\110\031\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\057\011" +
    "\052\012\071\013\043\031\036\033\045\035\061\037\063" +
    "\040\054\042\106\044\056\047\065\050\064\001\001\000" +
    "\034\010\057\011\052\012\071\013\043\031\036\033\045" +
    "\035\061\037\063\040\054\042\104\044\056\047\065\050" +
    "\064\001\001\000\034\010\057\011\052\012\071\013\043" +
    "\031\036\033\045\035\061\037\063\040\054\042\102\044" +
    "\056\047\065\050\064\001\001\000\034\010\057\011\052" +
    "\012\071\013\043\031\036\033\045\035\061\037\063\040" +
    "\054\042\103\044\056\047\065\050\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\010" +
    "\057\011\052\012\071\013\043\031\036\033\045\035\061" +
    "\037\063\040\054\042\107\044\056\047\065\050\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\057\011\052\012\071\013" +
    "\114\031\036\035\122\037\063\040\054\001\001\000\002" +
    "\001\001\000\004\036\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\057\011\052\012\071\013\114\031\036\037\130\040" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\010\057\011\052\012\071\013\043\031\036\033\045\035" +
    "\061\037\063\040\054\042\133\044\056\047\065\050\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\010" +
    "\057\011\052\012\071\013\043\031\036\033\045\035\061" +
    "\037\063\040\054\042\136\044\056\047\065\050\064\001" +
    "\001\000\002\001\001\000\016\010\140\011\052\012\071" +
    "\013\114\031\036\040\054\001\001\000\002\001\001\000" +
    "\036\010\057\011\052\012\071\013\155\022\156\031\036" +
    "\033\045\035\061\037\063\040\054\043\157\044\160\047" +
    "\065\050\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\057\011\052\012\071\013\043" +
    "\031\036\033\045\035\061\037\063\040\054\044\154\047" +
    "\065\050\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\057\011\052\012\071\013\043\031\036\033\045\035" +
    "\061\037\063\040\054\044\162\047\065\050\064\001\001" +
    "\000\002\001\001\000\054\007\164\010\057\011\052\012" +
    "\071\013\043\016\053\017\044\020\046\021\062\031\036" +
    "\033\045\035\061\037\063\040\054\041\060\042\073\044" +
    "\056\047\065\050\064\105\166\106\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\007\171\010\057\011\052\012\071\013\043" +
    "\016\053\017\044\020\046\021\062\031\036\033\045\035" +
    "\061\037\063\040\054\041\060\042\073\044\056\047\065" +
    "\050\064\001\001\000\002\001\001\000\034\010\057\011" +
    "\052\012\071\013\043\031\036\033\045\035\061\037\063" +
    "\040\054\042\173\044\056\047\065\050\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\057\011\052" +
    "\012\071\013\043\031\036\033\045\035\061\037\063\040" +
    "\054\042\176\044\056\047\065\050\064\001\001\000\002" +
    "\001\001\000\034\010\057\011\052\012\071\013\043\031" +
    "\036\033\045\035\061\037\063\040\054\042\200\044\056" +
    "\047\065\050\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\205" +
    "\001\001\000\010\013\037\022\206\031\036\001\001\000" +
    "\004\030\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\213\032\025\001\001\000" +
    "\002\001\001\000\010\013\037\022\215\031\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\222\024\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u0105\006\375\014\010\032\u0103\051\004" +
    "\056\u0101\057\u0104\077\376\111\374\115\377\001\001\000" +
    "\002\001\001\000\004\117\231\001\001\000\010\053\232" +
    "\060\235\061\233\001\001\000\006\060\311\061\233\001" +
    "\001\000\044\013\237\031\036\050\253\062\265\063\261" +
    "\064\257\065\264\066\256\067\246\070\254\071\266\072" +
    "\244\073\270\104\243\107\240\110\255\116\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\362\031" +
    "\036\101\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\007\326\010\057\011\052\012\071\013\043\016" +
    "\053\017\044\020\046\021\062\031\036\033\045\035\061" +
    "\037\063\040\054\041\060\042\073\044\056\047\065\050" +
    "\064\074\355\001\001\000\006\013\353\031\036\001\001" +
    "\000\004\076\351\001\001\000\002\001\001\000\050\007" +
    "\346\010\057\011\052\012\071\013\043\016\053\017\044" +
    "\020\046\021\062\031\036\033\045\035\061\037\063\040" +
    "\054\041\060\042\073\044\056\047\065\050\064\001\001" +
    "\000\002\001\001\000\004\121\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\164\010\057\011\052\012\071\013\043\016" +
    "\053\017\044\020\046\021\062\031\036\033\045\035\061" +
    "\037\063\040\054\041\060\042\073\044\056\047\065\050" +
    "\064\105\272\106\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\057\011\052\012\071\013\043\031\036" +
    "\033\045\035\061\037\063\040\054\043\300\044\160\047" +
    "\065\050\064\001\001\000\002\001\001\000\034\010\057" +
    "\011\052\012\071\013\043\031\036\033\045\035\061\037" +
    "\063\040\054\043\302\044\160\047\065\050\064\001\001" +
    "\000\002\001\001\000\004\104\304\001\001\000\004\076" +
    "\305\001\001\000\002\001\001\000\004\123\307\001\001" +
    "\000\010\053\310\060\235\061\233\001\001\000\006\060" +
    "\311\061\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\007\164\010\057\011\052\012\071\013\043\016\053\017" +
    "\044\020\046\021\062\031\036\033\045\035\061\037\063" +
    "\040\054\041\060\042\073\044\056\047\065\050\064\105" +
    "\322\106\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\007\326\010\057\011\052\012" +
    "\071\013\043\016\053\017\044\020\046\021\062\031\036" +
    "\033\045\035\061\037\063\040\054\041\060\042\073\044" +
    "\056\047\065\050\064\074\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\331\060\235\061\233\001" +
    "\001\000\010\060\311\061\233\103\332\001\001\000\004" +
    "\075\335\001\001\000\010\053\345\060\235\061\233\001" +
    "\001\000\052\007\326\010\057\011\052\012\071\013\043" +
    "\016\053\017\044\020\046\021\062\031\036\033\045\035" +
    "\061\037\063\040\054\041\060\042\073\044\056\047\065" +
    "\050\064\074\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\053\344\060\235\061" +
    "\233\001\001\000\006\060\311\061\233\001\001\000\006" +
    "\060\311\061\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\007\357\010\057\011\052\012\071\013\043\016\053" +
    "\017\044\020\046\021\062\031\036\033\045\035\061\037" +
    "\063\040\054\041\060\042\073\044\056\047\065\050\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\364\001\001\000\002\001\001\000\052\007\326\010\057" +
    "\011\052\012\071\013\043\016\053\017\044\020\046\021" +
    "\062\031\036\033\045\035\061\037\063\040\054\041\060" +
    "\042\073\044\056\047\065\050\064\074\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\370\001\001\000\010\023\372\031\015\054\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\037\022\u0108" +
    "\031\036\001\001\000\004\030\u010d\001\001\000\002\001" +
    "\001\000\050\007\u010b\010\057\011\052\012\071\013\043" +
    "\016\053\017\044\020\046\021\062\031\036\033\045\035" +
    "\061\037\063\040\054\041\060\042\073\044\056\047\065" +
    "\050\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\375\051\004" +
    "\057\u0110\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\u0113\031\015\001\001\000\006\015\u0114\024\020" +
    "\001\001\000\002\001\001\000\010\013\037\022\u0116\031" +
    "\036\001\001\000\002\001\001\000\004\024\u0118\001\001" +
    "\000\002\001\001\000\010\013\037\022\u011a\031\036\001" +
    "\001\000\004\030\u011f\001\001\000\002\001\001\000\050" +
    "\007\u011d\010\057\011\052\012\071\013\043\016\053\017" +
    "\044\020\046\021\062\031\036\033\045\035\061\037\063" +
    "\040\054\041\060\042\073\044\056\047\065\050\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\u0123\001" +
    "\001\000\002\001\001\000\006\113\u0126\114\u0125\001\001" +
    "\000\006\032\u012d\115\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\037\022\u011a\031\036\001\001\000\010" +
    "\013\037\022\u0108\031\036\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if(message.equals("Syntax error"))
                message = "Error sintáctico";
        else if (message.equals("Couldn't repair and continue parse"))
		if(!action_obj.pila.empty())
                    message = "Fin del archivo sin completar la sentencia " + action_obj.pila.pop();
                else
                    message = "No se pudo recuperar para continuar el parseo";

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }

        m.append(" : "+message);
	System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        
	//System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   public Stack pila = new Stack();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaracion_componente ::= lista_identificador2 DOS_PUNTOS indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_componente",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaracion_componente ::= IDENTIFICADOR DOS_PUNTOS indicacion_subtipo inicializacion_opcion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_componente",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // lista_declaracion_componentes0 ::= lista_declaracion_componentes0 declaracion_componente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_componentes0",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // lista_declaracion_componentes0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_componentes0",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lista_componentes ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_componentes",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // lista_componentes ::= lista_declaracion_componentes0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_componentes",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // definicion_record ::= RECORD lista_componentes END RECORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_record",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaracion_record ::= TYPE IDENTIFICADOR IS definicion_record PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_record",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_expresiones_variante ::= lista_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lista_expresiones_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // llamada_funcion ::= nombre PAR_IZQ lista_expresiones_variante PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaracion_numero ::= lista_identificador2 DOS_PUNTOS CONSTANT ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_numero",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // declaracion_numero ::= IDENTIFICADOR DOS_PUNTOS CONSTANT ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_numero",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declaracion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaracion ::= declaracion_componente 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declaracion ::= declaracion_record 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // declaracion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // declaracion ::= declaracion_numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // designador_variante ::= designador 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador_variante",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // designador_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador_variante",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // iteracion_clausula_variante ::= WHILE condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // iteracion_clausula_variante ::= FOR IDENTIFICADOR IN REVERSE rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // iteracion_clausula_variante ::= FOR IDENTIFICADOR IN rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // iteracion_clausula_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // loop_basico ::= LOOP NT$4 secuencia_de_sentencias END LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 pila.pop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_basico",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$4 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pila.push("LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_loop ::= IDENTIFICADOR DOS_PUNTOS iteracion_clausula_variante loop_basico IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_loop",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia_loop ::= iteracion_clausula_variante loop_basico PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_loop",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // condicion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // else_variante ::= ELSE secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_variante",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // else_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_variante",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lista_elsif0 ::= lista_elsif0 ELSIF condicion THEN secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elsif0",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lista_elsif0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elsif0",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_if ::= IF NT$2 condicion THEN secuencia_de_sentencias lista_elsif0 else_variante END IF NT$3 PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
 pila.pop();
																	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 pila.push("IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_retorno ::= RETURN expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_retorno ::= RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // when_variante ::= WHEN condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_variante",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // when_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_variante",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // nombre_variante ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variante",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // nombre_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variante",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_get ::= GET PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_get",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_put ::= PUT PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_put",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_goto ::= GOTO nombre PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_goto",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_salida ::= EXIT nombre_variante when_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_salida",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_asignacion ::= nombre ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_nula ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_nula",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_llamada_funcion ::= llamada_funcion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamada_funcion",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_compuesta ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_compuesta ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_simple ::= sentencia_get 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_simple ::= sentencia_put 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_simple ::= sentencia_llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_simple ::= sentencia_goto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia_simple ::= sentencia_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia_simple ::= sentencia_salida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_simple ::= sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_simple ::= sentencia_nula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // etiqueta ::= ETIQUETA_IZQ IDENTIFICADOR ETIQUETA_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_etiqueta ::= lista_etiqueta etiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_etiqueta ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= lista_etiqueta sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= lista_etiqueta sentencia_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // secuencia_de_sentencias ::= secuencia_de_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // secuencia_de_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_cuerpo0 ::= lista_cuerpo0 cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_cuerpo0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_declarativa_item0 ::= lista_declarativa_item0 declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_declarativa_item0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parte_declarativa ::= lista_declarativa_item0 cuerpo lista_cuerpo0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_declarativa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parte_declarativa ::= lista_declarativa_item0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_declarativa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // especific_subprograma_es ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo IS 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = ds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR parte_formal IS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR IS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_subprograma ::= especific_subprograma_es parte_declarativa BEGIN NT$0 secuencia_de_sentencias END NT$1 designador_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!ese.equals(dv)) 
										System.out.println("Error en la linea "+ (dvleft+1) + " columna " 
										+ (dvright+1) + " : Se esperaba fin del procedimiento " + ese); 
									    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_subprograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
pila.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$0 ::= 
            {
              Object RESULT =null;
		int eseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ese = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
pila.push("BEGIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal_numerico ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal_numerico ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignador ::= NEW nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primario ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primario ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primario ::= asignador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primario ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= primario EXPONENTE primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= NOT primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= ABS primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_terminos ::= lista_terminos operador_suma termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_terminos ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_multiplicacion ::= REM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_suma ::= CONCATENAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_unario ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_unario ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_membresia ::= NOT IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_membresia ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_relacional ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_relacional ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operador_relacional ::= DISTINTO_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_simple ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_simple ::= operador_unario lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_simple ::= lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rango ::= expresion_simple RANGO expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relacion ::= expresion_simple operador_membresia rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relacion ::= expresion_simple operador_membresia indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relacion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relacion ::= expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_orelse ::= expresion_orelse OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_orelse ::= relacion OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_andthen ::= expresion_andthen AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_andthen ::= relacion AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_xor ::= expresion_xor XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_xor ::= relacion XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_or ::= expresion_or OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_or ::= relacion OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_and ::= expresion_and AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_and ::= relacion AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion_orelse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion_andthen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion_xor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_identificador2 ::= lista_identificador2 COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_identificador2 ::= IDENTIFICADOR COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicializacion_opcion ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicializacion_opcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modo ::= IN OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modo ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modo ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_parametro ::= lista_identificador2 DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_parametro ::= IDENTIFICADOR DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaracion_parametro ::= lista_declaracion_parametro PUNTO_Y_COMA declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaracion_parametro ::= declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // indicacion_subtipo ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parte_formal ::= PAR_IZQ lista_declaracion_parametro PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parte_formal_variante ::= parte_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_formal_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operador_simbolo ::= CADENA_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cl.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_simbolo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // designador ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // designador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especific_subprograma ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especific_subprograma ::= PROCEDURE IDENTIFICADOR parte_formal_variante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_subprograma ::= especific_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_subprograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombre ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unidad_compilacion ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidad_compilacion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_compilacion ::= lista_compilacion unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_compilacion ::= unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // raiz ::= lista_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

