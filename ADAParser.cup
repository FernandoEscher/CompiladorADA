/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/sequence
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/*---------------Declaracion de terminales y no terminales--------------------*/

/*Palabras reservadas*/
terminal ABORT, ABS, ABSTRACT, ACCEPT, ACCESS, ALIASED, ALL, AND, ARRAY, AT, BEGIN, BODY, CASE, CONSTANT, DECLARE, DELAY, DELTA, DIGITS, DO;
terminal ELSE, ELSIF, END, ENTRY, EXCEPTION, EXIT, FOR, FUNCTION, GENERIC, GOTO, IF, IN, IS, LIMITED, LOOP, MOD, NEW, NOT, NULL;
terminal OF, OR, OTHERS, OUT, PACKAGE, PRAGMA, PRIVATE, PROCEDURE, PROTECTED, RAISE, RANGE, RECORD, REM, RENAMES, REQUEUE, RETURN, REVERSE;
terminal SELECT, SEPARATE, SUBTYPE, TAGGED, TASK, TERMINATE, THEN, TYPE, UNTIL, USE, WHEN, WHILE, WITH, XOR;

/*Delimitadores*/
terminal CONCATENAR, TIC, PAR_DER, PAR_IZQ, MULTIPLICACION, MAS, COMA, MENOS, PUNTO, DIVISION, DOS_PUNTOS, PUNTO_Y_COMA, MENOR_QUE, IGUAL;
terminal MAYOR_QUE, BARRA_VERTICAL, FLECHA, RANGO, EXPONENTE, ASIGNACION, DISTINTO_DE, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE, ETIQUETA_DER;
terminal ETIQUETA_IZQ, INDEFINIDO;

/*Literales*/
terminal int ENTERO_LITERAL;
terminal char CARACTER_LITERAL;
terminal float REAL_LITERAL;
terminal String IDENTIFICADOR;
terminal String CADENA_LITERAL;

/*No terminales*/

non terminal raiz, lista_compilacion, unidad_compilacion, declaracion_subprograma, cuerpo_subprograma, expresion, primario, asignador, literal;
non terminal lista_nombre, nombre, especific_subprograma, parte_formal_variante, expresion_and, expresion_or, expresion_xor, expresion_andthen;
non terminal indicacion_subtipo, designador, parte_formal, lista_declaracion_parametro, declaracion_parametro, modo, inicializacion_opcion;
non terminal operador_simbolo, lista_identificador2, lista_terminos, operador_suma, termino, operador_multiplicacion, factor, literal_numerico;
non terminal expresion_orelse, relacion, rango, restriccion_rango, expresion_simple, operador_relacional, operador_membresia, operador_unario;

/*---------------Gramatica--------------------*/
start with raiz;

raiz				::= lista_compilacion
				;

lista_compilacion		::= unidad_compilacion
			  	  | lista_compilacion unidad_compilacion
				;

unidad_compilacion		::=  declaracion_subprograma
				  |  cuerpo_subprograma
				;
/*
lista_nombre			::= nombre
				  | lista_nombre COMA nombre
				;
*/

nombre				::= IDENTIFICADOR
			//	  | componente_indexado
			//	  | componente_seleccionado
			//	  | atributo
			//	  | llamado_funcion
			
				  | operador_simbolo
				;

declaracion_subprograma		::= especific_subprograma
				;

especific_subprograma		::= PROCEDURE IDENTIFICADOR parte_formal_variante
				  | FUNCTION designador parte_formal_variante RETURN indicacion_subtipo			
 				;

designador			::= IDENTIFICADOR
				  | operador_simbolo
				;

operador_simbolo		::= CADENA_LITERAL
				;

parte_formal_variante		::= 
				  | parte_formal
				;

parte_formal			::= PAR_DER lista_declaracion_parametro PAR_IZQ
				;

indicacion_subtipo		::= nombre
				;

lista_declaracion_parametro     ::= declaracion_parametro
				  | lista_declaracion_parametro PUNTO_Y_COMA declaracion_parametro
				;

declaracion_parametro 		::= IDENTIFICADOR DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion
				  | lista_identificador2 DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion
				;

modo				::= 
				  | IN
				  | OUT
				  | IN OUT
				;

inicializacion_opcion		::= 
				  | ASIGNACION expresion
				;

lista_identificador2		::= IDENTIFICADOR COMA IDENTIFICADOR
				  | lista_identificador2 COMA IDENTIFICADOR
				;

expresion 			::= relacion
				  | expresion_and
				  | expresion_or
				  | expresion_xor
				  | expresion_andthen
				  | expresion_orelse
				  ;

expresion_and			::= relacion AND relacion
				  | expresion_and AND relacion
				  ;

expresion_or			::= relacion OR relacion
				  | expresion_or OR relacion
				  ;

expresion_xor			::= relacion XOR relacion
				  | expresion_xor XOR relacion
				  ;

expresion_andthen		::= relacion AND THEN relacion
				  | expresion_andthen AND THEN relacion
				  ;

expresion_orelse		::= relacion OR ELSE relacion
				  | expresion_orelse OR ELSE relacion
				  ;

relacion			::= expresion_simple
				  | expresion_simple operador_relacional expresion_simple
				  | expresion_simple operador_membresia indicacion_subtipo
				  | expresion_simple operador_membresia rango
				  ;

rango				::= expresion_simple RANGO expresion_simple
				  ;
/*
restriccion_rango		::= RANGE rango
				  ;
*/
expresion_simple		::= lista_terminos
				  | operador_unario lista_terminos
				  ;

operador_relacional		::= IGUAL
				  | DISTINTO_DE
				  | MENOR_QUE
				  | MAYOR_QUE
				  | MAYOR_IGUAL_QUE
				  | MENOR_IGUAL_QUE
				  ;

operador_membresia		::= IN
				  | NOT IN
				  ;


operador_unario			::= MAS
				  | MENOS
				  ;

operador_suma			::= MAS
				  | MENOS
				  | CONCATENAR
				  ;

operador_multiplicacion		::= MULTIPLICACION
				  | DIVISION
				  | MOD
				  | REM
				  ;

lista_terminos			::= termino
				  | lista_terminos operador_suma termino
				  ;

termino				::= factor
				  | termino operador_multiplicacion factor
				  ;

factor				::= primario
				  | ABS primario
				  | NOT primario
				  | primario EXPONENTE primario
				  ;

primario			::= nombre
//				  | agregado
				  | asignador
//				  | expresion_calificada
				  | PAR_IZQ expresion PAR_DER
				  ;

asignador			::= NEW nombre
				  ;

literal				::= NULL
				  | literal_numerico
				  | CADENA_LITERAL
				  ;

literal_numerico 		::= ENTERO_LITERAL
				  | REAL_LITERAL
				  ; 




cuerpo_subprograma 		::= especific_subprograma_es 
					parte_declarativa 
				    BEGIN 
					secuencia_de_sentencias
				    excepcion_variante 
				    END designador_variante PUNTO_Y_COMA
				  ;

especific_subprograma_es	::= PROCEDURE IDENTIFICADOR IS
				  | PROCEDURE IDENTIFICADOR parte_formal IS
				  | FUNCION designador parte_formal_variante RETURN indicacion_subtipo IS
				  ;

parte_declarativa 		::= lista_declarativa_item0
				  | lista_declarativa_item0 lista_representacion_spec1 lista_componente_programa0
				  | lista_declarativa_item0 cuerpo_o_stub lista_componente_programa0
				  ;

lista_declarativa_item0		::= 
				  | lista_declarativa_item0 declaracion
				 // | lista_declarativa_item0 use_clause
				  ;

lista_componente_programa0	::= 
				  | lista_componente_programa0 componente_programa
				  ;

cuerpo_o_stub			::= cuerpo
				  | cuerpo_stub
				  ;

cuerpo				::= subprograma_cuerpo
				  | cuerpo_tarea
				  ;

secuencia_de_sentencias		::= sentencia
				  | secuencia_de_sentencias sentencia
				  ;

sentencia			::= lista_etiqueta sentencia_simple
				  | lista_etiqueta sentencia_compuesto
				  ;

lista_etiqueta			::= 
				  | lista_etiqueta etiqueta
				  ;

etiqueta  			::=  ETIQUETA_IZQ IDENTIFICADOR ETIQUETA_DER
				  ;

sentencia_simple		::= sentencia_nula
				  | sentencia_asignacion
				  | sentencia_salida
                                  | sentencia_retorno
                                  | sentencia_goto
				  | llamada_procedimiento
				  | sentencia_retraso
				  | sentencia_aborto
				  | sentencia_levantamiento
				  | sentencia_codigo
				  ;

sentencia_compuesta		::= sentencia_if
				  //| sentencia_case
				  | sentencia_loop
				  | sentencia_accept
				  //| sentencia_select
				  | bloque
				  ;


