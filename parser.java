
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 22 00:24:53 CST 2009
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 22 00:24:53 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\014\003\000\002\014\003\000\002\005\003\000" +
    "\002\015\005\000\002\015\007\000\002\024\003\000\002" +
    "\024\003\000\002\032\003\000\002\016\002\000\002\016" +
    "\003\000\002\025\005\000\002\023\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\007\000\002\027\007\000" +
    "\002\030\002\000\002\030\003\000\002\030\003\000\002" +
    "\030\004\000\002\031\002\000\002\031\004\000\002\033" +
    "\005\000\002\033\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\017\005\000\002\017\005\000\002" +
    "\020\005\000\002\020\005\000\002\021\005\000\002\021" +
    "\005\000\002\022\006\000\002\022\006\000\002\042\006" +
    "\000\002\042\006\000\002\043\003\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\044\005\000\002" +
    "\046\003\000\002\046\004\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\003\000\002\050\004\000" +
    "\002\051\003\000\002\051\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\034\003" +
    "\000\002\034\005\000\002\036\003\000\002\036\005\000" +
    "\002\040\003\000\002\040\004\000\002\040\004\000\002" +
    "\040\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\011\004\000\002\012\003" +
    "\000\002\012\003\000\002\041\003\000\002\041\003\000" +
    "\002\006\011\000\002\053\005\000\002\053\006\000\002" +
    "\053\010\000\002\054\003\000\002\054\005\000\002\057" +
    "\002\000\002\057\004\000\002\105\002\000\002\105\004" +
    "\000\002\061\003\000\002\055\003\000\002\055\004\000" +
    "\002\063\004\000\002\063\004\000\002\064\002\000\002" +
    "\064\004\000\002\067\005\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\066\003\000\002\066\003\000\002\070\004\000\002" +
    "\071\006\000\002\072\006\000\002\074\005\000\002\115" +
    "\007\000\002\116\007\000\002\106\002\000\002\106\003" +
    "\000\002\107\002\000\002\107\004\000\002\073\004\000" +
    "\002\073\005\000\002\075\013\000\002\110\002\000\002" +
    "\110\007\000\002\101\002\000\002\101\004\000\002\077" +
    "\003\000\002\076\005\000\002\076\010\000\002\103\006" +
    "\000\002\111\002\000\002\111\006\000\002\111\007\000" +
    "\002\111\004\000\002\056\002\000\002\056\003\000\002" +
    "\060\003\000\002\060\003\000\002\104\010\000\002\104" +
    "\010\000\002\052\007\000\002\113\002\000\002\113\003" +
    "\000\002\114\003\000\002\114\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\006\036\013\061\010\001\002\000\010\002" +
    "\uffff\036\uffff\061\uffff\001\002\000\012\016\uffa4\036\uffa4" +
    "\061\uffa4\150\uffa4\001\002\000\010\002\000\036\013\061" +
    "\010\001\002\000\010\002\ufffc\036\ufffc\061\ufffc\001\002" +
    "\000\004\150\207\001\002\000\014\002\ufff9\016\ufff9\036" +
    "\ufff9\061\ufff9\150\ufff9\001\002\000\004\002\206\001\002" +
    "\000\006\150\015\151\017\001\002\000\010\002\ufffd\036" +
    "\ufffd\061\ufffd\001\002\000\010\071\ufff6\114\ufff6\124\ufff6" +
    "\001\002\000\010\071\ufff5\114\ufff5\124\ufff5\001\002\000" +
    "\110\002\ufff4\013\ufff4\016\ufff4\036\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\050\ufff4\053\ufff4\061\ufff4\066\ufff4\071" +
    "\ufff4\101\ufff4\105\ufff4\110\ufff4\111\ufff4\113\ufff4\114\ufff4" +
    "\115\ufff4\116\ufff4\117\ufff4\120\ufff4\122\ufff4\124\ufff4\125" +
    "\ufff4\126\ufff4\127\ufff4\132\ufff4\133\ufff4\134\ufff4\135\ufff4" +
    "\136\ufff4\137\ufff4\150\ufff4\001\002\000\006\071\ufff3\114" +
    "\023\001\002\000\004\071\ufff2\001\002\000\004\071\203" +
    "\001\002\000\004\150\025\001\002\000\006\113\200\124" +
    "\201\001\002\000\006\117\172\123\173\001\002\000\006" +
    "\117\030\123\031\001\002\000\006\113\uffef\124\uffef\001" +
    "\002\000\004\150\171\001\002\000\012\042\033\055\032" +
    "\150\uffeb\151\uffeb\001\002\000\006\150\uffe9\151\uffe9\001" +
    "\002\000\010\055\170\150\uffea\151\uffea\001\002\000\006" +
    "\150\036\151\017\001\002\000\010\113\uffe7\124\uffe7\134" +
    "\041\001\002\000\104\002\ufffb\013\ufffb\016\ufffb\036\ufffb" +
    "\042\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\053\ufffb\061" +
    "\ufffb\066\ufffb\101\ufffb\105\ufffb\110\ufffb\111\ufffb\113\ufffb" +
    "\115\ufffb\116\ufffb\117\ufffb\120\ufffb\122\ufffb\124\ufffb\125" +
    "\ufffb\126\ufffb\127\ufffb\132\ufffb\133\ufffb\134\ufffb\135\ufffb" +
    "\136\ufffb\137\ufffb\150\ufffb\001\002\000\106\002\ufffa\013" +
    "\ufffa\016\ufffa\036\ufffa\042\ufffa\043\ufffa\045\ufffa\046\ufffa" +
    "\050\ufffa\053\ufffa\061\ufffa\066\ufffa\101\ufffa\105\ufffa\110" +
    "\ufffa\111\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa\117\ufffa" +
    "\120\ufffa\122\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\132" +
    "\ufffa\133\ufffa\134\ufffa\135\ufffa\136\ufffa\137\ufffa\150\ufffa" +
    "\001\002\000\024\002\ufff0\016\ufff0\036\ufff0\043\ufff0\061" +
    "\ufff0\113\ufff0\124\ufff0\134\ufff0\150\ufff0\001\002\000\030" +
    "\005\066\047\072\050\051\051\073\114\067\116\074\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\006" +
    "\113\uffec\124\uffec\001\002\000\024\005\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\114\uffc3\145\uffc3\147\uffc3\150\uffc3\151\uffc3" +
    "\001\002\000\064\013\uffb3\042\uffb3\045\uffb3\046\uffb3\050" +
    "\uffb3\053\uffb3\066\uffb3\101\uffb3\110\uffb3\111\uffb3\113\uffb3" +
    "\115\uffb3\116\uffb3\117\uffb3\120\uffb3\122\uffb3\124\uffb3\125" +
    "\uffb3\126\uffb3\127\uffb3\132\uffb3\133\uffb3\135\uffb3\136\uffb3" +
    "\137\uffb3\001\002\000\016\045\uffe1\053\166\101\uffe1\113" +
    "\uffe1\117\uffe1\124\uffe1\001\002\000\052\013\uffce\042\uffce" +
    "\045\uffce\050\uffce\053\uffce\101\uffce\110\uffce\111\117\113" +
    "\uffce\116\114\117\uffce\120\115\124\uffce\125\uffce\126\uffce" +
    "\127\uffce\132\uffce\135\uffce\136\uffce\137\uffce\001\002\000" +
    "\016\045\uffe0\101\uffe0\110\164\113\uffe0\117\uffe0\124\uffe0" +
    "\001\002\000\006\113\uffe6\124\uffe6\001\002\000\020\047" +
    "\072\051\073\114\067\145\056\147\052\150\036\151\017" +
    "\001\002\000\064\013\uffab\042\uffab\045\uffab\046\uffab\050" +
    "\uffab\053\uffab\066\uffab\101\uffab\110\uffab\111\uffab\113\uffab" +
    "\115\uffab\116\uffab\117\uffab\120\uffab\122\uffab\124\uffab\125" +
    "\uffab\126\uffab\127\uffab\132\uffab\133\uffab\135\uffab\136\uffab" +
    "\137\uffab\001\002\000\064\013\uffb2\042\uffb2\045\uffb2\046" +
    "\uffb2\050\uffb2\053\uffb2\066\uffb2\101\uffb2\110\uffb2\111\uffb2" +
    "\113\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\122\uffb2\124" +
    "\uffb2\125\uffb2\126\uffb2\127\uffb2\132\uffb2\133\uffb2\135\uffb2" +
    "\136\uffb2\137\uffb2\001\002\000\016\013\161\045\uffe2\101" +
    "\uffe2\113\uffe2\117\uffe2\124\uffe2\001\002\000\064\013\uffad" +
    "\042\uffad\045\uffad\046\uffad\050\uffad\053\uffad\066\uffad\101" +
    "\uffad\110\uffad\111\uffad\113\uffad\115\uffad\116\uffad\117\uffad" +
    "\120\uffad\122\uffad\124\uffad\125\uffad\126\uffad\127\uffad\132" +
    "\uffad\133\uffad\135\uffad\136\uffad\137\uffad\001\002\000\064" +
    "\013\uffac\042\uffac\045\uffac\046\uffac\050\uffac\053\uffac\066" +
    "\uffac\101\uffac\110\uffac\111\uffac\113\uffac\115\uffac\116\uffac" +
    "\117\uffac\120\uffac\122\uffac\124\uffac\125\uffac\126\uffac\127" +
    "\uffac\132\uffac\133\uffac\135\uffac\136\uffac\137\uffac\001\002" +
    "\000\042\013\uffd3\042\141\045\uffd3\050\147\053\uffd3\101" +
    "\uffd3\110\uffd3\113\uffd3\117\uffd3\124\uffd3\125\143\126\145" +
    "\127\140\135\142\136\150\137\144\001\002\000\016\045" +
    "\uffde\053\134\101\uffde\113\uffde\117\uffde\124\uffde\001\002" +
    "\000\064\013\uffb7\042\uffb7\045\uffb7\046\uffb7\050\uffb7\053" +
    "\uffb7\066\uffb7\101\uffb7\110\uffb7\111\uffb7\113\uffb7\115\uffb7" +
    "\116\uffb7\117\uffb7\120\uffb7\122\uffb7\124\uffb7\125\uffb7\126" +
    "\uffb7\127\uffb7\132\uffb7\133\132\135\uffb7\136\uffb7\137\uffb7" +
    "\001\002\000\062\013\uffb9\042\uffb9\045\uffb9\046\uffb9\050" +
    "\uffb9\053\uffb9\066\uffb9\101\uffb9\110\uffb9\111\uffb9\113\uffb9" +
    "\115\uffb9\116\uffb9\117\uffb9\120\uffb9\122\uffb9\124\uffb9\125" +
    "\uffb9\126\uffb9\127\uffb9\132\uffb9\135\uffb9\136\uffb9\137\uffb9" +
    "\001\002\000\016\013\127\045\uffdf\101\uffdf\113\uffdf\117" +
    "\uffdf\124\uffdf\001\002\000\062\013\uffbb\042\uffbb\045\uffbb" +
    "\046\122\050\uffbb\053\uffbb\066\124\101\uffbb\110\uffbb\111" +
    "\uffbb\113\uffbb\115\121\116\uffbb\117\uffbb\120\uffbb\122\123" +
    "\124\uffbb\125\uffbb\126\uffbb\127\uffbb\132\uffbb\135\uffbb\136" +
    "\uffbb\137\uffbb\001\002\000\024\005\066\047\072\050\051" +
    "\051\073\114\067\145\056\147\052\150\036\151\017\001" +
    "\002\000\020\047\072\051\073\114\067\145\056\147\052" +
    "\150\036\151\017\001\002\000\030\005\066\047\072\050" +
    "\051\051\073\114\067\116\074\120\043\145\056\147\052" +
    "\150\036\151\017\001\002\000\064\013\uffb1\042\uffb1\045" +
    "\uffb1\046\uffb1\050\uffb1\053\uffb1\066\uffb1\101\uffb1\110\uffb1" +
    "\111\uffb1\113\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\122" +
    "\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\132\uffb1\133\uffb1" +
    "\135\uffb1\136\uffb1\137\uffb1\001\002\000\022\013\076\045" +
    "\uffe3\053\100\101\uffe3\110\077\113\uffe3\117\uffe3\124\uffe3" +
    "\001\002\000\006\150\036\151\017\001\002\000\064\013" +
    "\uffae\042\uffae\045\uffae\046\uffae\050\uffae\053\uffae\066\uffae" +
    "\101\uffae\110\uffae\111\uffae\113\uffae\115\uffae\116\uffae\117" +
    "\uffae\120\uffae\122\uffae\124\uffae\125\uffae\126\uffae\127\uffae" +
    "\132\uffae\133\uffae\135\uffae\136\uffae\137\uffae\001\002\000" +
    "\024\005\uffc4\047\uffc4\050\uffc4\051\uffc4\114\uffc4\145\uffc4" +
    "\147\uffc4\150\uffc4\151\uffc4\001\002\000\064\013\uffaf\042" +
    "\uffaf\045\uffaf\046\uffaf\050\uffaf\053\uffaf\066\uffaf\101\uffaf" +
    "\110\uffaf\111\uffaf\113\uffaf\115\uffaf\116\uffaf\117\uffaf\120" +
    "\uffaf\122\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\132\uffaf" +
    "\133\uffaf\135\uffaf\136\uffaf\137\uffaf\001\002\000\032\005" +
    "\066\047\072\050\051\051\073\101\105\114\067\116\074" +
    "\120\043\145\056\147\052\150\036\151\017\001\002\000" +
    "\030\005\066\047\072\050\051\051\073\114\067\116\074" +
    "\120\043\145\056\147\052\150\036\151\017\001\002\000" +
    "\032\005\066\027\101\047\072\050\051\051\073\114\067" +
    "\116\074\120\043\145\056\147\052\150\036\151\017\001" +
    "\002\000\030\005\066\047\072\050\051\051\073\114\067" +
    "\116\074\120\043\145\056\147\052\150\036\151\017\001" +
    "\002\000\016\045\uffdb\053\uffdb\101\uffdb\113\uffdb\117\uffdb" +
    "\124\uffdb\001\002\000\016\045\uffd5\053\uffd5\101\uffd5\113" +
    "\uffd5\117\uffd5\124\uffd5\001\002\000\016\045\uffd9\101\uffd9" +
    "\110\uffd9\113\uffd9\117\uffd9\124\uffd9\001\002\000\030\005" +
    "\066\047\072\050\051\051\073\114\067\116\074\120\043" +
    "\145\056\147\052\150\036\151\017\001\002\000\016\013" +
    "\uffdd\045\uffdd\101\uffdd\113\uffdd\117\uffdd\124\uffdd\001\002" +
    "\000\016\013\uffd7\045\uffd7\101\uffd7\113\uffd7\117\uffd7\124" +
    "\uffd7\001\002\000\004\113\111\001\002\000\064\013\uffb0" +
    "\042\uffb0\045\uffb0\046\uffb0\050\uffb0\053\uffb0\066\uffb0\101" +
    "\uffb0\110\uffb0\111\uffb0\113\uffb0\115\uffb0\116\uffb0\117\uffb0" +
    "\120\uffb0\122\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\132" +
    "\uffb0\133\uffb0\135\uffb0\136\uffb0\137\uffb0\001\002\000\062" +
    "\013\uffb6\042\uffb6\045\uffb6\046\uffb6\050\uffb6\053\uffb6\066" +
    "\uffb6\101\uffb6\110\uffb6\111\uffb6\113\uffb6\115\uffb6\116\uffb6" +
    "\117\uffb6\120\uffb6\122\uffb6\124\uffb6\125\uffb6\126\uffb6\127" +
    "\uffb6\132\uffb6\135\uffb6\136\uffb6\137\uffb6\001\002\000\052" +
    "\013\uffcd\042\uffcd\045\uffcd\050\uffcd\053\uffcd\101\uffcd\110" +
    "\uffcd\111\117\113\uffcd\116\114\117\uffcd\120\115\124\uffcd" +
    "\125\uffcd\126\uffcd\127\uffcd\132\uffcd\135\uffcd\136\uffcd\137" +
    "\uffcd\001\002\000\024\005\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\114\uffc2\145\uffc2\147\uffc2\150\uffc2\151\uffc2\001\002\000" +
    "\024\005\uffc1\047\uffc1\050\uffc1\051\uffc1\114\uffc1\145\uffc1" +
    "\147\uffc1\150\uffc1\151\uffc1\001\002\000\024\005\066\047" +
    "\072\050\051\051\073\114\067\145\056\147\052\150\036" +
    "\151\017\001\002\000\024\005\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\114\uffc0\145\uffc0\147\uffc0\150\uffc0\151\uffc0\001\002" +
    "\000\062\013\uffba\042\uffba\045\uffba\046\122\050\uffba\053" +
    "\uffba\066\124\101\uffba\110\uffba\111\uffba\113\uffba\115\121" +
    "\116\uffba\117\uffba\120\uffba\122\123\124\uffba\125\uffba\126" +
    "\uffba\127\uffba\132\uffba\135\uffba\136\uffba\137\uffba\001\002" +
    "\000\024\005\uffbf\047\uffbf\050\uffbf\051\uffbf\114\uffbf\145" +
    "\uffbf\147\uffbf\150\uffbf\151\uffbf\001\002\000\024\005\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\114\uffbd\145\uffbd\147\uffbd\150" +
    "\uffbd\151\uffbd\001\002\000\024\005\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\114\uffbe\145\uffbe\147\uffbe\150\uffbe\151\uffbe\001" +
    "\002\000\024\005\uffbc\047\uffbc\050\uffbc\051\uffbc\114\uffbc" +
    "\145\uffbc\147\uffbc\150\uffbc\151\uffbc\001\002\000\024\005" +
    "\066\047\072\050\051\051\073\114\067\145\056\147\052" +
    "\150\036\151\017\001\002\000\062\013\uffb8\042\uffb8\045" +
    "\uffb8\046\uffb8\050\uffb8\053\uffb8\066\uffb8\101\uffb8\110\uffb8" +
    "\111\uffb8\113\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\122" +
    "\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\132\uffb8\135\uffb8" +
    "\136\uffb8\137\uffb8\001\002\000\004\101\130\001\002\000" +
    "\030\005\066\047\072\050\051\051\073\114\067\116\074" +
    "\120\043\145\056\147\052\150\036\151\017\001\002\000" +
    "\016\013\uffd6\045\uffd6\101\uffd6\113\uffd6\117\uffd6\124\uffd6" +
    "\001\002\000\020\047\072\051\073\114\067\145\056\147" +
    "\052\150\036\151\017\001\002\000\062\013\uffb4\042\uffb4" +
    "\045\uffb4\046\uffb4\050\uffb4\053\uffb4\066\uffb4\101\uffb4\110" +
    "\uffb4\111\uffb4\113\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4" +
    "\122\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\132\uffb4\135" +
    "\uffb4\136\uffb4\137\uffb4\001\002\000\004\027\135\001\002" +
    "\000\030\005\066\047\072\050\051\051\073\114\067\116" +
    "\074\120\043\145\056\147\052\150\036\151\017\001\002" +
    "\000\016\045\uffd4\053\uffd4\101\uffd4\113\uffd4\117\uffd4\124" +
    "\uffd4\001\002\000\030\005\066\047\072\050\051\051\073" +
    "\114\067\116\074\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\030\005\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\114\uffc9\116\uffc9\120\uffc9\145\uffc9\147\uffc9\150\uffc9\151" +
    "\uffc9\001\002\000\030\005\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\114\uffc6\116\uffc6\120\uffc6\145\uffc6\147\uffc6\150\uffc6\151" +
    "\uffc6\001\002\000\030\005\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\114\uffcb\116\uffcb\120\uffcb\145\uffcb\147\uffcb\150\uffcb\151" +
    "\uffcb\001\002\000\030\005\uffca\047\uffca\050\uffca\051\uffca" +
    "\114\uffca\116\uffca\120\uffca\145\uffca\147\uffca\150\uffca\151" +
    "\uffca\001\002\000\030\005\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\114\uffc7\116\uffc7\120\uffc7\145\uffc7\147\uffc7\150\uffc7\151" +
    "\uffc7\001\002\000\030\005\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\114\uffcc\116\uffcc\120\uffcc\145\uffcc\147\uffcc\150\uffcc\151" +
    "\uffcc\001\002\000\030\005\066\047\072\050\051\051\073" +
    "\114\067\116\074\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\004\042\151\001\002\000\030\005\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\114\uffc8\116\uffc8\120\uffc8\145" +
    "\uffc8\147\uffc8\150\uffc8\151\uffc8\001\002\000\030\005\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\114\uffc5\116\uffc5\120\uffc5\145" +
    "\uffc5\147\uffc5\150\uffc5\151\uffc5\001\002\000\022\013\uffd2" +
    "\045\uffd2\053\uffd2\101\uffd2\110\uffd2\113\uffd2\117\uffd2\124" +
    "\uffd2\001\002\000\044\013\ufff0\045\ufff0\046\uffb3\053\ufff0" +
    "\066\uffb3\101\ufff0\110\ufff0\111\uffb3\113\ufff0\115\uffb3\116" +
    "\uffb3\117\ufff0\120\uffb3\122\uffb3\124\ufff0\132\uffb3\133\uffb3" +
    "\001\002\000\022\013\uffd1\045\uffd1\053\uffd1\101\uffd1\110" +
    "\uffd1\113\uffd1\117\uffd1\124\uffd1\001\002\000\022\013\uffd0" +
    "\045\uffd0\053\uffd0\101\uffd0\110\uffd0\113\uffd0\117\uffd0\124" +
    "\uffd0\001\002\000\004\132\157\001\002\000\030\005\066" +
    "\047\072\050\051\051\073\114\067\116\074\120\043\145" +
    "\056\147\052\150\036\151\017\001\002\000\022\013\uffcf" +
    "\045\uffcf\053\uffcf\101\uffcf\110\uffcf\113\uffcf\117\uffcf\124" +
    "\uffcf\001\002\000\030\005\066\047\072\050\051\051\073" +
    "\114\067\116\074\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\016\013\uffdc\045\uffdc\101\uffdc\113\uffdc" +
    "\117\uffdc\124\uffdc\001\002\000\062\013\uffb5\042\uffb5\045" +
    "\uffb5\046\uffb5\050\uffb5\053\uffb5\066\uffb5\101\uffb5\110\uffb5" +
    "\111\uffb5\113\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5\122" +
    "\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5\132\uffb5\135\uffb5" +
    "\136\uffb5\137\uffb5\001\002\000\030\005\066\047\072\050" +
    "\051\051\073\114\067\116\074\120\043\145\056\147\052" +
    "\150\036\151\017\001\002\000\016\045\uffd8\101\uffd8\110" +
    "\uffd8\113\uffd8\117\uffd8\124\uffd8\001\002\000\030\005\066" +
    "\047\072\050\051\051\073\114\067\116\074\120\043\145" +
    "\056\147\052\150\036\151\017\001\002\000\016\045\uffda" +
    "\053\uffda\101\uffda\113\uffda\117\uffda\124\uffda\001\002\000" +
    "\006\150\uffe8\151\uffe8\001\002\000\006\117\uffe4\123\uffe4" +
    "\001\002\000\004\150\177\001\002\000\012\042\033\055" +
    "\032\150\uffeb\151\uffeb\001\002\000\006\150\036\151\017" +
    "\001\002\000\010\113\uffe7\124\uffe7\134\041\001\002\000" +
    "\006\113\uffed\124\uffed\001\002\000\006\117\uffe5\123\uffe5" +
    "\001\002\000\020\002\ufff1\016\ufff1\036\ufff1\043\ufff1\061" +
    "\ufff1\071\ufff1\150\ufff1\001\002\000\004\150\025\001\002" +
    "\000\006\113\uffee\124\uffee\001\002\000\006\150\036\151" +
    "\017\001\002\000\016\002\ufff7\016\ufff7\036\ufff7\043\205" +
    "\061\ufff7\150\ufff7\001\002\000\012\016\uffa7\036\uffa7\061" +
    "\uffa7\150\uffa7\001\002\000\004\002\001\001\002\000\020" +
    "\002\ufff3\016\ufff3\036\ufff3\043\211\061\ufff3\114\023\150" +
    "\ufff3\001\002\000\016\002\ufff2\016\ufff2\036\ufff2\043\213" +
    "\061\ufff2\150\ufff2\001\002\000\012\016\uffa9\036\uffa9\061" +
    "\uffa9\150\uffa9\001\002\000\014\002\ufff8\016\ufff8\036\ufff8" +
    "\061\ufff8\150\ufff8\001\002\000\012\016\uffa8\036\uffa8\061" +
    "\uffa8\150\uffa8\001\002\000\010\002\ufffe\036\ufffe\061\ufffe" +
    "\001\002\000\012\016\uffa6\036\013\061\010\150\371\001" +
    "\002\000\004\016\217\001\002\000\034\034\uff9b\035\uff9b" +
    "\040\uff9b\041\uff9b\045\uff9b\051\uff9b\071\uff9b\106\uff9b\141" +
    "\uff9b\143\uff9b\144\uff9b\150\uff9b\151\uff9b\001\002\000\036" +
    "\031\357\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045\uff9b\051" +
    "\uff9b\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b\150\uff9b" +
    "\151\uff9b\001\002\000\034\034\223\035\246\040\226\041" +
    "\234\045\uff79\051\247\071\232\106\227\141\236\143\235" +
    "\144\253\150\244\151\017\001\002\000\042\027\uff9f\030" +
    "\uff9f\031\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f\045\uff9f" +
    "\051\uff9f\071\uff9f\106\uff9f\141\uff9f\143\uff9f\144\uff9f\150" +
    "\uff9f\151\uff9f\001\002\000\012\105\uff88\124\uff88\150\036" +
    "\151\017\001\002\000\006\114\343\134\342\001\002\000" +
    "\042\027\uff92\030\uff92\031\uff92\034\uff92\035\uff92\040\uff92" +
    "\041\uff92\045\uff92\051\uff92\071\uff92\106\uff92\141\uff92\143" +
    "\uff92\144\uff92\150\uff92\151\uff92\001\002\000\006\150\036" +
    "\151\017\001\002\000\030\005\066\047\072\050\051\051" +
    "\073\114\067\116\074\120\043\145\056\147\052\150\036" +
    "\151\017\001\002\000\004\045\276\001\002\000\042\027" +
    "\uff90\030\uff90\031\uff90\034\uff90\035\uff90\040\uff90\041\uff90" +
    "\045\uff90\051\uff90\071\uff90\106\uff90\141\uff90\143\uff90\144" +
    "\uff90\150\uff90\151\uff90\001\002\000\032\005\066\047\072" +
    "\050\051\051\073\114\067\116\074\120\043\124\333\145" +
    "\056\147\052\150\036\151\017\001\002\000\042\027\uff96" +
    "\030\uff96\031\uff96\034\uff96\035\uff96\040\uff96\041\uff96\045" +
    "\uff96\051\uff96\071\uff96\106\uff96\141\uff96\143\uff96\144\uff96" +
    "\150\uff96\151\uff96\001\002\000\030\005\066\047\072\050" +
    "\051\051\073\114\067\116\074\120\043\145\056\147\052" +
    "\150\036\151\017\001\002\000\004\114\307\001\002\000" +
    "\004\150\305\001\002\000\042\027\uff93\030\uff93\031\uff93" +
    "\034\uff93\035\uff93\040\uff93\041\uff93\045\uff93\051\uff93\071" +
    "\uff93\106\uff93\141\uff93\143\uff93\144\uff93\150\uff93\151\uff93" +
    "\001\002\000\042\027\uff95\030\uff95\031\uff95\034\uff95\035" +
    "\uff95\040\uff95\041\uff95\045\uff95\051\uff95\071\uff95\106\uff95" +
    "\141\uff95\143\uff95\144\uff95\150\uff95\151\uff95\001\002\000" +
    "\042\027\uff91\030\uff91\031\uff91\034\uff91\035\uff91\040\uff91" +
    "\041\uff91\045\uff91\051\uff91\071\uff91\106\uff91\141\uff91\143" +
    "\uff91\144\uff91\150\uff91\151\uff91\001\002\000\042\027\uff97" +
    "\030\uff97\031\uff97\034\uff97\035\uff97\040\uff97\041\uff97\045" +
    "\uff97\051\uff97\071\uff97\106\uff97\141\uff97\143\uff97\144\uff97" +
    "\150\uff97\151\uff97\001\002\000\034\034\uff9a\035\uff9a\040" +
    "\uff9a\041\uff9a\045\uff9a\051\uff9a\071\uff9a\106\uff9a\141\uff9a" +
    "\143\uff9a\144\uff9a\150\uff9a\151\uff9a\001\002\000\010\114" +
    "\ufffb\123\273\134\ufffb\001\002\000\042\027\uff9c\030\uff9c" +
    "\031\uff9c\034\uff9c\035\uff9c\040\uff9c\041\uff9c\045\uff9c\051" +
    "\uff9c\071\uff9c\106\uff9c\141\uff9c\143\uff9c\144\uff9c\150\uff9c" +
    "\151\uff9c\001\002\000\004\150\266\001\002\000\004\124" +
    "\265\001\002\000\042\027\uff98\030\uff98\031\uff98\034\uff98" +
    "\035\uff98\040\uff98\041\uff98\045\uff98\051\uff98\071\uff98\106" +
    "\uff98\141\uff98\143\uff98\144\uff98\150\uff98\151\uff98\001\002" +
    "\000\042\027\uff9d\030\uff9d\031\uff9d\034\uff9d\035\uff9d\040" +
    "\uff9d\041\uff9d\045\uff9d\051\uff9d\071\uff9d\106\uff9d\141\uff9d" +
    "\143\uff9d\144\uff9d\150\uff9d\151\uff9d\001\002\000\042\027" +
    "\uff94\030\uff94\031\uff94\034\uff94\035\uff94\040\uff94\041\uff94" +
    "\045\uff94\051\uff94\071\uff94\106\uff94\141\uff94\143\uff94\144" +
    "\uff94\150\uff94\151\uff94\001\002\000\004\114\255\001\002" +
    "\000\042\027\uff8f\030\uff8f\031\uff8f\034\uff8f\035\uff8f\040" +
    "\uff8f\041\uff8f\045\uff8f\051\uff8f\071\uff8f\106\uff8f\141\uff8f" +
    "\143\uff8f\144\uff8f\150\uff8f\151\uff8f\001\002\000\032\005" +
    "\066\047\072\050\051\051\073\113\uff6e\114\067\116\074" +
    "\120\043\145\056\147\052\150\036\151\017\001\002\000" +
    "\006\113\uff6c\117\uff6c\001\002\000\006\113\uff6d\117\263" +
    "\001\002\000\004\113\261\001\002\000\004\124\262\001" +
    "\002\000\042\027\uff89\030\uff89\031\uff89\034\uff89\035\uff89" +
    "\040\uff89\041\uff89\045\uff89\051\uff89\071\uff89\106\uff89\141" +
    "\uff89\143\uff89\144\uff89\150\uff89\151\uff89\001\002\000\030" +
    "\005\066\047\072\050\051\051\073\114\067\116\074\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\006" +
    "\113\uff6b\117\uff6b\001\002\000\042\027\uff8e\030\uff8e\031" +
    "\uff8e\034\uff8e\035\uff8e\040\uff8e\041\uff8e\045\uff8e\051\uff8e" +
    "\071\uff8e\106\uff8e\141\uff8e\143\uff8e\144\uff8e\150\uff8e\151" +
    "\uff8e\001\002\000\004\042\267\001\002\000\032\005\066" +
    "\047\072\050\051\051\073\072\271\114\067\116\074\120" +
    "\043\145\056\147\052\150\036\151\017\001\002\000\004" +
    "\045\uff78\001\002\000\030\005\066\047\072\050\051\051" +
    "\073\114\067\116\074\120\043\145\056\147\052\150\036" +
    "\151\017\001\002\000\004\045\uff77\001\002\000\010\035" +
    "\246\045\uff79\106\227\001\002\000\004\045\276\001\002" +
    "\000\004\150\303\001\002\000\034\034\uff9b\035\uff9b\040" +
    "\uff9b\041\uff9b\045\uff9b\051\uff9b\071\uff9b\106\uff9b\141\uff9b" +
    "\143\uff9b\144\uff9b\150\uff9b\151\uff9b\001\002\000\036\031" +
    "\301\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045\uff9b\051\uff9b" +
    "\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b\150\uff9b\151" +
    "\uff9b\001\002\000\042\027\uff9e\030\uff9e\031\uff9e\034\uff9e" +
    "\035\uff9e\040\uff9e\041\uff9e\045\uff9e\051\uff9e\071\uff9e\106" +
    "\uff9e\141\uff9e\143\uff9e\144\uff9e\150\uff9e\151\uff9e\001\002" +
    "\000\004\045\302\001\002\000\006\124\uff7a\150\uff7a\001" +
    "\002\000\004\124\304\001\002\000\042\027\uff7b\030\uff7b" +
    "\031\uff7b\034\uff7b\035\uff7b\040\uff7b\041\uff7b\045\uff7b\051" +
    "\uff7b\071\uff7b\106\uff7b\141\uff7b\143\uff7b\144\uff7b\150\uff7b" +
    "\151\uff7b\001\002\000\004\140\306\001\002\000\034\034" +
    "\uff99\035\uff99\040\uff99\041\uff99\045\uff99\051\uff99\071\uff99" +
    "\106\uff99\141\uff99\143\uff99\144\uff99\150\uff99\151\uff99\001" +
    "\002\000\032\005\066\047\072\050\051\051\073\113\uff6e" +
    "\114\067\116\074\120\043\145\056\147\052\150\036\151" +
    "\017\001\002\000\004\113\311\001\002\000\004\124\312" +
    "\001\002\000\042\027\uff8a\030\uff8a\031\uff8a\034\uff8a\035" +
    "\uff8a\040\uff8a\041\uff8a\045\uff8a\051\uff8a\071\uff8a\106\uff8a" +
    "\141\uff8a\143\uff8a\144\uff8a\150\uff8a\151\uff8a\001\002\000" +
    "\004\101\315\001\002\000\010\045\uff7d\101\uff7d\124\uff7d" +
    "\001\002\000\034\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045" +
    "\uff9b\051\uff9b\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b" +
    "\150\uff9b\151\uff9b\001\002\000\042\027\uff81\030\uff81\031" +
    "\uff81\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045\uff9b\051\uff9b" +
    "\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b\150\uff9b\151" +
    "\uff9b\001\002\000\010\027\320\030\321\031\uff7f\001\002" +
    "\000\034\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045\uff9b\051" +
    "\uff9b\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b\150\uff9b" +
    "\151\uff9b\001\002\000\030\005\066\047\072\050\051\051" +
    "\073\114\067\116\074\120\043\145\056\147\052\150\036" +
    "\151\017\001\002\000\004\031\323\001\002\000\004\041" +
    "\324\001\002\000\004\124\325\001\002\000\042\027\uff82" +
    "\030\uff82\031\uff82\034\uff82\035\uff82\040\uff82\041\uff82\045" +
    "\uff82\051\uff82\071\uff82\106\uff82\141\uff82\143\uff82\144\uff82" +
    "\150\uff82\151\uff82\001\002\000\004\101\327\001\002\000" +
    "\034\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045\uff9b\051\uff9b" +
    "\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b\150\uff9b\151" +
    "\uff9b\001\002\000\042\027\uff80\030\uff80\031\uff80\034\uff9b" +
    "\035\uff9b\040\uff9b\041\uff9b\045\uff9b\051\uff9b\071\uff9b\106" +
    "\uff9b\141\uff9b\143\uff9b\144\uff9b\150\uff9b\151\uff9b\001\002" +
    "\000\036\031\uff7e\034\uff9b\035\uff9b\040\uff9b\041\uff9b\045" +
    "\uff9b\051\uff9b\071\uff9b\106\uff9b\141\uff9b\143\uff9b\144\uff9b" +
    "\150\uff9b\151\uff9b\001\002\000\004\124\334\001\002\000" +
    "\042\027\uff84\030\uff84\031\uff84\034\uff84\035\uff84\040\uff84" +
    "\041\uff84\045\uff84\051\uff84\071\uff84\106\uff84\141\uff84\143" +
    "\uff84\144\uff84\150\uff84\151\uff84\001\002\000\042\027\uff83" +
    "\030\uff83\031\uff83\034\uff83\035\uff83\040\uff83\041\uff83\045" +
    "\uff83\051\uff83\071\uff83\106\uff83\141\uff83\143\uff83\144\uff83" +
    "\150\uff83\151\uff83\001\002\000\004\124\336\001\002\000" +
    "\042\027\uff7c\030\uff7c\031\uff7c\034\uff7c\035\uff7c\040\uff7c" +
    "\041\uff7c\045\uff7c\051\uff7c\071\uff7c\106\uff7c\141\uff7c\143" +
    "\uff7c\144\uff7c\150\uff7c\151\uff7c\001\002\000\004\045\uff76" +
    "\001\002\000\004\124\341\001\002\000\042\027\uff8b\030" +
    "\uff8b\031\uff8b\034\uff8b\035\uff8b\040\uff8b\041\uff8b\045\uff8b" +
    "\051\uff8b\071\uff8b\106\uff8b\141\uff8b\143\uff8b\144\uff8b\150" +
    "\uff8b\151\uff8b\001\002\000\030\005\066\047\072\050\051" +
    "\051\073\114\067\116\074\120\043\145\056\147\052\150" +
    "\036\151\017\001\002\000\032\005\066\047\072\050\051" +
    "\051\073\113\uff6e\114\067\116\074\120\043\145\056\147" +
    "\052\150\036\151\017\001\002\000\004\113\345\001\002" +
    "\000\004\124\346\001\002\000\042\027\uff6f\030\uff6f\031" +
    "\uff6f\034\uff6f\035\uff6f\040\uff6f\041\uff6f\045\uff6f\051\uff6f" +
    "\071\uff6f\106\uff6f\141\uff6f\143\uff6f\144\uff6f\150\uff6f\151" +
    "\uff6f\001\002\000\004\124\350\001\002\000\042\027\uff8d" +
    "\030\uff8d\031\uff8d\034\uff8d\035\uff8d\040\uff8d\041\uff8d\045" +
    "\uff8d\051\uff8d\071\uff8d\106\uff8d\141\uff8d\143\uff8d\144\uff8d" +
    "\150\uff8d\151\uff8d\001\002\000\006\105\353\124\uff86\001" +
    "\002\000\006\105\uff87\124\uff87\001\002\000\030\005\066" +
    "\047\072\050\051\051\073\114\067\116\074\120\043\145" +
    "\056\147\052\150\036\151\017\001\002\000\004\124\355" +
    "\001\002\000\042\027\uff8c\030\uff8c\031\uff8c\034\uff8c\035" +
    "\uff8c\040\uff8c\041\uff8c\045\uff8c\051\uff8c\071\uff8c\106\uff8c" +
    "\141\uff8c\143\uff8c\144\uff8c\150\uff8c\151\uff8c\001\002\000" +
    "\004\124\uff85\001\002\000\010\124\uff75\150\015\151\017" +
    "\001\002\000\004\124\362\001\002\000\004\124\uff74\001" +
    "\002\000\012\002\uffaa\016\uffaa\036\uffaa\061\uffaa\001\002" +
    "\000\010\016\uffa0\036\uffa0\061\uffa0\001\002\000\012\016" +
    "\uff73\036\uff73\061\uff73\150\uff73\001\002\000\012\016\uffa3" +
    "\036\uffa3\061\uffa3\150\uffa3\001\002\000\006\117\030\123" +
    "\u0109\001\002\000\010\016\uffa2\036\uffa2\061\uffa2\001\002" +
    "\000\012\016\uff72\036\uff72\061\uff72\150\uff72\001\002\000" +
    "\006\117\172\123\372\001\002\000\004\021\373\001\002" +
    "\000\004\134\374\001\002\000\030\005\066\047\072\050" +
    "\051\051\073\114\067\116\074\120\043\145\056\147\052" +
    "\150\036\151\017\001\002\000\004\124\376\001\002\000" +
    "\012\016\uff71\036\uff71\061\uff71\150\uff71\001\002\000\010" +
    "\016\uffa5\036\u0102\061\u0101\001\002\000\010\016\uffa1\036" +
    "\uffa1\061\uffa1\001\002\000\004\150\u0107\001\002\000\006" +
    "\150\015\151\017\001\002\000\006\071\ufff3\114\023\001" +
    "\002\000\004\071\u0105\001\002\000\006\150\036\151\017" +
    "\001\002\000\004\043\205\001\002\000\006\043\211\114" +
    "\023\001\002\000\004\043\213\001\002\000\004\021\u010a" +
    "\001\002\000\004\134\u010b\001\002\000\030\005\066\047" +
    "\072\050\051\051\073\114\067\116\074\120\043\145\056" +
    "\147\052\150\036\151\017\001\002\000\004\124\u010d\001" +
    "\002\000\012\016\uff70\036\uff70\061\uff70\150\uff70\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\020\002\011\003\005\004\003\005\013\006" +
    "\006\015\010\053\004\001\001\000\002\001\001\000\006" +
    "\054\215\057\214\001\001\000\014\004\213\005\013\006" +
    "\006\015\010\053\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\017\032\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\021\025" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\023\027\026\033\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\037\023\034\032\036\001\001" +
    "\000\004\031\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\047\010\060\011\052" +
    "\012\067\014\043\017\053\020\044\021\046\022\062\032" +
    "\036\034\045\036\063\040\061\041\054\042\057\043\070" +
    "\046\056\051\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\162\011\052\012\067\014\043\032\036\041\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\145\050\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\124\001\001\000\024" +
    "\010\060\011\052\012\067\014\043\032\036\034\112\036" +
    "\063\040\061\041\054\001\001\000\016\010\111\011\052" +
    "\012\067\014\043\032\036\041\054\001\001\000\046\007" +
    "\107\010\060\011\052\012\067\014\043\017\053\020\044" +
    "\021\046\022\062\032\036\034\045\036\063\040\061\041" +
    "\054\042\057\043\070\046\056\051\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\074\032\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\060\011\052\012\067\014\043\032\036\034" +
    "\045\036\063\040\061\041\054\043\105\046\056\051\064" +
    "\001\001\000\032\010\060\011\052\012\067\014\043\032" +
    "\036\034\045\036\063\040\061\041\054\043\103\046\056" +
    "\051\064\001\001\000\032\010\060\011\052\012\067\014" +
    "\043\032\036\034\045\036\063\040\061\041\054\043\101" +
    "\046\056\051\064\001\001\000\032\010\060\011\052\012" +
    "\067\014\043\032\036\034\045\036\063\040\061\041\054" +
    "\043\102\046\056\051\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\060\011\052" +
    "\012\067\014\043\032\036\034\045\036\063\040\061\041" +
    "\054\043\106\046\056\051\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\060\011\052\012\067\014" +
    "\043\032\036\036\117\040\061\041\054\001\001\000\002" +
    "\001\001\000\004\037\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\060\011\052\012\067\014\043\032\036\040\125\041" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\060\011\052\012\067\014\043\032\036\034\045\036" +
    "\063\040\061\041\054\043\130\046\056\051\064\001\001" +
    "\000\002\001\001\000\016\010\132\011\052\012\067\014" +
    "\043\032\036\041\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\010\060\011\052\012\067\014\043\032" +
    "\036\034\045\036\063\040\061\041\054\043\135\046\056" +
    "\051\064\001\001\000\002\001\001\000\034\010\060\011" +
    "\052\012\067\014\152\023\153\032\036\034\045\036\063" +
    "\040\061\041\054\044\154\046\155\051\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\060\011\052\012\067\014\043\032\036\034\045\036\063" +
    "\040\061\041\054\046\151\051\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\060\011\052\012\067\014\043" +
    "\032\036\034\045\036\063\040\061\041\054\046\157\051" +
    "\064\001\001\000\002\001\001\000\032\010\060\011\052" +
    "\012\067\014\043\032\036\034\045\036\063\040\061\041" +
    "\054\043\161\046\056\051\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\060\011\052\012\067\014" +
    "\043\032\036\034\045\036\063\040\061\041\054\043\164" +
    "\046\056\051\064\001\001\000\002\001\001\000\032\010" +
    "\060\011\052\012\067\014\043\032\036\034\045\036\063" +
    "\040\061\041\054\043\166\046\056\051\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\173\001\001\000\010\014\037\023" +
    "\174\032\036\001\001\000\004\031\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\201\033\025\001\001\000\002\001\001\000\010\014\037" +
    "\023\203\032\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\211\025\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\367\006\362" +
    "\015\010\033\365\053\004\060\364\061\366\104\363\001" +
    "\001\000\002\001\001\000\010\055\217\063\221\064\220" +
    "\001\001\000\006\063\277\064\220\001\001\000\042\014" +
    "\223\032\036\052\236\065\250\066\244\067\242\070\247" +
    "\071\241\072\232\073\237\074\251\075\230\076\253\111" +
    "\227\115\224\116\240\001\001\000\002\001\001\000\010" +
    "\014\351\032\036\106\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\337\032\036\001\001\000\050" +
    "\007\313\010\060\011\052\012\067\014\043\017\053\020" +
    "\044\021\046\022\062\032\036\034\045\036\063\040\061" +
    "\041\054\042\057\043\070\046\056\051\064\077\336\001" +
    "\001\000\004\103\334\001\001\000\002\001\001\000\046" +
    "\007\331\010\060\011\052\012\067\014\043\017\053\020" +
    "\044\021\046\022\062\032\036\034\045\036\063\040\061" +
    "\041\054\042\057\043\070\046\056\051\064\001\001\000" +
    "\002\001\001\000\050\007\313\010\060\011\052\012\067" +
    "\014\043\017\053\020\044\021\046\022\062\032\036\034" +
    "\045\036\063\040\061\041\054\042\057\043\070\046\056" +
    "\051\064\077\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\007\255\010\060\011\052" +
    "\012\067\014\043\017\053\020\044\021\046\022\062\032" +
    "\036\034\045\036\063\040\061\041\054\042\057\043\070" +
    "\046\056\051\064\113\257\114\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\007\263\010\060\011\052\012" +
    "\067\014\043\017\053\020\044\021\046\022\062\032\036" +
    "\034\045\036\063\040\061\041\054\042\057\043\070\046" +
    "\056\051\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\060\011\052\012\067\014" +
    "\043\032\036\034\045\036\063\040\061\041\054\044\267" +
    "\046\155\051\064\001\001\000\002\001\001\000\032\010" +
    "\060\011\052\012\067\014\043\032\036\034\045\036\063" +
    "\040\061\041\054\044\271\046\155\051\064\001\001\000" +
    "\002\001\001\000\004\111\273\001\001\000\004\103\274" +
    "\001\001\000\002\001\001\000\010\055\276\063\221\064" +
    "\220\001\001\000\006\063\277\064\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\007\255\010\060\011\052\012\067\014\043\017" +
    "\053\020\044\021\046\022\062\032\036\034\045\036\063" +
    "\040\061\041\054\042\057\043\070\046\056\051\064\113" +
    "\307\114\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\315\063\221\064\220\001\001\000\010\063\277" +
    "\064\220\110\316\001\001\000\004\101\321\001\001\000" +
    "\010\055\330\063\221\064\220\001\001\000\050\007\313" +
    "\010\060\011\052\012\067\014\043\017\053\020\044\021" +
    "\046\022\062\032\036\034\045\036\063\040\061\041\054" +
    "\042\057\043\070\046\056\051\064\077\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\055\327\063\221\064" +
    "\220\001\001\000\006\063\277\064\220\001\001\000\006" +
    "\063\277\064\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\007\346\010\060\011\052\012\067\014\043\017\053" +
    "\020\044\021\046\022\062\032\036\034\045\036\063\040" +
    "\061\041\054\042\057\043\070\046\056\051\064\001\001" +
    "\000\052\007\255\010\060\011\052\012\067\014\043\017" +
    "\053\020\044\021\046\022\062\032\036\034\045\036\063" +
    "\040\061\041\054\042\057\043\070\046\056\051\064\113" +
    "\343\114\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\353\001\001\000\002\001\001\000\050\007\313" +
    "\010\060\011\052\012\067\014\043\017\053\020\044\021" +
    "\046\022\062\032\036\034\045\036\063\040\061\041\054" +
    "\042\057\043\070\046\056\051\064\077\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\360\032\015\056\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\007\374\010\060\011" +
    "\052\012\067\014\043\017\053\020\044\021\046\022\062" +
    "\032\036\034\045\036\063\040\061\041\054\042\057\043" +
    "\070\046\056\051\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\362\053\004\061\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\u0102\032\015" +
    "\001\001\000\006\016\u0103\025\020\001\001\000\002\001" +
    "\001\000\010\014\037\023\u0105\032\036\001\001\000\002" +
    "\001\001\000\004\025\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\007\u010b\010\060" +
    "\011\052\012\067\014\043\017\053\020\044\021\046\022" +
    "\062\032\036\034\045\036\063\040\061\041\054\042\057" +
    "\043\070\046\056\051\064\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	    
	    public void report_error(String message, Object info) {
	   
		StringBuffer m = new StringBuffer("Error");
	   
		if (info instanceof java_cup.runtime.Symbol) {
		    java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
	   
		    if (s.left >= 0) {                
			m.append(" in line "+(s.left+1));   
			if (s.right >= 0)                    
			    m.append(", column "+(s.right+1));
		    }
		}
	   
		m.append(" : "+message);
	   
		System.err.println(m);
	    }
	   
	    public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	    }
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // lista_expresiones_variante ::= lista_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // lista_expresiones_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones_variante",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // llamada_funcion ::= nombre PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // declaracion_numero ::= lista_identificador2 DOS_PUNTOS CONSTANT ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_numero",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // declaracion_numero ::= IDENTIFICADOR DOS_PUNTOS CONSTANT ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_numero",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declaracion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declaracion ::= declaracion_numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // designador_variante ::= designador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador_variante",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // designador_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador_variante",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // iteracion_clausula_variante ::= WHILE condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // iteracion_clausula_variante ::= FOR IDENTIFICADOR IN REVERSE rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // iteracion_clausula_variante ::= FOR IDENTIFICADOR IN rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // iteracion_clausula_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion_clausula_variante",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // loop_basico ::= LOOP secuencia_de_sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_basico",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_loop ::= IDENTIFICADOR DOS_PUNTOS iteracion_clausula_variante loop_basico IDENTIFICADOR PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_loop",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_loop ::= iteracion_clausula_variante loop_basico PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_loop",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condicion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // else_variante ::= ELSE secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_variante",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // else_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_variante",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lista_elsif0 ::= lista_elsif0 ELSIF condicion THEN secuencia_de_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elsif0",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lista_elsif0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elsif0",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_if ::= IF condicion THEN secuencia_de_sentencias lista_elsif0 else_variante END IF PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_retorno ::= RETURN expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_retorno ::= RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_retorno",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // when_variante ::= WHEN condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_variante",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // when_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_variante",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // nombre_variante ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variante",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // nombre_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variante",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_get ::= GET PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_get",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_put ::= PUT PAR_IZQ lista_expresiones_variante PAR_DER PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_put",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_goto ::= GOTO nombre PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_goto",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_salida ::= EXIT nombre_variante when_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_salida",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_asignacion ::= nombre ASIGNACION expresion PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_asignacion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_nula ::= NULL PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_nula",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_compuesta ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia_compuesta ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_compuesta",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia_simple ::= sentencia_get 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_simple ::= sentencia_put 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_simple ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_simple ::= sentencia_goto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_simple ::= sentencia_retorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_simple ::= sentencia_salida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia_simple ::= sentencia_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia_simple ::= sentencia_nula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // etiqueta ::= ETIQUETA_IZQ IDENTIFICADOR ETIQUETA_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_etiqueta ::= lista_etiqueta etiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_etiqueta ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_etiqueta",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= lista_etiqueta sentencia_compuesta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= lista_etiqueta sentencia_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // secuencia_de_sentencias ::= secuencia_de_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // secuencia_de_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secuencia_de_sentencias",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_cuerpo0 ::= lista_cuerpo0 cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_cuerpo0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_cuerpo0",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_declarativa_item0 ::= lista_declarativa_item0 declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_declarativa_item0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declarativa_item0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parte_declarativa ::= lista_declarativa_item0 cuerpo lista_cuerpo0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_declarativa",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parte_declarativa ::= lista_declarativa_item0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_declarativa",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // especific_subprograma_es ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR parte_formal IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // especific_subprograma_es ::= PROCEDURE IDENTIFICADOR IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma_es",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_subprograma ::= especific_subprograma_es parte_declarativa BEGIN secuencia_de_sentencias END designador_variante PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_subprograma",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_numerico ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal_numerico ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignador ::= NEW nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primario ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primario ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primario ::= asignador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primario ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= primario EXPONENTE primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= NOT primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= ABS primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_terminos ::= lista_terminos operador_suma termino 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(a + "+" + b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_terminos ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_multiplicacion ::= REM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_suma ::= CONCATENAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_unario ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_unario ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_membresia ::= NOT IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_membresia ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_relacional ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_relacional ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operador_relacional ::= DISTINTO_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_simple ::= operador_unario lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_simple ::= lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rango ::= expresion_simple RANGO expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relacion ::= expresion_simple operador_membresia rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relacion ::= expresion_simple operador_membresia indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relacion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relacion ::= expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_orelse ::= expresion_orelse OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_orelse ::= relacion OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_andthen ::= expresion_andthen AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_andthen ::= relacion AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_xor ::= expresion_xor XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_xor ::= relacion XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_or ::= expresion_or OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_or ::= relacion OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_and ::= expresion_and AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_and ::= relacion AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion_orelse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion_andthen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion_xor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_identificador2 ::= lista_identificador2 COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_identificador2 ::= IDENTIFICADOR COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicializacion_opcion ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicializacion_opcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modo ::= IN OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modo ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modo ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_parametro ::= lista_identificador2 DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_parametro ::= IDENTIFICADOR DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaracion_parametro ::= lista_declaracion_parametro PUNTO_Y_COMA declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaracion_parametro ::= declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // indicacion_subtipo ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parte_formal ::= PAR_IZQ lista_declaracion_parametro PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parte_formal_variante ::= parte_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_formal_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operador_simbolo ::= CADENA_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_simbolo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // designador ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // designador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especific_subprograma ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especific_subprograma ::= PROCEDURE IDENTIFICADOR parte_formal_variante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_subprograma ::= especific_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_subprograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombre ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unidad_compilacion ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidad_compilacion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_compilacion ::= lista_compilacion unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_compilacion ::= unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // raiz ::= lista_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

