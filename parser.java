
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 19 03:13:28 CST 2009
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 19 03:13:28 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\014\003\000\002\014\003\000\002\005\003\000" +
    "\002\015\005\000\002\015\007\000\002\024\003\000\002" +
    "\024\003\000\002\032\003\000\002\016\002\000\002\016" +
    "\003\000\002\025\005\000\002\023\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\007\000\002\027\007\000" +
    "\002\030\002\000\002\030\003\000\002\030\003\000\002" +
    "\030\004\000\002\031\002\000\002\031\004\000\002\033" +
    "\005\000\002\033\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\017\005\000\002\017\005\000\002" +
    "\020\005\000\002\020\005\000\002\021\005\000\002\021" +
    "\005\000\002\022\006\000\002\022\006\000\002\042\006" +
    "\000\002\042\006\000\002\043\003\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\044\005\000\002" +
    "\046\003\000\002\046\004\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\003\000\002\050\004\000" +
    "\002\051\003\000\002\051\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\034\003" +
    "\000\002\034\005\000\002\036\003\000\002\036\005\000" +
    "\002\040\003\000\002\040\004\000\002\040\004\000\002" +
    "\040\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\011\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\006\036\013\061\005\001\002\000\010\002" +
    "\000\036\013\061\005\001\002\000\004\146\200\001\002" +
    "\000\010\002\ufffd\036\ufffd\061\ufffd\001\002\000\010\002" +
    "\ufff9\036\ufff9\061\ufff9\001\002\000\004\002\177\001\002" +
    "\000\010\002\uffff\036\uffff\061\uffff\001\002\000\010\002" +
    "\ufffc\036\ufffc\061\ufffc\001\002\000\006\146\014\147\016" +
    "\001\002\000\006\071\ufff6\113\ufff6\001\002\000\006\071" +
    "\ufff5\113\ufff5\001\002\000\072\002\ufff4\013\ufff4\036\ufff4" +
    "\042\ufff4\046\ufff4\050\ufff4\053\ufff4\061\ufff4\066\ufff4\071" +
    "\ufff4\110\ufff4\111\ufff4\113\ufff4\114\ufff4\115\ufff4\116\ufff4" +
    "\120\ufff4\122\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\132" +
    "\ufff4\133\ufff4\134\ufff4\135\ufff4\136\ufff4\137\ufff4\001\002" +
    "\000\006\071\ufff3\113\022\001\002\000\012\002\ufff2\036" +
    "\ufff2\061\ufff2\071\ufff2\001\002\000\004\071\175\001\002" +
    "\000\004\146\024\001\002\000\006\114\173\124\172\001" +
    "\002\000\006\117\164\123\165\001\002\000\006\117\027" +
    "\123\030\001\002\000\006\114\uffef\124\uffef\001\002\000" +
    "\004\146\163\001\002\000\012\042\032\055\031\146\uffeb" +
    "\147\uffeb\001\002\000\006\146\uffe9\147\uffe9\001\002\000" +
    "\010\055\162\146\uffea\147\uffea\001\002\000\006\146\035" +
    "\147\016\001\002\000\010\114\uffe7\124\uffe7\134\040\001" +
    "\002\000\070\002\ufffb\013\ufffb\036\ufffb\042\ufffb\046\ufffb" +
    "\050\ufffb\053\ufffb\061\ufffb\066\ufffb\110\ufffb\111\ufffb\113" +
    "\ufffb\114\ufffb\115\ufffb\116\ufffb\120\ufffb\122\ufffb\124\ufffb" +
    "\125\ufffb\126\ufffb\127\ufffb\132\ufffb\133\ufffb\134\ufffb\135" +
    "\ufffb\136\ufffb\137\ufffb\001\002\000\070\002\ufffa\013\ufffa" +
    "\036\ufffa\042\ufffa\046\ufffa\050\ufffa\053\ufffa\061\ufffa\066" +
    "\ufffa\110\ufffa\111\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa" +
    "\120\ufffa\122\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\132" +
    "\ufffa\133\ufffa\134\ufffa\135\ufffa\136\ufffa\137\ufffa\001\002" +
    "\000\016\002\ufff0\036\ufff0\061\ufff0\114\ufff0\124\ufff0\134" +
    "\ufff0\001\002\000\022\005\062\047\064\050\050\114\063" +
    "\116\066\120\042\146\035\147\016\001\002\000\006\114" +
    "\uffec\124\uffec\001\002\000\016\005\uffc3\047\uffc3\050\uffc3" +
    "\114\uffc3\146\uffc3\147\uffc3\001\002\000\060\013\uffb3\042" +
    "\uffb3\046\uffb3\050\uffb3\053\uffb3\066\uffb3\110\uffb3\111\uffb3" +
    "\113\uffb3\114\uffb3\115\uffb3\116\uffb3\120\uffb3\122\uffb3\124" +
    "\uffb3\125\uffb3\126\uffb3\127\uffb3\132\uffb3\133\uffb3\135\uffb3" +
    "\136\uffb3\137\uffb3\001\002\000\012\053\160\113\uffe1\114" +
    "\uffe1\124\uffe1\001\002\000\046\013\uffce\042\uffce\050\uffce" +
    "\053\uffce\110\uffce\111\111\113\uffce\114\uffce\116\106\120" +
    "\107\124\uffce\125\uffce\126\uffce\127\uffce\132\uffce\135\uffce" +
    "\136\uffce\137\uffce\001\002\000\012\110\156\113\uffe0\114" +
    "\uffe0\124\uffe0\001\002\000\006\114\uffe6\124\uffe6\001\002" +
    "\000\012\047\064\114\063\146\035\147\016\001\002\000" +
    "\060\013\uffb2\042\uffb2\046\uffb2\050\uffb2\053\uffb2\066\uffb2" +
    "\110\uffb2\111\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\120" +
    "\uffb2\122\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\132\uffb2" +
    "\133\uffb2\135\uffb2\136\uffb2\137\uffb2\001\002\000\012\013" +
    "\153\113\uffe2\114\uffe2\124\uffe2\001\002\000\036\013\uffd3" +
    "\042\133\050\141\053\uffd3\110\uffd3\113\uffd3\114\uffd3\124" +
    "\uffd3\125\135\126\137\127\132\135\134\136\142\137\136" +
    "\001\002\000\012\053\126\113\uffde\114\uffde\124\uffde\001" +
    "\002\000\060\013\uffb7\042\uffb7\046\uffb7\050\uffb7\053\uffb7" +
    "\066\uffb7\110\uffb7\111\uffb7\113\uffb7\114\uffb7\115\uffb7\116" +
    "\uffb7\120\uffb7\122\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7" +
    "\132\uffb7\133\124\135\uffb7\136\uffb7\137\uffb7\001\002\000" +
    "\056\013\uffb9\042\uffb9\046\uffb9\050\uffb9\053\uffb9\066\uffb9" +
    "\110\uffb9\111\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\120" +
    "\uffb9\122\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\132\uffb9" +
    "\135\uffb9\136\uffb9\137\uffb9\001\002\000\012\013\121\113" +
    "\uffdf\114\uffdf\124\uffdf\001\002\000\056\013\uffbb\042\uffbb" +
    "\046\114\050\uffbb\053\uffbb\066\116\110\uffbb\111\uffbb\113" +
    "\uffbb\114\uffbb\115\113\116\uffbb\120\uffbb\122\115\124\uffbb" +
    "\125\uffbb\126\uffbb\127\uffbb\132\uffbb\135\uffbb\136\uffbb\137" +
    "\uffbb\001\002\000\016\005\062\047\064\050\050\114\063" +
    "\146\035\147\016\001\002\000\012\047\064\114\063\146" +
    "\035\147\016\001\002\000\022\005\062\047\064\050\050" +
    "\114\063\116\066\120\042\146\035\147\016\001\002\000" +
    "\006\146\035\147\016\001\002\000\016\013\067\053\071" +
    "\110\070\113\uffe3\114\uffe3\124\uffe3\001\002\000\016\005" +
    "\uffc4\047\uffc4\050\uffc4\114\uffc4\146\uffc4\147\uffc4\001\002" +
    "\000\024\005\062\047\064\050\050\101\076\114\063\116" +
    "\066\120\042\146\035\147\016\001\002\000\022\005\062" +
    "\047\064\050\050\114\063\116\066\120\042\146\035\147" +
    "\016\001\002\000\024\005\062\027\072\047\064\050\050" +
    "\114\063\116\066\120\042\146\035\147\016\001\002\000" +
    "\022\005\062\047\064\050\050\114\063\116\066\120\042" +
    "\146\035\147\016\001\002\000\012\053\uffdb\113\uffdb\114" +
    "\uffdb\124\uffdb\001\002\000\012\053\uffd5\113\uffd5\114\uffd5" +
    "\124\uffd5\001\002\000\012\110\uffd9\113\uffd9\114\uffd9\124" +
    "\uffd9\001\002\000\022\005\062\047\064\050\050\114\063" +
    "\116\066\120\042\146\035\147\016\001\002\000\012\013" +
    "\uffdd\113\uffdd\114\uffdd\124\uffdd\001\002\000\012\013\uffd7" +
    "\113\uffd7\114\uffd7\124\uffd7\001\002\000\060\013\uffb0\042" +
    "\uffb0\046\uffb0\050\uffb0\053\uffb0\066\uffb0\110\uffb0\111\uffb0" +
    "\113\uffb0\114\uffb0\115\uffb0\116\uffb0\120\uffb0\122\uffb0\124" +
    "\uffb0\125\uffb0\126\uffb0\127\uffb0\132\uffb0\133\uffb0\135\uffb0" +
    "\136\uffb0\137\uffb0\001\002\000\004\113\103\001\002\000" +
    "\060\013\uffb1\042\uffb1\046\uffb1\050\uffb1\053\uffb1\066\uffb1" +
    "\110\uffb1\111\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\120" +
    "\uffb1\122\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\132\uffb1" +
    "\133\uffb1\135\uffb1\136\uffb1\137\uffb1\001\002\000\056\013" +
    "\uffb6\042\uffb6\046\uffb6\050\uffb6\053\uffb6\066\uffb6\110\uffb6" +
    "\111\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\120\uffb6\122" +
    "\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\132\uffb6\135\uffb6" +
    "\136\uffb6\137\uffb6\001\002\000\046\013\uffcd\042\uffcd\050" +
    "\uffcd\053\uffcd\110\uffcd\111\111\113\uffcd\114\uffcd\116\106" +
    "\120\107\124\uffcd\125\uffcd\126\uffcd\127\uffcd\132\uffcd\135" +
    "\uffcd\136\uffcd\137\uffcd\001\002\000\016\005\uffc2\047\uffc2" +
    "\050\uffc2\114\uffc2\146\uffc2\147\uffc2\001\002\000\016\005" +
    "\uffc1\047\uffc1\050\uffc1\114\uffc1\146\uffc1\147\uffc1\001\002" +
    "\000\016\005\062\047\064\050\050\114\063\146\035\147" +
    "\016\001\002\000\016\005\uffc0\047\uffc0\050\uffc0\114\uffc0" +
    "\146\uffc0\147\uffc0\001\002\000\056\013\uffba\042\uffba\046" +
    "\114\050\uffba\053\uffba\066\116\110\uffba\111\uffba\113\uffba" +
    "\114\uffba\115\113\116\uffba\120\uffba\122\115\124\uffba\125" +
    "\uffba\126\uffba\127\uffba\132\uffba\135\uffba\136\uffba\137\uffba" +
    "\001\002\000\016\005\uffbf\047\uffbf\050\uffbf\114\uffbf\146" +
    "\uffbf\147\uffbf\001\002\000\016\005\uffbd\047\uffbd\050\uffbd" +
    "\114\uffbd\146\uffbd\147\uffbd\001\002\000\016\005\uffbe\047" +
    "\uffbe\050\uffbe\114\uffbe\146\uffbe\147\uffbe\001\002\000\016" +
    "\005\uffbc\047\uffbc\050\uffbc\114\uffbc\146\uffbc\147\uffbc\001" +
    "\002\000\016\005\062\047\064\050\050\114\063\146\035" +
    "\147\016\001\002\000\056\013\uffb8\042\uffb8\046\uffb8\050" +
    "\uffb8\053\uffb8\066\uffb8\110\uffb8\111\uffb8\113\uffb8\114\uffb8" +
    "\115\uffb8\116\uffb8\120\uffb8\122\uffb8\124\uffb8\125\uffb8\126" +
    "\uffb8\127\uffb8\132\uffb8\135\uffb8\136\uffb8\137\uffb8\001\002" +
    "\000\004\101\122\001\002\000\022\005\062\047\064\050" +
    "\050\114\063\116\066\120\042\146\035\147\016\001\002" +
    "\000\012\013\uffd6\113\uffd6\114\uffd6\124\uffd6\001\002\000" +
    "\012\047\064\114\063\146\035\147\016\001\002\000\056" +
    "\013\uffb4\042\uffb4\046\uffb4\050\uffb4\053\uffb4\066\uffb4\110" +
    "\uffb4\111\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\120\uffb4" +
    "\122\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\132\uffb4\135" +
    "\uffb4\136\uffb4\137\uffb4\001\002\000\004\027\127\001\002" +
    "\000\022\005\062\047\064\050\050\114\063\116\066\120" +
    "\042\146\035\147\016\001\002\000\012\053\uffd4\113\uffd4" +
    "\114\uffd4\124\uffd4\001\002\000\022\005\062\047\064\050" +
    "\050\114\063\116\066\120\042\146\035\147\016\001\002" +
    "\000\022\005\uffc9\047\uffc9\050\uffc9\114\uffc9\116\uffc9\120" +
    "\uffc9\146\uffc9\147\uffc9\001\002\000\022\005\uffc6\047\uffc6" +
    "\050\uffc6\114\uffc6\116\uffc6\120\uffc6\146\uffc6\147\uffc6\001" +
    "\002\000\022\005\uffcb\047\uffcb\050\uffcb\114\uffcb\116\uffcb" +
    "\120\uffcb\146\uffcb\147\uffcb\001\002\000\022\005\uffca\047" +
    "\uffca\050\uffca\114\uffca\116\uffca\120\uffca\146\uffca\147\uffca" +
    "\001\002\000\022\005\uffc7\047\uffc7\050\uffc7\114\uffc7\116" +
    "\uffc7\120\uffc7\146\uffc7\147\uffc7\001\002\000\022\005\uffcc" +
    "\047\uffcc\050\uffcc\114\uffcc\116\uffcc\120\uffcc\146\uffcc\147" +
    "\uffcc\001\002\000\022\005\062\047\064\050\050\114\063" +
    "\116\066\120\042\146\035\147\016\001\002\000\004\042" +
    "\143\001\002\000\022\005\uffc8\047\uffc8\050\uffc8\114\uffc8" +
    "\116\uffc8\120\uffc8\146\uffc8\147\uffc8\001\002\000\022\005" +
    "\uffc5\047\uffc5\050\uffc5\114\uffc5\116\uffc5\120\uffc5\146\uffc5" +
    "\147\uffc5\001\002\000\016\013\uffd2\053\uffd2\110\uffd2\113" +
    "\uffd2\114\uffd2\124\uffd2\001\002\000\040\013\ufff0\046\uffb3" +
    "\053\ufff0\066\uffb3\110\ufff0\111\uffb3\113\ufff0\114\ufff0\115" +
    "\uffb3\116\uffb3\120\uffb3\122\uffb3\124\ufff0\132\uffb3\133\uffb3" +
    "\001\002\000\016\013\uffd1\053\uffd1\110\uffd1\113\uffd1\114" +
    "\uffd1\124\uffd1\001\002\000\016\013\uffd0\053\uffd0\110\uffd0" +
    "\113\uffd0\114\uffd0\124\uffd0\001\002\000\004\132\151\001" +
    "\002\000\022\005\062\047\064\050\050\114\063\116\066" +
    "\120\042\146\035\147\016\001\002\000\016\013\uffcf\053" +
    "\uffcf\110\uffcf\113\uffcf\114\uffcf\124\uffcf\001\002\000\022" +
    "\005\062\047\064\050\050\114\063\116\066\120\042\146" +
    "\035\147\016\001\002\000\012\013\uffdc\113\uffdc\114\uffdc" +
    "\124\uffdc\001\002\000\056\013\uffb5\042\uffb5\046\uffb5\050" +
    "\uffb5\053\uffb5\066\uffb5\110\uffb5\111\uffb5\113\uffb5\114\uffb5" +
    "\115\uffb5\116\uffb5\120\uffb5\122\uffb5\124\uffb5\125\uffb5\126" +
    "\uffb5\127\uffb5\132\uffb5\135\uffb5\136\uffb5\137\uffb5\001\002" +
    "\000\022\005\062\047\064\050\050\114\063\116\066\120" +
    "\042\146\035\147\016\001\002\000\012\110\uffd8\113\uffd8" +
    "\114\uffd8\124\uffd8\001\002\000\022\005\062\047\064\050" +
    "\050\114\063\116\066\120\042\146\035\147\016\001\002" +
    "\000\012\053\uffda\113\uffda\114\uffda\124\uffda\001\002\000" +
    "\006\146\uffe8\147\uffe8\001\002\000\006\117\uffe4\123\uffe4" +
    "\001\002\000\004\146\171\001\002\000\012\042\032\055" +
    "\031\146\uffeb\147\uffeb\001\002\000\006\146\035\147\016" +
    "\001\002\000\010\114\uffe7\124\uffe7\134\040\001\002\000" +
    "\006\114\uffed\124\uffed\001\002\000\006\117\uffe5\123\uffe5" +
    "\001\002\000\004\146\024\001\002\000\012\002\ufff1\036" +
    "\ufff1\061\ufff1\071\ufff1\001\002\000\006\114\uffee\124\uffee" +
    "\001\002\000\006\146\035\147\016\001\002\000\010\002" +
    "\ufff7\036\ufff7\061\ufff7\001\002\000\004\002\001\001\002" +
    "\000\012\002\ufff3\036\ufff3\061\ufff3\113\022\001\002\000" +
    "\010\002\ufff8\036\ufff8\061\ufff8\001\002\000\010\002\ufffe" +
    "\036\ufffe\061\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\016\002\007\003\003\004\010\005\005\006" +
    "\011\015\006\001\001\000\012\004\201\005\005\006\011" +
    "\015\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\016\032\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\020" +
    "\025\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\022\027\025\033\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\036\023\033\032\035\001" +
    "\001\000\004\031\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\007\046\010\054\011" +
    "\050\014\042\017\051\020\043\021\045\022\056\032\035" +
    "\034\044\036\057\040\055\042\053\043\064\046\052\051" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\154\011\050" +
    "\014\042\032\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\137\050\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\116\001\001\000\020\010\054\011\050\014\042" +
    "\032\035\034\104\036\057\040\055\001\001\000\012\010" +
    "\103\011\050\014\042\032\035\001\001\000\042\007\101" +
    "\010\054\011\050\014\042\017\051\020\043\021\045\022" +
    "\056\032\035\034\044\036\057\040\055\042\053\043\064" +
    "\046\052\051\060\001\001\000\006\014\100\032\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\054" +
    "\011\050\014\042\032\035\034\044\036\057\040\055\043" +
    "\076\046\052\051\060\001\001\000\026\010\054\011\050" +
    "\014\042\032\035\034\044\036\057\040\055\043\074\046" +
    "\052\051\060\001\001\000\026\010\054\011\050\014\042" +
    "\032\035\034\044\036\057\040\055\043\072\046\052\051" +
    "\060\001\001\000\026\010\054\011\050\014\042\032\035" +
    "\034\044\036\057\040\055\043\073\046\052\051\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\010\054\011\050\014\042\032\035\034\044\036" +
    "\057\040\055\043\077\046\052\051\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\054\011\050\014\042\032\035\036\111\040\055\001\001" +
    "\000\002\001\001\000\004\037\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\054\011\050\014\042\032\035\040\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\054" +
    "\011\050\014\042\032\035\034\044\036\057\040\055\043" +
    "\122\046\052\051\060\001\001\000\002\001\001\000\012" +
    "\010\124\011\050\014\042\032\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\010\054\011\050\014\042" +
    "\032\035\034\044\036\057\040\055\043\127\046\052\051" +
    "\060\001\001\000\002\001\001\000\030\010\054\011\050" +
    "\014\144\023\145\032\035\034\044\036\057\040\055\044" +
    "\146\046\147\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\054\011\050\014\042" +
    "\032\035\034\044\036\057\040\055\046\143\051\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\054\011\050" +
    "\014\042\032\035\034\044\036\057\040\055\046\151\051" +
    "\060\001\001\000\002\001\001\000\026\010\054\011\050" +
    "\014\042\032\035\034\044\036\057\040\055\043\153\046" +
    "\052\051\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\010\054\011\050\014\042\032\035\034\044\036" +
    "\057\040\055\043\156\046\052\051\060\001\001\000\002" +
    "\001\001\000\026\010\054\011\050\014\042\032\035\034" +
    "\044\036\057\040\055\043\160\046\052\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\165\001\001\000\010\014\036" +
    "\023\166\032\035\001\001\000\004\031\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\173\033\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\036\023\175\032\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\200\025\017\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_numerico ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal_numerico ::= ENTERO_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_numerico",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= CADENA_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= literal_numerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= NULL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignador ::= NEW nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primario ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primario ::= asignador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primario ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primario",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= primario EXPONENTE primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= NOT primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= ABS primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= primario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // termino ::= termino operador_multiplicacion factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_terminos ::= lista_terminos operador_suma termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_terminos ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_terminos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_multiplicacion ::= REM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_multiplicacion ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_multiplicacion ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_multiplicacion ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_suma ::= CONCATENAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_suma ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_suma ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_suma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_unario ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_unario ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_membresia ::= NOT IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_membresia ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_membresia",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_relacional ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_relacional ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operador_relacional ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operador_relacional ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operador_relacional ::= DISTINTO_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_simple ::= operador_unario lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_simple ::= lista_terminos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rango ::= expresion_simple RANGO expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relacion ::= expresion_simple operador_membresia rango 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relacion ::= expresion_simple operador_membresia indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relacion ::= expresion_simple operador_relacional expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relacion ::= expresion_simple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_orelse ::= expresion_orelse OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_orelse ::= relacion OR ELSE relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_orelse",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_andthen ::= expresion_andthen AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_andthen ::= relacion AND THEN relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_andthen",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_xor ::= expresion_xor XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_xor ::= relacion XOR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_xor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_or ::= expresion_or OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_or ::= relacion OR relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_or",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_and ::= expresion_and AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_and ::= relacion AND relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_and",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion_orelse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion_andthen 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion_xor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= relacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_identificador2 ::= lista_identificador2 COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_identificador2 ::= IDENTIFICADOR COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificador2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inicializacion_opcion ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inicializacion_opcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modo ::= IN OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modo ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modo ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_parametro ::= lista_identificador2 DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_parametro ::= IDENTIFICADOR DOS_PUNTOS modo indicacion_subtipo inicializacion_opcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_parametro",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaracion_parametro ::= lista_declaracion_parametro PUNTO_Y_COMA declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaracion_parametro ::= declaracion_parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion_parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // indicacion_subtipo ::= nombre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indicacion_subtipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parte_formal ::= PAR_DER lista_declaracion_parametro PAR_IZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parte_formal_variante ::= parte_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_formal_variante ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parte_formal_variante",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operador_simbolo ::= CADENA_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_simbolo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // designador ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // designador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designador",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especific_subprograma ::= FUNCTION designador parte_formal_variante RETURN indicacion_subtipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especific_subprograma ::= PROCEDURE IDENTIFICADOR parte_formal_variante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especific_subprograma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_subprograma ::= especific_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_subprograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombre ::= operador_simbolo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombre ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unidad_compilacion ::= cuerpo_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidad_compilacion ::= declaracion_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidad_compilacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_compilacion ::= lista_compilacion unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_compilacion ::= unidad_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_compilacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // raiz ::= lista_compilacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

