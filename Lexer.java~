/* The following code was generated by JFlex 1.4.2 on 09-14-09 02:00 AM */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 09-14-09 02:00 AM from the specification file
 * <tt>/home/fernando/Documentos/Clases/Compiladores 1/CompiladorADA/ADAlexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYCADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\3\1\0\1\7\1\4\22\0\1\5\1\14\1\63"+
    "\1\14\1\14\1\14\1\15\1\10\1\16\1\17\1\61\1\20\1\25"+
    "\1\13\1\11\1\30\12\2\1\27\1\26\1\23\1\21\1\24\1\14"+
    "\1\14\1\31\1\32\1\37\1\44\1\40\1\50\1\47\1\55\1\43"+
    "\1\1\1\56\1\42\1\53\1\45\1\33\1\41\1\60\1\34\1\36"+
    "\1\35\1\52\1\57\1\54\1\51\1\46\1\1\1\14\1\14\1\14"+
    "\1\14\1\12\1\14\1\31\1\32\1\37\1\44\1\40\1\50\1\47"+
    "\1\55\1\43\1\1\1\56\1\42\1\53\1\45\1\33\1\41\1\60"+
    "\1\34\1\36\1\35\1\52\1\57\1\54\1\51\1\46\1\1\1\14"+
    "\1\22\1\14\1\14\42\0\1\14\35\0\1\14\u1f53\0\1\62\230\0"+
    "\1\14\udf53\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\23\2\1\23\1\24"+
    "\1\25\1\26\1\27\3\0\1\30\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\2\1\41"+
    "\5\2\1\42\1\2\1\43\22\2\1\44\1\45\1\46"+
    "\1\47\17\2\1\50\1\51\1\52\1\4\1\0\1\2"+
    "\1\53\2\2\1\54\1\2\1\55\3\2\1\56\5\2"+
    "\1\57\16\2\1\60\13\2\1\61\1\62\3\2\1\63"+
    "\1\2\1\64\1\65\1\2\1\66\10\2\1\67\11\2"+
    "\1\70\2\2\1\71\1\72\3\2\1\73\1\2\1\74"+
    "\3\2\1\75\5\2\1\76\5\2\1\77\1\100\3\2"+
    "\1\101\1\102\1\2\1\103\1\2\1\104\3\2\1\105"+
    "\1\2\1\106\1\107\13\2\1\110\1\111\10\2\1\112"+
    "\1\113\3\2\1\114\1\115\1\2\1\116\1\117\1\2"+
    "\1\120\1\121\1\122\3\2\1\123\2\2\1\124\4\2"+
    "\1\125\5\2\1\126\3\2\1\127\1\130\1\131\1\132"+
    "\2\2\1\133\2\2\1\134\2\2\1\135\1\136\1\137"+
    "\1\140\1\2\1\141\1\2\1\142\1\143\3\2\1\144"+
    "\1\145\1\146\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\150\0\150\0\150\0\150\0\u0208\0\150"+
    "\0\u023c\0\u0270\0\150\0\150\0\u02a4\0\u02d8\0\u030c\0\u0340"+
    "\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0"+
    "\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\150\0\150\0\150\0\150\0\u071c\0\u0138"+
    "\0\u0750\0\150\0\u0784\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\u07b8\0\u07ec\0\234\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\234\0\u0924\0\234\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\234\0\234\0\234\0\234\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\150\0\u071c\0\150\0\u0784\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\234\0\u1110\0\234\0\u1144"+
    "\0\u1178\0\u11ac\0\234\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\234\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\234"+
    "\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\234\0\234\0\u17f8\0\u182c\0\u1860"+
    "\0\234\0\u1894\0\234\0\234\0\u18c8\0\234\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\234\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\234\0\u1c70\0\u1ca4\0\234\0\234\0\u1cd8\0\u1d0c\0\u1d40"+
    "\0\234\0\u1d74\0\234\0\u1da8\0\u1ddc\0\u1e10\0\234\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\234\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\234\0\234\0\u204c\0\u2080\0\u20b4\0\234"+
    "\0\234\0\u20e8\0\234\0\u211c\0\234\0\u2150\0\u2184\0\u21b8"+
    "\0\234\0\u21ec\0\234\0\234\0\u2220\0\u2254\0\u2288\0\u22bc"+
    "\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\234"+
    "\0\234\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594"+
    "\0\u25c8\0\234\0\234\0\u25fc\0\u2630\0\u2664\0\234\0\234"+
    "\0\u2698\0\234\0\234\0\u26cc\0\234\0\234\0\234\0\u2700"+
    "\0\u2734\0\u2768\0\234\0\u279c\0\u27d0\0\234\0\u2804\0\u2838"+
    "\0\u286c\0\u28a0\0\234\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4"+
    "\0\234\0\u29d8\0\u2a0c\0\u2a40\0\234\0\234\0\234\0\234"+
    "\0\u2a74\0\u2aa8\0\234\0\u2adc\0\u2b10\0\234\0\u2b44\0\u2b78"+
    "\0\234\0\234\0\234\0\234\0\u2bac\0\234\0\u2be0\0\234"+
    "\0\234\0\u2c14\0\u2c48\0\u2c7c\0\234\0\234\0\234\0\234"+
    "\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\3\6\1\7\1\3\1\10\1\11"+
    "\1\3\1\12\1\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\4\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\4\4\1\52\1\53\1\54\3\55"+
    "\1\0\57\55\1\56\65\0\2\4\7\0\1\4\16\0"+
    "\30\4\5\0\1\5\6\0\1\57\55\0\3\6\1\60"+
    "\64\0\1\6\55\0\1\61\27\0\30\61\14\0\1\62"+
    "\65\0\1\63\74\0\1\64\60\0\1\65\1\0\1\66"+
    "\1\67\60\0\1\70\2\0\1\71\60\0\1\72\63\0"+
    "\1\73\43\0\2\4\7\0\1\4\16\0\1\4\1\74"+
    "\1\4\1\75\1\76\1\4\1\77\2\4\1\100\2\4"+
    "\1\101\13\4\4\0\2\4\7\0\1\4\16\0\2\4"+
    "\1\102\4\4\1\103\20\4\4\0\2\4\7\0\1\4"+
    "\16\0\3\4\1\104\1\105\12\4\1\106\1\4\1\107"+
    "\6\4\4\0\2\4\7\0\1\4\16\0\1\110\6\4"+
    "\1\111\20\4\4\0\2\4\7\0\1\4\16\0\1\112"+
    "\6\4\1\113\5\4\1\114\6\4\1\115\3\4\4\0"+
    "\2\4\7\0\1\4\16\0\7\4\1\116\11\4\1\117"+
    "\6\4\4\0\2\4\7\0\1\4\16\0\1\120\1\4"+
    "\1\121\25\4\4\0\2\4\7\0\1\4\16\0\11\4"+
    "\1\122\2\4\1\123\3\4\1\124\7\4\4\0\2\4"+
    "\7\0\1\4\16\0\1\125\2\4\1\126\24\4\4\0"+
    "\2\4\7\0\1\4\16\0\2\4\1\127\7\4\1\130"+
    "\15\4\4\0\2\4\7\0\1\4\16\0\5\4\1\131"+
    "\6\4\1\132\2\4\1\133\10\4\4\0\2\4\7\0"+
    "\1\4\16\0\2\4\1\134\4\4\1\135\2\4\1\136"+
    "\15\4\4\0\2\4\7\0\1\4\16\0\2\4\1\137"+
    "\4\4\1\140\11\4\1\141\6\4\4\0\2\4\7\0"+
    "\1\4\16\0\2\4\1\142\4\4\1\143\20\4\4\0"+
    "\2\4\7\0\1\4\16\0\2\4\1\144\16\4\1\145"+
    "\6\4\4\0\2\4\7\0\1\4\16\0\2\4\1\146"+
    "\25\4\4\0\2\4\7\0\1\4\16\0\5\4\1\147"+
    "\6\4\1\150\13\4\4\0\2\4\7\0\1\4\16\0"+
    "\2\4\1\151\25\4\4\0\2\4\7\0\1\4\16\0"+
    "\12\4\1\152\11\4\1\153\3\4\64\0\1\154\4\0"+
    "\1\155\71\0\1\156\54\0\2\63\2\157\1\63\1\160"+
    "\2\0\50\63\4\0\2\4\7\0\1\4\16\0\2\4"+
    "\1\161\2\4\1\162\22\4\4\0\2\4\7\0\1\4"+
    "\16\0\3\4\1\163\24\4\4\0\2\4\7\0\1\4"+
    "\16\0\6\4\1\164\21\4\4\0\2\4\7\0\1\4"+
    "\16\0\11\4\1\165\1\166\15\4\4\0\2\4\7\0"+
    "\1\4\16\0\13\4\1\167\14\4\4\0\2\4\7\0"+
    "\1\4\16\0\13\4\1\170\14\4\4\0\2\4\7\0"+
    "\1\4\16\0\16\4\1\171\11\4\4\0\2\4\7\0"+
    "\1\4\16\0\24\4\1\172\3\4\4\0\2\4\7\0"+
    "\1\4\16\0\4\4\1\173\23\4\4\0\2\4\7\0"+
    "\1\4\16\0\12\4\1\174\1\4\1\175\13\4\4\0"+
    "\2\4\7\0\1\4\16\0\4\4\1\176\1\4\1\177"+
    "\5\4\1\200\5\4\1\201\3\4\1\202\1\203\4\0"+
    "\2\4\7\0\1\4\16\0\5\4\1\204\10\4\1\205"+
    "\11\4\4\0\2\4\7\0\1\4\16\0\3\4\1\206"+
    "\24\4\4\0\2\4\7\0\1\4\16\0\10\4\1\207"+
    "\17\4\4\0\2\4\7\0\1\4\16\0\7\4\1\210"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\10\4\1\211"+
    "\1\212\16\4\4\0\2\4\7\0\1\4\16\0\1\4"+
    "\1\213\26\4\4\0\2\4\7\0\1\4\16\0\5\4"+
    "\1\214\22\4\4\0\2\4\7\0\1\4\16\0\14\4"+
    "\1\215\13\4\4\0\2\4\7\0\1\4\16\0\5\4"+
    "\1\216\22\4\4\0\2\4\7\0\1\4\16\0\4\4"+
    "\1\217\6\4\1\220\14\4\4\0\2\4\7\0\1\4"+
    "\16\0\6\4\1\221\3\4\1\222\15\4\4\0\2\4"+
    "\7\0\1\4\16\0\6\4\1\223\21\4\4\0\2\4"+
    "\7\0\1\4\16\0\1\224\1\4\1\225\7\4\1\226"+
    "\15\4\4\0\2\4\7\0\1\4\16\0\2\4\1\227"+
    "\25\4\4\0\2\4\7\0\1\4\16\0\22\4\1\230"+
    "\5\4\4\0\2\4\7\0\1\4\16\0\6\4\1\231"+
    "\2\4\1\232\16\4\4\0\2\4\7\0\1\4\16\0"+
    "\16\4\1\233\11\4\4\0\2\4\7\0\1\4\16\0"+
    "\4\4\1\234\23\4\4\0\2\4\7\0\1\4\16\0"+
    "\23\4\1\235\4\4\4\0\2\4\7\0\1\4\16\0"+
    "\11\4\1\236\16\4\4\0\2\4\7\0\1\4\16\0"+
    "\4\4\1\237\23\4\4\0\2\4\7\0\1\4\16\0"+
    "\14\4\1\240\13\4\4\0\2\4\7\0\1\4\16\0"+
    "\3\4\1\241\24\4\4\0\2\4\7\0\1\4\16\0"+
    "\14\4\1\242\13\4\4\0\2\4\7\0\1\4\16\0"+
    "\3\4\1\243\24\4\4\0\2\4\7\0\1\4\16\0"+
    "\7\4\1\244\20\4\4\0\2\4\7\0\1\4\16\0"+
    "\4\4\1\245\23\4\4\0\2\4\7\0\1\4\16\0"+
    "\13\4\1\246\14\4\4\0\2\4\7\0\1\4\16\0"+
    "\4\4\1\247\23\4\4\0\2\4\7\0\1\4\16\0"+
    "\7\4\1\250\2\4\1\251\15\4\12\0\1\63\55\0"+
    "\2\4\7\0\1\4\16\0\3\4\1\252\24\4\4\0"+
    "\2\4\7\0\1\4\16\0\4\4\1\253\23\4\4\0"+
    "\2\4\7\0\1\4\16\0\1\254\27\4\4\0\2\4"+
    "\7\0\1\4\16\0\7\4\1\255\20\4\4\0\2\4"+
    "\7\0\1\4\16\0\1\256\27\4\4\0\2\4\7\0"+
    "\1\4\16\0\15\4\1\257\12\4\4\0\2\4\7\0"+
    "\1\4\16\0\12\4\1\260\15\4\4\0\2\4\7\0"+
    "\1\4\16\0\7\4\1\261\20\4\4\0\2\4\7\0"+
    "\1\4\16\0\5\4\1\262\22\4\4\0\2\4\7\0"+
    "\1\4\16\0\16\4\1\263\11\4\4\0\2\4\7\0"+
    "\1\4\16\0\21\4\1\264\6\4\4\0\2\4\7\0"+
    "\1\4\16\0\2\4\1\265\25\4\4\0\2\4\7\0"+
    "\1\4\16\0\1\266\27\4\4\0\2\4\7\0\1\4"+
    "\16\0\7\4\1\267\20\4\4\0\2\4\7\0\1\4"+
    "\16\0\21\4\1\270\6\4\4\0\2\4\7\0\1\4"+
    "\16\0\25\4\1\271\2\4\4\0\2\4\7\0\1\4"+
    "\16\0\16\4\1\272\11\4\4\0\2\4\7\0\1\4"+
    "\16\0\22\4\1\273\5\4\4\0\2\4\7\0\1\4"+
    "\16\0\7\4\1\274\20\4\4\0\2\4\7\0\1\4"+
    "\16\0\14\4\1\275\13\4\4\0\2\4\7\0\1\4"+
    "\16\0\1\276\27\4\4\0\2\4\7\0\1\4\16\0"+
    "\7\4\1\277\20\4\4\0\2\4\7\0\1\4\16\0"+
    "\4\4\1\300\23\4\4\0\2\4\7\0\1\4\16\0"+
    "\7\4\1\301\20\4\4\0\2\4\7\0\1\4\16\0"+
    "\5\4\1\302\22\4\4\0\2\4\7\0\1\4\16\0"+
    "\7\4\1\303\2\4\1\304\15\4\4\0\2\4\7\0"+
    "\1\4\16\0\3\4\1\305\24\4\4\0\2\4\7\0"+
    "\1\4\16\0\7\4\1\306\20\4\4\0\2\4\7\0"+
    "\1\4\16\0\4\4\1\307\23\4\4\0\2\4\7\0"+
    "\1\4\16\0\25\4\1\310\2\4\4\0\2\4\7\0"+
    "\1\4\16\0\16\4\1\311\11\4\4\0\2\4\7\0"+
    "\1\4\16\0\4\4\1\312\1\4\1\313\21\4\4\0"+
    "\2\4\7\0\1\4\16\0\26\4\1\314\1\4\4\0"+
    "\2\4\7\0\1\4\16\0\10\4\1\315\17\4\4\0"+
    "\2\4\7\0\1\4\16\0\12\4\1\316\15\4\4\0"+
    "\2\4\7\0\1\4\16\0\11\4\1\317\16\4\4\0"+
    "\2\4\7\0\1\4\16\0\1\320\3\4\1\321\23\4"+
    "\4\0\2\4\7\0\1\4\16\0\12\4\1\322\15\4"+
    "\4\0\2\4\7\0\1\4\16\0\11\4\1\323\16\4"+
    "\4\0\2\4\7\0\1\4\16\0\2\4\1\324\25\4"+
    "\4\0\2\4\7\0\1\4\16\0\7\4\1\325\20\4"+
    "\4\0\2\4\7\0\1\4\16\0\6\4\1\326\21\4"+
    "\4\0\2\4\7\0\1\4\16\0\12\4\1\327\15\4"+
    "\4\0\2\4\7\0\1\4\16\0\24\4\1\330\3\4"+
    "\4\0\2\4\7\0\1\4\16\0\14\4\1\331\13\4"+
    "\4\0\2\4\7\0\1\4\16\0\11\4\1\332\16\4"+
    "\4\0\2\4\7\0\1\4\16\0\4\4\1\333\23\4"+
    "\4\0\2\4\7\0\1\4\16\0\3\4\1\334\24\4"+
    "\4\0\2\4\7\0\1\4\16\0\15\4\1\335\12\4"+
    "\4\0\2\4\7\0\1\4\16\0\5\4\1\336\2\4"+
    "\1\337\17\4\4\0\2\4\7\0\1\4\16\0\5\4"+
    "\1\340\22\4\4\0\2\4\7\0\1\4\16\0\14\4"+
    "\1\341\13\4\4\0\2\4\7\0\1\4\16\0\3\4"+
    "\1\342\24\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\343\20\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\344\20\4\4\0\2\4\7\0\1\4\16\0\3\4"+
    "\1\345\24\4\4\0\2\4\7\0\1\4\16\0\3\4"+
    "\1\346\24\4\4\0\2\4\7\0\1\4\16\0\22\4"+
    "\1\347\5\4\4\0\2\4\7\0\1\4\16\0\3\4"+
    "\1\350\24\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\351\20\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\352\20\4\4\0\2\4\7\0\1\4\16\0\12\4"+
    "\1\353\15\4\4\0\2\4\7\0\1\4\16\0\3\4"+
    "\1\354\24\4\4\0\2\4\7\0\1\4\16\0\6\4"+
    "\1\355\21\4\4\0\2\4\7\0\1\4\16\0\15\4"+
    "\1\356\12\4\4\0\2\4\7\0\1\4\16\0\4\4"+
    "\1\357\23\4\4\0\2\4\7\0\1\4\16\0\17\4"+
    "\1\360\10\4\4\0\2\4\7\0\1\4\16\0\15\4"+
    "\1\361\12\4\4\0\2\4\7\0\1\4\16\0\10\4"+
    "\1\362\17\4\4\0\2\4\7\0\1\4\16\0\1\363"+
    "\27\4\4\0\2\4\7\0\1\4\16\0\22\4\1\364"+
    "\5\4\4\0\2\4\7\0\1\4\16\0\7\4\1\365"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\7\4\1\366"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\1\367\27\4"+
    "\4\0\2\4\7\0\1\4\16\0\4\4\1\370\23\4"+
    "\4\0\2\4\7\0\1\4\16\0\1\371\27\4\4\0"+
    "\2\4\7\0\1\4\16\0\15\4\1\372\12\4\4\0"+
    "\2\4\7\0\1\4\16\0\1\373\27\4\4\0\2\4"+
    "\7\0\1\4\16\0\4\4\1\374\23\4\4\0\2\4"+
    "\7\0\1\4\16\0\3\4\1\375\24\4\4\0\2\4"+
    "\7\0\1\4\16\0\4\4\1\376\23\4\4\0\2\4"+
    "\7\0\1\4\16\0\11\4\1\377\16\4\4\0\2\4"+
    "\7\0\1\4\16\0\7\4\1\u0100\20\4\4\0\2\4"+
    "\7\0\1\4\16\0\1\u0101\27\4\4\0\2\4\7\0"+
    "\1\4\16\0\5\4\1\u0102\22\4\4\0\2\4\7\0"+
    "\1\4\16\0\4\4\1\u0103\23\4\4\0\2\4\7\0"+
    "\1\4\16\0\7\4\1\u0104\20\4\4\0\2\4\7\0"+
    "\1\4\16\0\5\4\1\u0105\22\4\4\0\2\4\7\0"+
    "\1\4\16\0\14\4\1\u0106\13\4\4\0\2\4\7\0"+
    "\1\4\16\0\13\4\1\u0107\14\4\4\0\2\4\7\0"+
    "\1\4\16\0\7\4\1\u0108\20\4\4\0\2\4\7\0"+
    "\1\4\16\0\5\4\1\u0109\22\4\4\0\2\4\7\0"+
    "\1\4\16\0\21\4\1\u010a\6\4\4\0\2\4\7\0"+
    "\1\4\16\0\13\4\1\u010b\14\4\4\0\2\4\7\0"+
    "\1\4\16\0\14\4\1\u010c\13\4\4\0\2\4\7\0"+
    "\1\4\16\0\1\u010d\27\4\4\0\2\4\7\0\1\4"+
    "\16\0\4\4\1\u010e\23\4\4\0\2\4\7\0\1\4"+
    "\16\0\10\4\1\u010f\17\4\4\0\2\4\7\0\1\4"+
    "\16\0\1\u0110\27\4\4\0\2\4\7\0\1\4\16\0"+
    "\4\4\1\u0111\23\4\4\0\2\4\7\0\1\4\16\0"+
    "\16\4\1\u0112\11\4\4\0\2\4\7\0\1\4\16\0"+
    "\1\u0113\27\4\4\0\2\4\7\0\1\4\16\0\6\4"+
    "\1\u0114\21\4\4\0\2\4\7\0\1\4\16\0\13\4"+
    "\1\u0115\14\4\4\0\2\4\7\0\1\4\16\0\4\4"+
    "\1\u0116\23\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\u0117\20\4\4\0\2\4\7\0\1\4\16\0\3\4"+
    "\1\u0118\24\4\4\0\2\4\7\0\1\4\16\0\5\4"+
    "\1\u0119\22\4\4\0\2\4\7\0\1\4\16\0\12\4"+
    "\1\u011a\15\4\4\0\2\4\7\0\1\4\16\0\12\4"+
    "\1\u011b\15\4\4\0\2\4\7\0\1\4\16\0\6\4"+
    "\1\u011c\21\4\4\0\2\4\7\0\1\4\16\0\13\4"+
    "\1\u011d\14\4\4\0\2\4\7\0\1\4\16\0\5\4"+
    "\1\u011e\22\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\u011f\20\4\4\0\2\4\7\0\1\4\16\0\7\4"+
    "\1\u0120\20\4\4\0\2\4\7\0\1\4\16\0\1\u0121"+
    "\27\4\4\0\2\4\7\0\1\4\16\0\4\4\1\u0122"+
    "\23\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0123"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\14\4\1\u0124"+
    "\13\4\4\0\2\4\7\0\1\4\16\0\12\4\1\u0125"+
    "\15\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0126"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\4\4\1\u0127"+
    "\23\4\4\0\2\4\7\0\1\4\16\0\21\4\1\u0128"+
    "\6\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0129"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\13\4\1\u012a"+
    "\14\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u012b"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\6\4\1\u012c"+
    "\21\4\4\0\2\4\7\0\1\4\16\0\2\4\1\u012d"+
    "\25\4\4\0\2\4\7\0\1\4\16\0\4\4\1\u012e"+
    "\23\4\4\0\2\4\7\0\1\4\16\0\4\4\1\u012f"+
    "\23\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0130"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\4\4\1\u0131"+
    "\23\4\4\0\2\4\7\0\1\4\16\0\2\4\1\u0132"+
    "\25\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0133"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\3\4\1\u0134"+
    "\24\4\4\0\2\4\7\0\1\4\16\0\14\4\1\u0135"+
    "\13\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0136"+
    "\20\4\4\0\2\4\7\0\1\4\16\0\14\4\1\u0137"+
    "\13\4\4\0\2\4\7\0\1\4\16\0\13\4\1\u0138"+
    "\14\4\4\0\2\4\7\0\1\4\16\0\7\4\1\u0139"+
    "\20\4\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\7\1\4\11\1\1\1\11\2\1\2\11"+
    "\26\1\4\11\3\0\1\11\1\0\10\11\60\1\1\11"+
    "\1\1\1\11\1\1\1\0\311\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();   
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 101: 
          { return symbol(sym.TERMINATE);
          }
        case 105: break;
        case 25: 
          { return symbol(sym.FLECHA);
          }
        case 106: break;
        case 57: 
          { return symbol(sym.TYPE);
          }
        case 107: break;
        case 17: 
          { return symbol(sym.DOS_PUNTOS);
          }
        case 108: break;
        case 23: 
          { yybegin(YYINITIAL); return symbol(sym.CADENA_LITERAL, string);
          }
        case 109: break;
        case 54: 
          { return symbol(sym.MOD);
          }
        case 110: break;
        case 37: 
          { return symbol(sym.IN);
          }
        case 111: break;
        case 27: 
          { return symbol(sym.ETIQUETA_DER);
          }
        case 112: break;
        case 97: 
          { return symbol(sym.ABSTRACT);
          }
        case 113: break;
        case 34: 
          { return symbol(sym.OR);
          }
        case 114: break;
        case 71: 
          { return symbol(sym.RANGE);
          }
        case 115: break;
        case 79: 
          { return symbol(sym.ACCEPT);
          }
        case 116: break;
        case 66: 
          { return symbol(sym.WHEN);
          }
        case 117: break;
        case 55: 
          { return symbol(sym.BODY);
          }
        case 118: break;
        case 28: 
          { return symbol(sym.INDEFINIDO);
          }
        case 119: break;
        case 8: 
          { return symbol(sym.PAR_DER);
          }
        case 120: break;
        case 68: 
          { return symbol(sym.ARRAY);
          }
        case 121: break;
        case 72: 
          { return symbol(sym.ELSIF);
          }
        case 122: break;
        case 60: 
          { return symbol(sym.ELSE);
          }
        case 123: break;
        case 61: 
          { return symbol(sym.EXIT);
          }
        case 124: break;
        case 10: 
          { return symbol(sym.MAS);
          }
        case 125: break;
        case 16: 
          { return symbol(sym.PUNTO_Y_COMA);
          }
        case 126: break;
        case 90: 
          { return symbol(sym.REQUEUE);
          }
        case 127: break;
        case 88: 
          { return symbol(sym.RENAMES);
          }
        case 128: break;
        case 76: 
          { return symbol(sym.UNTIL);
          }
        case 129: break;
        case 78: 
          { return symbol(sym.ACCESS);
          }
        case 130: break;
        case 102: 
          { return symbol(sym.EXCEPTION);
          }
        case 131: break;
        case 62: 
          { return symbol(sym.LOOP);
          }
        case 132: break;
        case 45: 
          { return symbol(sym.AND);
          }
        case 133: break;
        case 15: 
          { return symbol(sym.COMA);
          }
        case 134: break;
        case 84: 
          { return symbol(sym.SELECT);
          }
        case 135: break;
        case 103: 
          { return symbol(sym.PROTECTED);
          }
        case 136: break;
        case 85: 
          { return symbol(sym.PRAGMA);
          }
        case 137: break;
        case 46: 
          { return symbol(sym.OUT);
          }
        case 138: break;
        case 89: 
          { return symbol(sym.REVERSE);
          }
        case 139: break;
        case 38: 
          { return symbol(sym.IF);
          }
        case 140: break;
        case 49: 
          { return symbol(sym.NOT);
          }
        case 141: break;
        case 70: 
          { return symbol(sym.RAISE);
          }
        case 142: break;
        case 96: 
          { return symbol(sym.GENERIC);
          }
        case 143: break;
        case 19: 
          { return symbol(sym.MULTIPLICACION);
          }
        case 144: break;
        case 20: 
          { return symbol(sym.MENOS);
          }
        case 145: break;
        case 77: 
          { return symbol(sym.WHILE);
          }
        case 146: break;
        case 40: 
          { return symbol(sym.EXPONENTE);
          }
        case 147: break;
        case 95: 
          { return symbol(sym.DECLARE);
          }
        case 148: break;
        case 56: 
          { return symbol(sym.TASK);
          }
        case 149: break;
        case 82: 
          { return symbol(sym.RECORD);
          }
        case 150: break;
        case 18: 
          { return symbol(sym.DIVISION);
          }
        case 151: break;
        case 86: 
          { return symbol(sym.DIGITS);
          }
        case 152: break;
        case 13: 
          { return symbol(sym.MENOR_QUE);
          }
        case 153: break;
        case 32: 
          { return symbol(sym.DISTINTO_DE);
          }
        case 154: break;
        case 31: 
          { return symbol(sym.ASIGNACION);
          }
        case 155: break;
        case 41: 
          { return symbol(sym.REAL_LITERAL, new Float(Float.parseFloat(yytext())));
          }
        case 156: break;
        case 35: 
          { return symbol(sym.OF);
          }
        case 157: break;
        case 43: 
          { return symbol(sym.ABS);
          }
        case 158: break;
        case 63: 
          { return symbol(sym.NULL);
          }
        case 159: break;
        case 14: 
          { return symbol(sym.MAYOR_QUE);
          }
        case 160: break;
        case 22: 
          { string.append(yytext());
          }
        case 161: break;
        case 65: 
          { return symbol(sym.WITH);
          }
        case 162: break;
        case 21: 
          { yybegin(YYCADENA); string.setLength(0);
          }
        case 163: break;
        case 48: 
          { return symbol(sym.END);
          }
        case 164: break;
        case 52: 
          { return symbol(sym.XOR);
          }
        case 165: break;
        case 80: 
          { return symbol(sym.OTHERS);
          }
        case 166: break;
        case 6: 
          { return symbol(sym.PUNTO);
          }
        case 167: break;
        case 26: 
          { return symbol(sym.MENOR_IGUAL_QUE);
          }
        case 168: break;
        case 47: 
          { return symbol(sym.REM);
          }
        case 169: break;
        case 1: 
          { System.out.println("Error lexico. El caracter "+yytext()+ " en la linea "+ yyline+ " y columna "+yycolumn+ " no es reconocido");
          }
        case 170: break;
        case 5: 
          { return symbol(sym.TIC);
          }
        case 171: break;
        case 53: 
          { return symbol(sym.USE);
          }
        case 172: break;
        case 69: 
          { return symbol(sym.BEGIN);
          }
        case 173: break;
        case 7: 
          { return symbol(sym.CONCATENAR);
          }
        case 174: break;
        case 64: 
          { return symbol(sym.GOTO);
          }
        case 175: break;
        case 58: 
          { return symbol(sym.THEN);
          }
        case 176: break;
        case 93: 
          { return symbol(sym.PRIVATE);
          }
        case 177: break;
        case 104: 
          { return symbol(sym.PROCEDURE);
          }
        case 178: break;
        case 81: 
          { return symbol(sym.RETURN);
          }
        case 179: break;
        case 33: 
          { return symbol(sym.AT);
          }
        case 180: break;
        case 92: 
          { return symbol(sym.PACKAGE);
          }
        case 181: break;
        case 100: 
          { return symbol(sym.FUNCTION);
          }
        case 182: break;
        case 30: 
          { return symbol(sym.ETIQUETA_IZQ);
          }
        case 183: break;
        case 99: 
          { return symbol(sym.CONSTANT);
          }
        case 184: break;
        case 74: 
          { return symbol(sym.DELAY);
          }
        case 185: break;
        case 87: 
          { return symbol(sym.ALIASED);
          }
        case 186: break;
        case 91: 
          { return symbol(sym.SUBTYPE);
          }
        case 187: break;
        case 29: 
          { return symbol(sym.MAYOR_IGUAL_QUE);
          }
        case 188: break;
        case 24: 
          { return symbol(sym.RANGO);
          }
        case 189: break;
        case 9: 
          { return symbol(sym.PAR_IZQ);
          }
        case 190: break;
        case 94: 
          { return symbol(sym.LIMITED);
          }
        case 191: break;
        case 2: 
          { return symbol(sym.IDENTIFICADOR, yytext());
          }
        case 192: break;
        case 98: 
          { return symbol(sym.SEPARATE);
          }
        case 193: break;
        case 11: 
          { return symbol(sym.IGUAL);
          }
        case 194: break;
        case 83: 
          { return symbol(sym.TAGGED);
          }
        case 195: break;
        case 3: 
          { return symbol(sym.ENTERO_LITERAL, new Integer(Integer.parseInt(yytext())));
          }
        case 196: break;
        case 42: 
          { return symbol(sym.CARACTER_LITERAL, yytext().charAt(1));
          }
        case 197: break;
        case 12: 
          { return symbol(sym.BARRA_VERTICAL);
          }
        case 198: break;
        case 39: 
          { return symbol(sym.DO);
          }
        case 199: break;
        case 51: 
          { return symbol(sym.FOR);
          }
        case 200: break;
        case 36: 
          { return symbol(sym.IS);
          }
        case 201: break;
        case 67: 
          { return symbol(sym.ABORT);
          }
        case 202: break;
        case 59: 
          { return symbol(sym.CASE);
          }
        case 203: break;
        case 73: 
          { return symbol(sym.ENTRY);
          }
        case 204: break;
        case 44: 
          { return symbol(sym.ALL);
          }
        case 205: break;
        case 75: 
          { return symbol(sym.DELTA);
          }
        case 206: break;
        case 50: 
          { return symbol(sym.NEW);
          }
        case 207: break;
        case 4: 
          { 
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
