/* The following code was generated by JFlex 1.4.2 on 09-22-09 12:11 AM */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 09-22-09 12:11 AM from the specification file
 * <tt>ADAlexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYCADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\1\0\1\5\1\4\22\0\1\5\1\12\1\27"+
    "\1\12\1\12\1\12\1\13\1\6\1\14\1\15\1\60\1\16\1\23"+
    "\1\11\1\7\1\26\12\2\1\25\1\24\1\21\1\17\1\22\1\12"+
    "\1\12\1\30\1\31\1\36\1\43\1\37\1\47\1\46\1\54\1\42"+
    "\1\1\1\55\1\41\1\52\1\44\1\32\1\40\1\57\1\33\1\35"+
    "\1\34\1\51\1\56\1\53\1\50\1\45\1\1\1\12\1\12\1\12"+
    "\1\12\1\10\1\12\1\30\1\31\1\36\1\43\1\37\1\47\1\46"+
    "\1\54\1\42\1\1\1\55\1\41\1\52\1\44\1\32\1\40\1\57"+
    "\1\33\1\35\1\34\1\51\1\56\1\53\1\50\1\45\1\1\1\12"+
    "\1\20\1\12\1\12\42\0\1\12\35\0\1\12\u1f53\0\1\61\230\0"+
    "\1\12\udf53\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\23\2\1\24\1\25"+
    "\1\26\1\27\2\0\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\2\1\41\5\2"+
    "\1\42\1\2\1\43\23\2\1\44\1\45\1\46\1\47"+
    "\17\2\1\50\1\51\1\52\1\4\1\2\1\53\2\2"+
    "\1\54\1\2\1\55\3\2\1\56\5\2\1\57\16\2"+
    "\1\60\6\2\1\61\5\2\1\62\1\63\2\2\1\64"+
    "\1\2\1\65\1\2\1\66\1\67\1\2\1\70\10\2"+
    "\1\71\11\2\1\72\2\2\1\73\1\74\3\2\1\75"+
    "\1\2\1\76\3\2\1\77\5\2\1\100\5\2\1\101"+
    "\1\102\3\2\1\103\1\104\1\2\1\105\1\2\1\106"+
    "\3\2\1\107\1\2\1\110\1\111\13\2\1\112\1\113"+
    "\10\2\1\114\1\115\3\2\1\116\1\117\1\2\1\120"+
    "\1\121\1\2\1\122\1\123\1\124\3\2\1\125\2\2"+
    "\1\126\4\2\1\127\5\2\1\130\3\2\1\131\1\132"+
    "\1\133\1\134\2\2\1\135\2\2\1\136\2\2\1\137"+
    "\1\140\1\141\1\142\1\2\1\143\1\2\1\144\1\145"+
    "\3\2\1\146\1\147\1\150\1\151\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\144\0\144\0\144\0\144\0\u01c2\0\144\0\u01f4"+
    "\0\u0226\0\144\0\144\0\u0258\0\u028a\0\144\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\144\0\144\0\144\0\u06a4\0\u06d6\0\144"+
    "\0\u0708\0\144\0\144\0\144\0\144\0\144\0\144\0\144"+
    "\0\144\0\u073a\0\u076c\0\226\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\226\0\u0898\0\226\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\226"+
    "\0\226\0\226\0\226\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\144\0\u06a4\0\144\0\u0708\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\226\0\u1036\0\226\0\u1068\0\u109a\0\u10cc"+
    "\0\226\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\226\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\226\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\226\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\226\0\226\0\u16da\0\u170c\0\226\0\u173e"+
    "\0\226\0\u1770\0\226\0\226\0\u17a2\0\226\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\226\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\226\0\u1b26\0\u1b58\0\226\0\226\0\u1b8a\0\u1bbc\0\u1bee"+
    "\0\226\0\u1c20\0\226\0\u1c52\0\u1c84\0\u1cb6\0\226\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\226\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\226\0\226\0\u1edc\0\u1f0e\0\u1f40\0\226"+
    "\0\226\0\u1f72\0\226\0\u1fa4\0\226\0\u1fd6\0\u2008\0\u203a"+
    "\0\226\0\u206c\0\226\0\226\0\u209e\0\u20d0\0\u2102\0\u2134"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\226"+
    "\0\226\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\226\0\226\0\u2454\0\u2486\0\u24b8\0\226\0\226"+
    "\0\u24ea\0\226\0\226\0\u251c\0\226\0\226\0\226\0\u254e"+
    "\0\u2580\0\u25b2\0\226\0\u25e4\0\u2616\0\226\0\u2648\0\u267a"+
    "\0\u26ac\0\u26de\0\226\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8"+
    "\0\226\0\u280a\0\u283c\0\u286e\0\226\0\226\0\226\0\226"+
    "\0\u28a0\0\u28d2\0\226\0\u2904\0\u2936\0\226\0\u2968\0\u299a"+
    "\0\226\0\226\0\226\0\226\0\u29cc\0\226\0\u29fe\0\226"+
    "\0\226\0\u2a30\0\u2a62\0\u2a94\0\226\0\226\0\226\0\226"+
    "\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\3\6\1\7\1\10\1\3\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\4\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\4\4\1\52\1\53\3\54\1\0\23\54"+
    "\1\55\32\54\63\0\2\4\5\0\1\4\17\0\30\4"+
    "\4\0\1\5\4\0\1\56\55\0\3\6\55\0\1\57"+
    "\26\0\30\57\11\0\1\60\63\0\1\61\72\0\1\62"+
    "\56\0\1\63\1\0\1\64\1\65\56\0\1\66\2\0"+
    "\1\67\56\0\1\70\61\0\1\71\43\0\2\4\5\0"+
    "\1\4\17\0\1\4\1\72\1\4\1\73\1\74\1\4"+
    "\1\75\2\4\1\76\2\4\1\77\13\4\3\0\2\4"+
    "\5\0\1\4\17\0\2\4\1\100\4\4\1\101\20\4"+
    "\3\0\2\4\5\0\1\4\17\0\3\4\1\102\1\103"+
    "\12\4\1\104\1\4\1\105\6\4\3\0\2\4\5\0"+
    "\1\4\17\0\1\106\6\4\1\107\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\1\110\6\4\1\111\5\4\1\112"+
    "\6\4\1\113\3\4\3\0\2\4\5\0\1\4\17\0"+
    "\7\4\1\114\11\4\1\115\6\4\3\0\2\4\5\0"+
    "\1\4\17\0\1\116\1\4\1\117\25\4\3\0\2\4"+
    "\5\0\1\4\17\0\11\4\1\120\2\4\1\121\3\4"+
    "\1\122\7\4\3\0\2\4\5\0\1\4\17\0\1\123"+
    "\2\4\1\124\15\4\1\125\6\4\3\0\2\4\5\0"+
    "\1\4\17\0\2\4\1\126\7\4\1\127\15\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\130\6\4\1\131"+
    "\2\4\1\132\10\4\3\0\2\4\5\0\1\4\17\0"+
    "\2\4\1\133\4\4\1\134\2\4\1\135\15\4\3\0"+
    "\2\4\5\0\1\4\17\0\2\4\1\136\4\4\1\137"+
    "\11\4\1\140\6\4\3\0\2\4\5\0\1\4\17\0"+
    "\2\4\1\141\4\4\1\142\20\4\3\0\2\4\5\0"+
    "\1\4\17\0\2\4\1\143\16\4\1\144\6\4\3\0"+
    "\2\4\5\0\1\4\17\0\2\4\1\145\25\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\146\6\4\1\147"+
    "\13\4\3\0\2\4\5\0\1\4\17\0\2\4\1\150"+
    "\25\4\3\0\2\4\5\0\1\4\17\0\12\4\1\151"+
    "\11\4\1\152\3\4\62\0\1\153\3\0\1\154\65\0"+
    "\1\155\54\0\2\61\2\156\1\61\1\0\51\61\3\0"+
    "\2\4\5\0\1\4\17\0\2\4\1\157\2\4\1\160"+
    "\22\4\3\0\2\4\5\0\1\4\17\0\3\4\1\161"+
    "\24\4\3\0\2\4\5\0\1\4\17\0\6\4\1\162"+
    "\21\4\3\0\2\4\5\0\1\4\17\0\11\4\1\163"+
    "\1\164\15\4\3\0\2\4\5\0\1\4\17\0\13\4"+
    "\1\165\14\4\3\0\2\4\5\0\1\4\17\0\13\4"+
    "\1\166\14\4\3\0\2\4\5\0\1\4\17\0\16\4"+
    "\1\167\11\4\3\0\2\4\5\0\1\4\17\0\24\4"+
    "\1\170\3\4\3\0\2\4\5\0\1\4\17\0\4\4"+
    "\1\171\23\4\3\0\2\4\5\0\1\4\17\0\12\4"+
    "\1\172\1\4\1\173\13\4\3\0\2\4\5\0\1\4"+
    "\17\0\4\4\1\174\1\4\1\175\5\4\1\176\5\4"+
    "\1\177\3\4\1\200\1\201\3\0\2\4\5\0\1\4"+
    "\17\0\5\4\1\202\10\4\1\203\11\4\3\0\2\4"+
    "\5\0\1\4\17\0\3\4\1\204\24\4\3\0\2\4"+
    "\5\0\1\4\17\0\10\4\1\205\17\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\206\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\10\4\1\207\1\210\16\4\3\0"+
    "\2\4\5\0\1\4\17\0\1\4\1\211\26\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\212\22\4\3\0"+
    "\2\4\5\0\1\4\17\0\14\4\1\213\13\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\214\22\4\3\0"+
    "\2\4\5\0\1\4\17\0\4\4\1\215\6\4\1\216"+
    "\14\4\3\0\2\4\5\0\1\4\17\0\6\4\1\217"+
    "\3\4\1\220\15\4\3\0\2\4\5\0\1\4\17\0"+
    "\6\4\1\221\21\4\3\0\2\4\5\0\1\4\17\0"+
    "\1\222\1\4\1\223\7\4\1\224\15\4\3\0\2\4"+
    "\5\0\1\4\17\0\4\4\1\225\23\4\3\0\2\4"+
    "\5\0\1\4\17\0\2\4\1\226\25\4\3\0\2\4"+
    "\5\0\1\4\17\0\22\4\1\227\5\4\3\0\2\4"+
    "\5\0\1\4\17\0\6\4\1\230\2\4\1\231\16\4"+
    "\3\0\2\4\5\0\1\4\17\0\16\4\1\232\11\4"+
    "\3\0\2\4\5\0\1\4\17\0\4\4\1\233\23\4"+
    "\3\0\2\4\5\0\1\4\17\0\23\4\1\234\4\4"+
    "\3\0\2\4\5\0\1\4\17\0\11\4\1\235\16\4"+
    "\3\0\2\4\5\0\1\4\17\0\4\4\1\236\23\4"+
    "\3\0\2\4\5\0\1\4\17\0\4\4\1\237\7\4"+
    "\1\240\13\4\3\0\2\4\5\0\1\4\17\0\3\4"+
    "\1\241\24\4\3\0\2\4\5\0\1\4\17\0\14\4"+
    "\1\242\13\4\3\0\2\4\5\0\1\4\17\0\3\4"+
    "\1\243\24\4\3\0\2\4\5\0\1\4\17\0\7\4"+
    "\1\244\20\4\3\0\2\4\5\0\1\4\17\0\4\4"+
    "\1\245\23\4\3\0\2\4\5\0\1\4\17\0\13\4"+
    "\1\246\14\4\3\0\2\4\5\0\1\4\17\0\4\4"+
    "\1\247\23\4\3\0\2\4\5\0\1\4\17\0\7\4"+
    "\1\250\2\4\1\251\15\4\3\0\2\4\5\0\1\4"+
    "\17\0\3\4\1\252\24\4\3\0\2\4\5\0\1\4"+
    "\17\0\4\4\1\253\23\4\3\0\2\4\5\0\1\4"+
    "\17\0\1\254\27\4\3\0\2\4\5\0\1\4\17\0"+
    "\7\4\1\255\20\4\3\0\2\4\5\0\1\4\17\0"+
    "\1\256\27\4\3\0\2\4\5\0\1\4\17\0\15\4"+
    "\1\257\12\4\3\0\2\4\5\0\1\4\17\0\12\4"+
    "\1\260\15\4\3\0\2\4\5\0\1\4\17\0\7\4"+
    "\1\261\20\4\3\0\2\4\5\0\1\4\17\0\5\4"+
    "\1\262\22\4\3\0\2\4\5\0\1\4\17\0\16\4"+
    "\1\263\11\4\3\0\2\4\5\0\1\4\17\0\21\4"+
    "\1\264\6\4\3\0\2\4\5\0\1\4\17\0\2\4"+
    "\1\265\25\4\3\0\2\4\5\0\1\4\17\0\1\266"+
    "\27\4\3\0\2\4\5\0\1\4\17\0\7\4\1\267"+
    "\20\4\3\0\2\4\5\0\1\4\17\0\21\4\1\270"+
    "\6\4\3\0\2\4\5\0\1\4\17\0\25\4\1\271"+
    "\2\4\3\0\2\4\5\0\1\4\17\0\16\4\1\272"+
    "\11\4\3\0\2\4\5\0\1\4\17\0\22\4\1\273"+
    "\5\4\3\0\2\4\5\0\1\4\17\0\7\4\1\274"+
    "\20\4\3\0\2\4\5\0\1\4\17\0\14\4\1\275"+
    "\13\4\3\0\2\4\5\0\1\4\17\0\1\276\27\4"+
    "\3\0\2\4\5\0\1\4\17\0\7\4\1\277\20\4"+
    "\3\0\2\4\5\0\1\4\17\0\4\4\1\300\23\4"+
    "\3\0\2\4\5\0\1\4\17\0\7\4\1\301\20\4"+
    "\3\0\2\4\5\0\1\4\17\0\5\4\1\302\22\4"+
    "\3\0\2\4\5\0\1\4\17\0\7\4\1\303\2\4"+
    "\1\304\15\4\3\0\2\4\5\0\1\4\17\0\3\4"+
    "\1\305\24\4\3\0\2\4\5\0\1\4\17\0\7\4"+
    "\1\306\20\4\3\0\2\4\5\0\1\4\17\0\4\4"+
    "\1\307\23\4\3\0\2\4\5\0\1\4\17\0\25\4"+
    "\1\310\2\4\3\0\2\4\5\0\1\4\17\0\16\4"+
    "\1\311\11\4\3\0\2\4\5\0\1\4\17\0\4\4"+
    "\1\312\1\4\1\313\21\4\3\0\2\4\5\0\1\4"+
    "\17\0\26\4\1\314\1\4\3\0\2\4\5\0\1\4"+
    "\17\0\10\4\1\315\17\4\3\0\2\4\5\0\1\4"+
    "\17\0\12\4\1\316\15\4\3\0\2\4\5\0\1\4"+
    "\17\0\11\4\1\317\16\4\3\0\2\4\5\0\1\4"+
    "\17\0\1\320\3\4\1\321\23\4\3\0\2\4\5\0"+
    "\1\4\17\0\12\4\1\322\15\4\3\0\2\4\5\0"+
    "\1\4\17\0\11\4\1\323\16\4\3\0\2\4\5\0"+
    "\1\4\17\0\2\4\1\324\25\4\3\0\2\4\5\0"+
    "\1\4\17\0\7\4\1\325\20\4\3\0\2\4\5\0"+
    "\1\4\17\0\6\4\1\326\21\4\3\0\2\4\5\0"+
    "\1\4\17\0\12\4\1\327\15\4\3\0\2\4\5\0"+
    "\1\4\17\0\24\4\1\330\3\4\3\0\2\4\5\0"+
    "\1\4\17\0\14\4\1\331\13\4\3\0\2\4\5\0"+
    "\1\4\17\0\11\4\1\332\16\4\3\0\2\4\5\0"+
    "\1\4\17\0\4\4\1\333\23\4\3\0\2\4\5\0"+
    "\1\4\17\0\3\4\1\334\24\4\3\0\2\4\5\0"+
    "\1\4\17\0\15\4\1\335\12\4\3\0\2\4\5\0"+
    "\1\4\17\0\5\4\1\336\2\4\1\337\17\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\340\22\4\3\0"+
    "\2\4\5\0\1\4\17\0\14\4\1\341\13\4\3\0"+
    "\2\4\5\0\1\4\17\0\3\4\1\342\24\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\343\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\344\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\3\4\1\345\24\4\3\0"+
    "\2\4\5\0\1\4\17\0\3\4\1\346\24\4\3\0"+
    "\2\4\5\0\1\4\17\0\22\4\1\347\5\4\3\0"+
    "\2\4\5\0\1\4\17\0\3\4\1\350\24\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\351\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\352\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\12\4\1\353\15\4\3\0"+
    "\2\4\5\0\1\4\17\0\3\4\1\354\24\4\3\0"+
    "\2\4\5\0\1\4\17\0\6\4\1\355\21\4\3\0"+
    "\2\4\5\0\1\4\17\0\15\4\1\356\12\4\3\0"+
    "\2\4\5\0\1\4\17\0\4\4\1\357\23\4\3\0"+
    "\2\4\5\0\1\4\17\0\17\4\1\360\10\4\3\0"+
    "\2\4\5\0\1\4\17\0\15\4\1\361\12\4\3\0"+
    "\2\4\5\0\1\4\17\0\10\4\1\362\17\4\3\0"+
    "\2\4\5\0\1\4\17\0\1\363\27\4\3\0\2\4"+
    "\5\0\1\4\17\0\22\4\1\364\5\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\365\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\366\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\1\367\27\4\3\0\2\4\5\0"+
    "\1\4\17\0\4\4\1\370\23\4\3\0\2\4\5\0"+
    "\1\4\17\0\1\371\27\4\3\0\2\4\5\0\1\4"+
    "\17\0\15\4\1\372\12\4\3\0\2\4\5\0\1\4"+
    "\17\0\1\373\27\4\3\0\2\4\5\0\1\4\17\0"+
    "\4\4\1\374\23\4\3\0\2\4\5\0\1\4\17\0"+
    "\3\4\1\375\24\4\3\0\2\4\5\0\1\4\17\0"+
    "\4\4\1\376\23\4\3\0\2\4\5\0\1\4\17\0"+
    "\11\4\1\377\16\4\3\0\2\4\5\0\1\4\17\0"+
    "\7\4\1\u0100\20\4\3\0\2\4\5\0\1\4\17\0"+
    "\1\u0101\27\4\3\0\2\4\5\0\1\4\17\0\5\4"+
    "\1\u0102\22\4\3\0\2\4\5\0\1\4\17\0\4\4"+
    "\1\u0103\23\4\3\0\2\4\5\0\1\4\17\0\7\4"+
    "\1\u0104\20\4\3\0\2\4\5\0\1\4\17\0\5\4"+
    "\1\u0105\22\4\3\0\2\4\5\0\1\4\17\0\14\4"+
    "\1\u0106\13\4\3\0\2\4\5\0\1\4\17\0\13\4"+
    "\1\u0107\14\4\3\0\2\4\5\0\1\4\17\0\7\4"+
    "\1\u0108\20\4\3\0\2\4\5\0\1\4\17\0\5\4"+
    "\1\u0109\22\4\3\0\2\4\5\0\1\4\17\0\21\4"+
    "\1\u010a\6\4\3\0\2\4\5\0\1\4\17\0\13\4"+
    "\1\u010b\14\4\3\0\2\4\5\0\1\4\17\0\14\4"+
    "\1\u010c\13\4\3\0\2\4\5\0\1\4\17\0\1\u010d"+
    "\27\4\3\0\2\4\5\0\1\4\17\0\4\4\1\u010e"+
    "\23\4\3\0\2\4\5\0\1\4\17\0\10\4\1\u010f"+
    "\17\4\3\0\2\4\5\0\1\4\17\0\1\u0110\27\4"+
    "\3\0\2\4\5\0\1\4\17\0\4\4\1\u0111\23\4"+
    "\3\0\2\4\5\0\1\4\17\0\16\4\1\u0112\11\4"+
    "\3\0\2\4\5\0\1\4\17\0\1\u0113\27\4\3\0"+
    "\2\4\5\0\1\4\17\0\6\4\1\u0114\21\4\3\0"+
    "\2\4\5\0\1\4\17\0\13\4\1\u0115\14\4\3\0"+
    "\2\4\5\0\1\4\17\0\4\4\1\u0116\23\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\u0117\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\3\4\1\u0118\24\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\u0119\22\4\3\0"+
    "\2\4\5\0\1\4\17\0\12\4\1\u011a\15\4\3\0"+
    "\2\4\5\0\1\4\17\0\12\4\1\u011b\15\4\3\0"+
    "\2\4\5\0\1\4\17\0\6\4\1\u011c\21\4\3\0"+
    "\2\4\5\0\1\4\17\0\13\4\1\u011d\14\4\3\0"+
    "\2\4\5\0\1\4\17\0\5\4\1\u011e\22\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\u011f\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\7\4\1\u0120\20\4\3\0"+
    "\2\4\5\0\1\4\17\0\1\u0121\27\4\3\0\2\4"+
    "\5\0\1\4\17\0\4\4\1\u0122\23\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0123\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\14\4\1\u0124\13\4\3\0\2\4"+
    "\5\0\1\4\17\0\12\4\1\u0125\15\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0126\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\4\4\1\u0127\23\4\3\0\2\4"+
    "\5\0\1\4\17\0\21\4\1\u0128\6\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0129\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\13\4\1\u012a\14\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u012b\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\6\4\1\u012c\21\4\3\0\2\4"+
    "\5\0\1\4\17\0\2\4\1\u012d\25\4\3\0\2\4"+
    "\5\0\1\4\17\0\4\4\1\u012e\23\4\3\0\2\4"+
    "\5\0\1\4\17\0\4\4\1\u012f\23\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0130\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\4\4\1\u0131\23\4\3\0\2\4"+
    "\5\0\1\4\17\0\2\4\1\u0132\25\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0133\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\3\4\1\u0134\24\4\3\0\2\4"+
    "\5\0\1\4\17\0\14\4\1\u0135\13\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0136\20\4\3\0\2\4"+
    "\5\0\1\4\17\0\14\4\1\u0137\13\4\3\0\2\4"+
    "\5\0\1\4\17\0\13\4\1\u0138\14\4\3\0\2\4"+
    "\5\0\1\4\17\0\7\4\1\u0139\20\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\4\11\1\1\1\11\2\1\2\11"+
    "\2\1\1\11\24\1\3\11\2\0\1\11\1\0\10\11"+
    "\61\1\1\11\1\1\1\11\314\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();   
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 103: 
          { return symbol(sym.TERMINATE);
          }
        case 107: break;
        case 25: 
          { return symbol(sym.FLECHA);
          }
        case 108: break;
        case 59: 
          { return symbol(sym.TYPE);
          }
        case 109: break;
        case 17: 
          { return symbol(sym.DOS_PUNTOS);
          }
        case 110: break;
        case 56: 
          { return symbol(sym.MOD);
          }
        case 111: break;
        case 37: 
          { return symbol(sym.IN);
          }
        case 112: break;
        case 30: 
          { return symbol(sym.ETIQUETA_DER);
          }
        case 113: break;
        case 99: 
          { return symbol(sym.ABSTRACT);
          }
        case 114: break;
        case 73: 
          { return symbol(sym.RANGE);
          }
        case 115: break;
        case 34: 
          { return symbol(sym.OR);
          }
        case 116: break;
        case 81: 
          { return symbol(sym.ACCEPT);
          }
        case 117: break;
        case 68: 
          { return symbol(sym.WHEN);
          }
        case 118: break;
        case 49: 
          { return symbol(sym.PUT);
          }
        case 119: break;
        case 57: 
          { return symbol(sym.BODY);
          }
        case 120: break;
        case 28: 
          { return symbol(sym.INDEFINIDO);
          }
        case 121: break;
        case 9: 
          { return symbol(sym.PAR_DER);
          }
        case 122: break;
        case 70: 
          { return symbol(sym.ARRAY);
          }
        case 123: break;
        case 74: 
          { return symbol(sym.ELSIF);
          }
        case 124: break;
        case 62: 
          { return symbol(sym.ELSE);
          }
        case 125: break;
        case 63: 
          { return symbol(sym.EXIT);
          }
        case 126: break;
        case 10: 
          { return symbol(sym.MAS);
          }
        case 127: break;
        case 16: 
          { return symbol(sym.PUNTO_Y_COMA);
          }
        case 128: break;
        case 92: 
          { return symbol(sym.REQUEUE);
          }
        case 129: break;
        case 90: 
          { return symbol(sym.RENAMES);
          }
        case 130: break;
        case 78: 
          { return symbol(sym.UNTIL);
          }
        case 131: break;
        case 80: 
          { return symbol(sym.ACCESS);
          }
        case 132: break;
        case 104: 
          { return symbol(sym.EXCEPTION);
          }
        case 133: break;
        case 64: 
          { return symbol(sym.LOOP);
          }
        case 134: break;
        case 45: 
          { return symbol(sym.AND);
          }
        case 135: break;
        case 15: 
          { return symbol(sym.COMA);
          }
        case 136: break;
        case 86: 
          { return symbol(sym.SELECT);
          }
        case 137: break;
        case 105: 
          { return symbol(sym.PROTECTED);
          }
        case 138: break;
        case 87: 
          { return symbol(sym.PRAGMA);
          }
        case 139: break;
        case 46: 
          { return symbol(sym.OUT);
          }
        case 140: break;
        case 91: 
          { return symbol(sym.REVERSE);
          }
        case 141: break;
        case 38: 
          { return symbol(sym.IF);
          }
        case 142: break;
        case 50: 
          { return symbol(sym.NOT);
          }
        case 143: break;
        case 72: 
          { return symbol(sym.RAISE);
          }
        case 144: break;
        case 98: 
          { return symbol(sym.GENERIC);
          }
        case 145: break;
        case 20: 
          { return symbol(sym.MULTIPLICACION);
          }
        case 146: break;
        case 21: 
          { return symbol(sym.MENOS);
          }
        case 147: break;
        case 79: 
          { return symbol(sym.WHILE);
          }
        case 148: break;
        case 40: 
          { return symbol(sym.EXPONENTE);
          }
        case 149: break;
        case 97: 
          { return symbol(sym.DECLARE);
          }
        case 150: break;
        case 58: 
          { return symbol(sym.TASK);
          }
        case 151: break;
        case 84: 
          { return symbol(sym.RECORD);
          }
        case 152: break;
        case 18: 
          { return symbol(sym.DIVISION);
          }
        case 153: break;
        case 88: 
          { return symbol(sym.DIGITS);
          }
        case 154: break;
        case 13: 
          { return symbol(sym.MENOR_QUE);
          }
        case 155: break;
        case 32: 
          { return symbol(sym.DISTINTO_DE);
          }
        case 156: break;
        case 31: 
          { return symbol(sym.ASIGNACION);
          }
        case 157: break;
        case 41: 
          { return symbol(sym.REAL_LITERAL, new Float(Float.parseFloat(yytext())));
          }
        case 158: break;
        case 23: 
          { yybegin(YYINITIAL);return symbol(sym.CADENA_LITERAL,string);
          }
        case 159: break;
        case 35: 
          { return symbol(sym.OF);
          }
        case 160: break;
        case 43: 
          { return symbol(sym.ABS);
          }
        case 161: break;
        case 65: 
          { return symbol(sym.NULL);
          }
        case 162: break;
        case 14: 
          { return symbol(sym.MAYOR_QUE);
          }
        case 163: break;
        case 52: 
          { return symbol(sum.GET);
          }
        case 164: break;
        case 22: 
          { string.append(yytext());
          }
        case 165: break;
        case 67: 
          { return symbol(sym.WITH);
          }
        case 166: break;
        case 19: 
          { yybegin(YYCADENA); string.setLength(0);
          }
        case 167: break;
        case 48: 
          { return symbol(sym.END);
          }
        case 168: break;
        case 54: 
          { return symbol(sym.XOR);
          }
        case 169: break;
        case 82: 
          { return symbol(sym.OTHERS);
          }
        case 170: break;
        case 6: 
          { return symbol(sym.PUNTO);
          }
        case 171: break;
        case 26: 
          { return symbol(sym.MENOR_IGUAL_QUE);
          }
        case 172: break;
        case 47: 
          { return symbol(sym.REM);
          }
        case 173: break;
        case 1: 
          { System.out.println("Error lexico. El caracter "+yytext()+ " en la linea "+ yyline+ " y columna "+yycolumn+ " no es reconocido");
          }
        case 174: break;
        case 5: 
          { return symbol(sym.TIC);
          }
        case 175: break;
        case 55: 
          { return symbol(sym.USE);
          }
        case 176: break;
        case 71: 
          { return symbol(sym.BEGIN);
          }
        case 177: break;
        case 7: 
          { return symbol(sym.CONCATENAR);
          }
        case 178: break;
        case 66: 
          { return symbol(sym.GOTO);
          }
        case 179: break;
        case 60: 
          { return symbol(sym.THEN);
          }
        case 180: break;
        case 95: 
          { return symbol(sym.PRIVATE);
          }
        case 181: break;
        case 106: 
          { return symbol(sym.PROCEDURE);
          }
        case 182: break;
        case 83: 
          { return symbol(sym.RETURN);
          }
        case 183: break;
        case 33: 
          { return symbol(sym.AT);
          }
        case 184: break;
        case 94: 
          { return symbol(sym.PACKAGE);
          }
        case 185: break;
        case 102: 
          { return symbol(sym.FUNCTION);
          }
        case 186: break;
        case 27: 
          { return symbol(sym.ETIQUETA_IZQ);
          }
        case 187: break;
        case 101: 
          { return symbol(sym.CONSTANT);
          }
        case 188: break;
        case 76: 
          { return symbol(sym.DELAY);
          }
        case 189: break;
        case 89: 
          { return symbol(sym.ALIASED);
          }
        case 190: break;
        case 93: 
          { return symbol(sym.SUBTYPE);
          }
        case 191: break;
        case 29: 
          { return symbol(sym.MAYOR_IGUAL_QUE);
          }
        case 192: break;
        case 24: 
          { return symbol(sym.RANGO);
          }
        case 193: break;
        case 8: 
          { return symbol(sym.PAR_IZQ);
          }
        case 194: break;
        case 96: 
          { return symbol(sym.LIMITED);
          }
        case 195: break;
        case 2: 
          { return symbol(sym.IDENTIFICADOR, yytext());
          }
        case 196: break;
        case 100: 
          { return symbol(sym.SEPARATE);
          }
        case 197: break;
        case 11: 
          { return symbol(sym.IGUAL);
          }
        case 198: break;
        case 85: 
          { return symbol(sym.TAGGED);
          }
        case 199: break;
        case 3: 
          { return symbol(sym.ENTERO_LITERAL, new Integer(Integer.parseInt(yytext())));
          }
        case 200: break;
        case 42: 
          { return symbol(sym.CARACTER_LITERAL, yytext().charAt(1));
          }
        case 201: break;
        case 12: 
          { return symbol(sym.BARRA_VERTICAL);
          }
        case 202: break;
        case 39: 
          { return symbol(sym.DO);
          }
        case 203: break;
        case 53: 
          { return symbol(sym.FOR);
          }
        case 204: break;
        case 36: 
          { return symbol(sym.IS);
          }
        case 205: break;
        case 69: 
          { return symbol(sym.ABORT);
          }
        case 206: break;
        case 61: 
          { return symbol(sym.CASE);
          }
        case 207: break;
        case 75: 
          { return symbol(sym.ENTRY);
          }
        case 208: break;
        case 44: 
          { return symbol(sym.ALL);
          }
        case 209: break;
        case 77: 
          { return symbol(sym.DELTA);
          }
        case 210: break;
        case 51: 
          { return symbol(sym.NEW);
          }
        case 211: break;
        case 4: 
          { 
          }
        case 212: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
